/* Generated By:JJTree: Do not edit this line. OLikeOperator.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.common.collection.OMultiValue;
import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.sql.executor.metadata.OIndexFinder.Operation;
import java.util.Locale;
import java.util.Map;

public class OLikeOperator extends SimpleNode implements OBinaryCompareOperator {
  protected static final String WILDCARD_ANYCHAR = "?";
  protected static final String WILDCARD_ANY = "%";

  public OLikeOperator(int id) {
    super(id);
  }

  public OLikeOperator(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public boolean execute(Object iLeft, Object iRight, OCommandContext ctx) {
    if (OMultiValue.isMultiValue(iLeft) || OMultiValue.isMultiValue(iRight)) return false;

    if (iLeft == null || iRight == null) {
      return false;
    }
    return like(iLeft.toString(), iRight.toString());
  }

  public static boolean like(String currentValue, String iValue) {
    if (currentValue == null
        || currentValue.length() == 0
        || iValue == null
        || iValue.length() == 0)
      // EMPTY/NULL PARAMETERS
      return false;

    iValue = iValue.toLowerCase(Locale.ENGLISH);
    currentValue = currentValue.toLowerCase(Locale.ENGLISH);

    iValue = iValue.replace("\\", "\\\\");
    iValue = iValue.replace("[", "\\[");
    iValue = iValue.replace("]", "\\]");
    iValue = iValue.replace("{", "\\{");
    iValue = iValue.replace("}", "\\}");
    iValue = iValue.replace("(", "\\(");
    iValue = iValue.replace(")", "\\)");
    iValue = iValue.replace("|", "\\|");
    iValue = iValue.replace("*", "\\*");
    iValue = iValue.replace("+", "\\+");
    iValue = iValue.replace("$", "\\$");
    iValue = iValue.replace("^", "\\^");
    iValue = iValue.replace(".", "\\.");
    iValue = iValue.replace(WILDCARD_ANY, ".*");
    iValue = iValue.replace(WILDCARD_ANYCHAR, ".");

    return currentValue.matches(iValue);
  }

  @Override
  public String toString() {
    return "LIKE";
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("LIKE");
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("LIKE");
  }

  @Override
  public boolean supportsBasicCalculation() {
    return true;
  }

  @Override
  public OLikeOperator copy() {
    return this;
  }

  @Override
  public Operation getOperation() {
    return Operation.FuzzyEq;
  }

  @Override
  public boolean equals(Object obj) {
    return obj != null && obj.getClass().equals(this.getClass());
  }

  @Override
  public int hashCode() {
    return getClass().hashCode();
  }

  @Override
  public boolean isInclude() {
    return false;
  }

  @Override
  public boolean isLess() {
    return false;
  }

  @Override
  public boolean isGreater() {
    return false;
  }
}
/* JavaCC - OriginalChecksum=16d302abf0f85b404e57b964606952ca (do not edit this line) */

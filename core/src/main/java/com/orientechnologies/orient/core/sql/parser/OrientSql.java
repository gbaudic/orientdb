/* OrientSql.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. OrientSql.java */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.exception.OQueryParsingException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/** Orient Database Sql grammar. */
public class OrientSql /*@bgen(jjtree)*/ implements OrientSqlTreeConstants, OrientSqlConstants {
  /*@bgen(jjtree)*/
  protected JJTOrientSqlState jjtree = new JJTOrientSqlState();
  private int inputParamCount = 0;

  public OrientSql(InputStream stream) {
    this(new JavaCharStream(stream));
  }

  public OrientSql(InputStream stream, String charset) throws java.io.UnsupportedEncodingException {
    this(new JavaCharStream(stream, charset));
  }

  public final ORid Rid() throws ParseException {
    /*@bgen(jjtree) Rid */
    ORid jjtn000 = new ORid(JJTRID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_1(4)) {
        jj_consume_token(272);
        jjtn000.cluster = Integer();
        jj_consume_token(COLON);
        jjtn000.position = Integer();
        jjtn000.legacy = true;
      } else if (jj_2_2(3)) {
        jjtn000.cluster = Integer();
        jj_consume_token(COLON);
        jjtn000.position = Integer();
        jjtn000.legacy = true;
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case LBRACE:
            {
              jj_consume_token(LBRACE);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case RID_ATTR:
                  {
                    jj_consume_token(RID_ATTR);
                    break;
                  }
                case RID_STRING:
                  {
                    jj_consume_token(RID_STRING);
                    break;
                  }
                default:
                  jj_la1[0] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              jj_consume_token(COLON);
              jjtn000.expression = Expression();
              jj_consume_token(RBRACE);
              jjtn000.legacy = false;
              break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  /** Root productions. */
  public final OStatement parse() throws ParseException {
    /*@bgen(jjtree) parse */
    Oparse jjtn000 = new Oparse(JJTPARSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement result;
    try {
      result = Statement();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final List<OStatement> parseScript() throws ParseException {
    /*@bgen(jjtree) parseScript */
    OparseScript jjtn000 = new OparseScript(JJTPARSESCRIPT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    List<OStatement> result = new ArrayList<OStatement>();
    OStatement last;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SELECT:
          case TRAVERSE:
          case MATCH:
          case INSERT:
          case CREATE:
          case DELETE:
          case UPDATE:
          case TO:
          case WHILE:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case NULL:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RETURN:
          case RECORD:
          case LET:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case DISTINCT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case FOREACH:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case THIS:
          case RECORD_ATTRIBUTE:
          case RID_STRING:
          case TRUE:
          case FALSE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case SEMICOLON:
          case HOOK:
          case COLON:
          case MINUS:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
          case 272:
            {
              ;
              break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_1;
        }
        if (jj_2_3(2147483647)) {
          last = StatementSemicolon();
          result.add(last);
        } else {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case IF:
              {
                last = IfStatement();
                result.add(last);
                break;
              }
            case FOREACH:
              {
                last = ForEachBlock();
                result.add(last);
                break;
              }
            case WHILE:
              {
                last = WhileBlock();
                result.add(last);
                break;
              }
            case SEMICOLON:
              {
                jj_consume_token(SEMICOLON);
                break;
              }
            default:
              jj_la1[3] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OServerStatement parseServerStatement() throws ParseException {
    /*@bgen(jjtree) parseServerStatement */
    OparseServerStatement jjtn000 = new OparseServerStatement(JJTPARSESERVERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OServerStatement result;
    try {
      result = ServerStatement();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final java.lang.String String() throws ParseException {
    /*@bgen(jjtree) String */
    OString jjtn000 = new OString(JJTSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token = null;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STRING_LITERAL:
          {
            token = jj_consume_token(STRING_LITERAL);
            break;
          }
        case RID_STRING:
          {
            token = jj_consume_token(RID_STRING);
            break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return token.image;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OIdentifier Identifier() throws ParseException {
    /*@bgen(jjtree) Identifier */
    OIdentifier jjtn000 = new OIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token quotedToken = null;
    Token token = null;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IDENTIFIER:
          {
            token = jj_consume_token(IDENTIFIER);
            break;
          }
        case IN:
          {
            token = jj_consume_token(IN);
            break;
          }
        case SET:
          {
            token = jj_consume_token(SET);
            break;
          }
        case PUT:
          {
            token = jj_consume_token(PUT);
            break;
          }
        case ADD:
          {
            token = jj_consume_token(ADD);
            break;
          }
        case REMOVE:
          {
            token = jj_consume_token(REMOVE);
            break;
          }
        case MERGE:
          {
            token = jj_consume_token(MERGE);
            break;
          }
        case CONTENT:
          {
            token = jj_consume_token(CONTENT);
            break;
          }
        case ORDER:
          {
            token = jj_consume_token(ORDER);
            break;
          }
        case KEY:
          {
            token = jj_consume_token(KEY);
            break;
          }
        case OFFSET:
          {
            token = jj_consume_token(OFFSET);
            break;
          }
        case GROUP:
          {
            token = jj_consume_token(GROUP);
            break;
          }
        case VALUE:
          {
            token = jj_consume_token(VALUE);
            break;
          }
        case VALUES:
          {
            token = jj_consume_token(VALUES);
            break;
          }
        case RECORD:
          {
            token = jj_consume_token(RECORD);
            break;
          }
        case TO:
          {
            token = jj_consume_token(TO);
            break;
          }
        case LUCENE:
          {
            token = jj_consume_token(LUCENE);
            break;
          }
        case CLASS:
          {
            token = jj_consume_token(CLASS);
            break;
          }
        case CLASSES:
          {
            token = jj_consume_token(CLASSES);
            break;
          }
        case VIEW:
          {
            token = jj_consume_token(VIEW);
            break;
          }
        case UPDATABLE:
          {
            token = jj_consume_token(UPDATABLE);
            break;
          }
        case MINDEPTH:
          {
            token = jj_consume_token(MINDEPTH);
            break;
          }
        case NEAR:
          {
            token = jj_consume_token(NEAR);
            break;
          }
        case WITHIN:
          {
            token = jj_consume_token(WITHIN);
            break;
          }
        case EXCEPTION:
          {
            token = jj_consume_token(EXCEPTION);
            break;
          }
        case PROFILE:
          {
            token = jj_consume_token(PROFILE);
            break;
          }
        case STORAGE:
          {
            token = jj_consume_token(STORAGE);
            break;
          }
        case ON:
          {
            token = jj_consume_token(ON);
            break;
          }
        case OFF:
          {
            token = jj_consume_token(OFF);
            break;
          }
        case TRUNCATE:
          {
            token = jj_consume_token(TRUNCATE);
            break;
          }
        case FIND:
          {
            token = jj_consume_token(FIND);
            break;
          }
        case REFERENCES:
          {
            token = jj_consume_token(REFERENCES);
            break;
          }
        case EXTENDS:
          {
            token = jj_consume_token(EXTENDS);
            break;
          }
        case CLUSTERS:
          {
            token = jj_consume_token(CLUSTERS);
            break;
          }
        case ABSTRACT:
          {
            token = jj_consume_token(ABSTRACT);
            break;
          }
        case ALTER:
          {
            token = jj_consume_token(ALTER);
            break;
          }
        case NAME:
          {
            token = jj_consume_token(NAME);
            break;
          }
        case SHORTNAME:
          {
            token = jj_consume_token(SHORTNAME);
            break;
          }
        case SUPERCLASS:
          {
            token = jj_consume_token(SUPERCLASS);
            break;
          }
        case SUPERCLASSES:
          {
            token = jj_consume_token(SUPERCLASSES);
            break;
          }
        case OVERSIZE:
          {
            token = jj_consume_token(OVERSIZE);
            break;
          }
        case STRICTMODE:
          {
            token = jj_consume_token(STRICTMODE);
            break;
          }
        case ADDCLUSTER:
          {
            token = jj_consume_token(ADDCLUSTER);
            break;
          }
        case REMOVECLUSTER:
          {
            token = jj_consume_token(REMOVECLUSTER);
            break;
          }
        case CUSTOM:
          {
            token = jj_consume_token(CUSTOM);
            break;
          }
        case CLUSTERSELECTION:
          {
            token = jj_consume_token(CLUSTERSELECTION);
            break;
          }
        case DESCRIPTION:
          {
            token = jj_consume_token(DESCRIPTION);
            break;
          }
        case ENCRYPTION:
          {
            token = jj_consume_token(ENCRYPTION);
            break;
          }
        case DROP:
          {
            token = jj_consume_token(DROP);
            break;
          }
        case PROPERTY:
          {
            token = jj_consume_token(PROPERTY);
            break;
          }
        case FORCE:
          {
            token = jj_consume_token(FORCE);
            break;
          }
        case METADATA:
          {
            token = jj_consume_token(METADATA);
            break;
          }
        case COLLATE:
          {
            token = jj_consume_token(COLLATE);
            break;
          }
        case INDEX:
          {
            token = jj_consume_token(INDEX);
            break;
          }
        case ENGINE:
          {
            token = jj_consume_token(ENGINE);
            break;
          }
        case REBUILD:
          {
            token = jj_consume_token(REBUILD);
            break;
          }
        case ID:
          {
            token = jj_consume_token(ID);
            break;
          }
        case DATABASE:
          {
            token = jj_consume_token(DATABASE);
            break;
          }
        case OPTIMIZE:
          {
            token = jj_consume_token(OPTIMIZE);
            break;
          }
        case LINK:
          {
            token = jj_consume_token(LINK);
            break;
          }
        case TYPE:
          {
            token = jj_consume_token(TYPE);
            break;
          }
        case INVERSE:
          {
            token = jj_consume_token(INVERSE);
            break;
          }
        case EXPLAIN:
          {
            token = jj_consume_token(EXPLAIN);
            break;
          }
        case GRANT:
          {
            token = jj_consume_token(GRANT);
            break;
          }
        case REVOKE:
          {
            token = jj_consume_token(REVOKE);
            break;
          }
        case READ:
          {
            token = jj_consume_token(READ);
            break;
          }
        case EXECUTE:
          {
            token = jj_consume_token(EXECUTE);
            break;
          }
        case ALL:
          {
            token = jj_consume_token(ALL);
            break;
          }
        case NONE:
          {
            token = jj_consume_token(NONE);
            break;
          }
        case FUNCTION:
          {
            token = jj_consume_token(FUNCTION);
            break;
          }
        case PARAMETERS:
          {
            token = jj_consume_token(PARAMETERS);
            break;
          }
        case IDEMPOTENT:
          {
            token = jj_consume_token(IDEMPOTENT);
            break;
          }
        case LANGUAGE:
          {
            token = jj_consume_token(LANGUAGE);
            break;
          }
        case BEGIN:
          {
            token = jj_consume_token(BEGIN);
            break;
          }
        case COMMIT:
          {
            token = jj_consume_token(COMMIT);
            break;
          }
        case ROLLBACK:
          {
            token = jj_consume_token(ROLLBACK);
            break;
          }
        case IF:
          {
            token = jj_consume_token(IF);
            break;
          }
        case ELSE:
          {
            token = jj_consume_token(ELSE);
            break;
          }
        case CONTINUE:
          {
            token = jj_consume_token(CONTINUE);
            break;
          }
        case FAIL:
          {
            token = jj_consume_token(FAIL);
            break;
          }
        case ISOLATION:
          {
            token = jj_consume_token(ISOLATION);
            break;
          }
        case SLEEP:
          {
            token = jj_consume_token(SLEEP);
            break;
          }
        case CONSOLE:
          {
            token = jj_consume_token(CONSOLE);
            break;
          }
        case BLOB:
          {
            token = jj_consume_token(BLOB);
            break;
          }
        case SHARED:
          {
            token = jj_consume_token(SHARED);
            break;
          }
        case DEFAULT_:
          {
            token = jj_consume_token(DEFAULT_);
            break;
          }
        case SEQUENCE:
          {
            token = jj_consume_token(SEQUENCE);
            break;
          }
        case CACHE:
          {
            token = jj_consume_token(CACHE);
            break;
          }
        case CYCLE:
          {
            token = jj_consume_token(CYCLE);
            break;
          }
        case NOLIMIT:
          {
            token = jj_consume_token(NOLIMIT);
            break;
          }
        case NOCYCLE:
          {
            token = jj_consume_token(NOCYCLE);
            break;
          }
        case START:
          {
            token = jj_consume_token(START);
            break;
          }
        case OPTIONAL:
          {
            token = jj_consume_token(OPTIONAL);
            break;
          }
        case COUNT:
          {
            token = jj_consume_token(COUNT);
            break;
          }
        case HA:
          {
            token = jj_consume_token(HA);
            break;
          }
        case STATUS:
          {
            token = jj_consume_token(STATUS);
            break;
          }
        case SERVER:
          {
            token = jj_consume_token(SERVER);
            break;
          }
        case SYNC:
          {
            token = jj_consume_token(SYNC);
            break;
          }
        case EXISTS:
          {
            token = jj_consume_token(EXISTS);
            break;
          }
        case MOVE:
          {
            token = jj_consume_token(MOVE);
            break;
          }
        case DEPTH_ALIAS:
          {
            token = jj_consume_token(DEPTH_ALIAS);
            break;
          }
        case PATH_ALIAS:
          {
            token = jj_consume_token(PATH_ALIAS);
            break;
          }
        case IDENTIFIED:
          {
            token = jj_consume_token(IDENTIFIED);
            break;
          }
        case ROLE:
          {
            token = jj_consume_token(ROLE);
            break;
          }
        case USER:
          {
            token = jj_consume_token(USER);
            break;
          }
        case USERS:
          {
            token = jj_consume_token(USERS);
            break;
          }
        case RID:
          {
            token = jj_consume_token(RID);
            break;
          }
        case DEFAULTCLUSTER:
          {
            token = jj_consume_token(DEFAULTCLUSTER);
            break;
          }
        case SECURITY:
          {
            token = jj_consume_token(SECURITY);
            break;
          }
        case POLICY:
          {
            token = jj_consume_token(POLICY);
            break;
          }
        case SYSTEM:
          {
            token = jj_consume_token(SYSTEM);
            break;
          }
        case QUOTED_IDENTIFIER:
          {
            quotedToken = jj_consume_token(QUOTED_IDENTIFIER);
            break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      if (token != null) {
        jjtn000.setValue(token.image);
      } else {
        jjtn000.setQuotedValue(quotedToken.image);
      }

      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OInteger Integer() throws ParseException {
    /*@bgen(jjtree) Integer */
    OInteger jjtn000 = new OInteger(JJTINTEGER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    int sign = 1;
    Token tokenVal;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MINUS:
          {
            jj_consume_token(MINUS);
            sign = -1;
            break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
      }
      tokenVal = jj_consume_token(INTEGER_LITERAL);
      jjtn000.setValue(sign, tokenVal.image);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OFloatingPoint FloatingPoint() throws ParseException {
    /*@bgen(jjtree) FloatingPoint */
    OFloatingPoint jjtn000 = new OFloatingPoint(JJTFLOATINGPOINT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    String stringValue;
    Token tokenVal;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MINUS:
          {
            jj_consume_token(MINUS);
            jjtn000.sign = -1;
            break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
      }
      tokenVal = jj_consume_token(FLOATING_POINT_LITERAL);
      jjtn000.stringValue = tokenVal.image;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ONumber Number() throws ParseException {
    /*@bgen(jjtree) Number */
    ONumber jjtn000 = new ONumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ONumber result;
    try {
      if (jj_2_4(2147483647)) {
        result = Integer();
      } else if (jj_2_5(2147483647)) {
        result = FloatingPoint();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OServerStatement ServerStatement() throws ParseException {
    /*@bgen(jjtree) ServerStatement */
    OServerStatement jjtn000 = new OServerStatement(JJTSERVERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OServerStatement result = null;
    try {
      if (jj_2_6(2)) {
        result = CreateDatabaseStatement();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case DROP:
            {
              result = DropDatabaseStatement();
              break;
            }
          default:
            jj_la1[8] = jj_gen;
            if (jj_2_7(3)) {
              result = CreateSystemUserStatement();
            } else if (jj_2_8(3)) {
              result = AlterSystemRoleStatement();
            } else if (jj_2_9(3)) {
              result = ExistsSystemUserStatement();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OStatement Statement() throws ParseException {
    /*@bgen(jjtree) Statement */
    OStatement jjtn000 = new OStatement(JJTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement result = null;
    try {
      result = StatementInternal();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case SEMICOLON:
          {
            jj_consume_token(SEMICOLON);
            break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OStatement StatementSemicolon() throws ParseException {
    /*@bgen(jjtree) StatementSemicolon */
    OStatementSemicolon jjtn000 = new OStatementSemicolon(JJTSTATEMENTSEMICOLON);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement result = null;
    try {
      if (jj_2_10(2147483647)) {
        result = StatementInternal();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case NULL:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case DISTINCT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case THIS:
          case RECORD_ATTRIBUTE:
          case RID_STRING:
          case TRUE:
          case FALSE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case HOOK:
          case COLON:
          case MINUS:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
          case 272:
            {
              result = ExpressionStatement();
              break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OStatement StatementInternal() throws ParseException {
    /*@bgen(jjtree) StatementInternal */
    OStatementInternal jjtn000 = new OStatementInternal(JJTSTATEMENTINTERNAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement result = null;
    try {
      if (jj_2_53(2)) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SELECT:
          case TRAVERSE:
          case MATCH:
          case FIND:
            {
              result = QueryStatement();
              break;
            }
          default:
            jj_la1[11] = jj_gen;
            if (jj_2_11(2)) {
              result = DeleteStatement();
            } else if (jj_2_12(2)) {
              result = DeleteVertexStatement();
            } else if (jj_2_13(2)) {
              result = DeleteEdgeStatement();
            } else {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INSERT:
                  {
                    result = InsertStatement();
                    break;
                  }
                default:
                  jj_la1[12] = jj_gen;
                  if (jj_2_14(2)) {
                    result = CreateClassStatement();
                  } else if (jj_2_15(2)) {
                    result = CreateViewStatement();
                  } else if (jj_2_16(2)) {
                    result = CreatePropertyStatement();
                  } else if (jj_2_17(2)) {
                    result = CreateIndexStatement();
                  } else if (jj_2_18(2)) {
                    result = CreateClusterStatement();
                  } else if (jj_2_19(2)) {
                    result = CreateLinkStatement();
                  } else if (jj_2_20(2)) {
                    result = CreateFunctionStatement();
                  } else if (jj_2_21(2)) {
                    result = CreateUserStatement();
                  } else if (jj_2_22(2)) {
                    result = DropUserStatement();
                  } else if (jj_2_23(2)) {
                    result = AlterRoleStatement();
                  } else if (jj_2_24(2)) {
                    result = CreateSecurityPolicyStatement();
                  } else if (jj_2_25(2)) {
                    result = AlterSecurityPolicyStatement();
                  } else if (jj_2_26(2)) {
                    result = CreateSequenceStatement();
                  } else if (jj_2_27(2147483647)) {
                    result = CreateVertexStatementNoTarget();
                  } else if (jj_2_28(2147483647)) {
                    result = CreateVertexStatement();
                  } else if (jj_2_29(2147483647)) {
                    result = CreateVertexStatementEmptyNoTarget();
                  } else if (jj_2_30(2)) {
                    result = CreateEdgeStatement();
                  } else if (jj_2_31(2)) {
                    result = UpdateEdgeStatement();
                  } else if (jj_2_32(2147483647)) {
                    result = UpdateStatement();
                  } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case MOVE:
                        {
                          result = MoveVertexStatement();
                          break;
                        }
                      default:
                        jj_la1[13] = jj_gen;
                        if (jj_2_33(2)) {
                          result = ProfileStorageStatement();
                        } else if (jj_2_34(2)) {
                          result = TruncateClassStatement();
                        } else if (jj_2_35(2)) {
                          result = TruncateClusterStatement();
                        } else if (jj_2_36(2)) {
                          result = TruncateRecordStatement();
                        } else if (jj_2_37(2)) {
                          result = AlterSequenceStatement();
                        } else if (jj_2_38(2)) {
                          result = AlterClassStatement();
                        } else if (jj_2_39(2)) {
                          result = DropSequenceStatement();
                        } else if (jj_2_40(2)) {
                          result = DropClassStatement();
                        } else if (jj_2_41(2)) {
                          result = DropViewStatement();
                        } else if (jj_2_42(2)) {
                          result = AlterPropertyStatement();
                        } else if (jj_2_43(2)) {
                          result = DropPropertyStatement();
                        } else {
                          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case REBUILD:
                              {
                                result = RebuildIndexStatement();
                                break;
                              }
                            default:
                              jj_la1[14] = jj_gen;
                              if (jj_2_44(2)) {
                                result = DropIndexStatement();
                              } else if (jj_2_45(2)) {
                                result = AlterClusterStatement();
                              } else if (jj_2_46(2)) {
                                result = DropClusterStatement();
                              } else if (jj_2_47(2)) {
                                result = AlterDatabaseStatement();
                              } else {
                                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                                  case OPTIMIZE:
                                    {
                                      result = OptimizeDatabaseStatement();
                                      break;
                                    }
                                  case GRANT:
                                    {
                                      result = GrantStatement();
                                      break;
                                    }
                                  case REVOKE:
                                    {
                                      result = RevokeStatement();
                                      break;
                                    }
                                  case BEGIN:
                                    {
                                      result = BeginStatement();
                                      break;
                                    }
                                  case COMMIT:
                                    {
                                      result = CommitStatement();
                                      break;
                                    }
                                  case ROLLBACK:
                                    {
                                      result = RollbackStatement();
                                      break;
                                    }
                                  case RETURN:
                                    {
                                      result = ReturnStatement();
                                      break;
                                    }
                                  case SLEEP:
                                    {
                                      result = SleepStatement();
                                      break;
                                    }
                                  case CONSOLE:
                                    {
                                      result = ConsoleStatement();
                                      break;
                                    }
                                  case IF:
                                    {
                                      result = IfStatement();
                                      break;
                                    }
                                  default:
                                    jj_la1[15] = jj_gen;
                                    if (jj_2_48(3)) {
                                      result = HaRemoveServerStatement();
                                    } else if (jj_2_49(2)) {
                                      result = HaStatusStatement();
                                    } else if (jj_2_50(3)) {
                                      result = HaSyncDatabaseStatement();
                                    } else if (jj_2_51(3)) {
                                      result = HaSyncClusterStatement();
                                    } else if (jj_2_52(2)) {
                                      result = HaSetStatement();
                                    } else {
                                      jj_consume_token(-1);
                                      throw new ParseException();
                                    }
                                }
                              }
                          }
                        }
                    }
                  }
              }
            }
        }
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case EXPLAIN:
            {
              result = ExplainStatement();
              break;
            }
          default:
            jj_la1[16] = jj_gen;
            if (jj_2_54(2147483647)) {
              result = ProfileStatement();
            } else {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LET:
                  {
                    result = LetStatement();
                    break;
                  }
                default:
                  jj_la1[17] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
            }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OStatement ExpressionStatement() throws ParseException {
    /*@bgen(jjtree) ExpressionStatement */
    OExpressionStatement jjtn000 = new OExpressionStatement(JJTEXPRESSIONSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.expression = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OStatement QueryStatement() throws ParseException {
    /*@bgen(jjtree) QueryStatement */
    OQueryStatement jjtn000 = new OQueryStatement(JJTQUERYSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement result;
    try {
      if (jj_2_55(2147483647)) {
        result = SelectStatement();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SELECT:
            {
              result = SelectWithoutTargetStatement();
              break;
            }
          case TRAVERSE:
            {
              result = TraverseStatement();
              break;
            }
          case MATCH:
            {
              result = MatchStatement();
              break;
            }
          default:
            jj_la1[18] = jj_gen;
            if (jj_2_56(2147483647)) {
              result = FindReferencesStatement();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OSelectWithoutTargetStatement SelectWithoutTargetStatement() throws ParseException {
    /*@bgen(jjtree) SelectWithoutTargetStatement */
    OSelectWithoutTargetStatement jjtn000 =
        new OSelectWithoutTargetStatement(JJTSELECTWITHOUTTARGETSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SELECT);
      jjtn000.projection = Projection();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LET:
          {
            jjtn000.letClause = LetClause();
            break;
          }
        default:
          jj_la1[19] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNWIND:
          {
            jjtn000.unwind = Unwind();
            break;
          }
        default:
          jj_la1[20] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
        case SKIP2:
        case OFFSET:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case SKIP2:
              case OFFSET:
                {
                  jjtn000.skip = Skip();
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LIMIT:
                      {
                        jjtn000.limit = Limit();
                        break;
                      }
                    default:
                      jj_la1[21] = jj_gen;
                      ;
                  }
                  break;
                }
              case LIMIT:
                {
                  jjtn000.limit = Limit();
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SKIP2:
                    case OFFSET:
                      {
                        jjtn000.skip = Skip();
                        break;
                      }
                    default:
                      jj_la1[22] = jj_gen;
                      ;
                  }
                  break;
                }
              default:
                jj_la1[23] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[24] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case FETCHPLAN:
          {
            jjtn000.fetchPlan = FetchPlan();
            break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TIMEOUT:
          {
            jjtn000.timeout = Timeout();
            break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LOCK:
          {
            jj_consume_token(LOCK);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case RECORD:
                {
                  jj_consume_token(RECORD);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY
                          .EXCLUSIVE_LOCK;
                  break;
                }
              case NONE:
                {
                  jj_consume_token(NONE);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;
                  break;
                }
              case SHARED:
                {
                  jj_consume_token(SHARED);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY
                          .SHARED_LOCK;
                  break;
                }
              case DEFAULT_:
                {
                  jj_consume_token(DEFAULT_);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;
                  break;
                }
              default:
                jj_la1[27] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PARALLEL:
          {
            jj_consume_token(PARALLEL);
            jjtn000.parallel = true;
            break;
          }
        default:
          jj_la1[29] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NOCACHE:
          {
            jj_consume_token(NOCACHE);
            jjtn000.noCache = true;
            break;
          }
        default:
          jj_la1[30] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.validate();
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OSelectStatement SelectStatement() throws ParseException {
    /*@bgen(jjtree) SelectStatement */
    OSelectStatement jjtn000 = new OSelectStatement(JJTSELECTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SELECT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case RID_STRING:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case BANG:
        case HOOK:
        case COLON:
        case MINUS:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 272:
          {
            jjtn000.projection = Projection();
            break;
          }
        default:
          jj_la1[31] = jj_gen;
          ;
      }
      jj_consume_token(FROM);
      jjtn000.target = FromClause();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LET:
          {
            jjtn000.letClause = LetClause();
            break;
          }
        default:
          jj_la1[32] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[33] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case GROUP:
          {
            jjtn000.groupBy = GroupBy();
            break;
          }
        default:
          jj_la1[34] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ORDER:
          {
            jjtn000.orderBy = OrderBy();
            break;
          }
        default:
          jj_la1[35] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNWIND:
          {
            jjtn000.unwind = Unwind();
            break;
          }
        default:
          jj_la1[36] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
        case SKIP2:
        case OFFSET:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case SKIP2:
              case OFFSET:
                {
                  jjtn000.skip = Skip();
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LIMIT:
                      {
                        jjtn000.limit = Limit();
                        break;
                      }
                    default:
                      jj_la1[37] = jj_gen;
                      ;
                  }
                  break;
                }
              case LIMIT:
                {
                  jjtn000.limit = Limit();
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SKIP2:
                    case OFFSET:
                      {
                        jjtn000.skip = Skip();
                        break;
                      }
                    default:
                      jj_la1[38] = jj_gen;
                      ;
                  }
                  break;
                }
              default:
                jj_la1[39] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[40] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case FETCHPLAN:
          {
            jjtn000.fetchPlan = FetchPlan();
            break;
          }
        default:
          jj_la1[41] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TIMEOUT:
          {
            jjtn000.timeout = Timeout();
            break;
          }
        default:
          jj_la1[42] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LOCK:
          {
            jj_consume_token(LOCK);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case RECORD:
                {
                  jj_consume_token(RECORD);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY
                          .EXCLUSIVE_LOCK;
                  break;
                }
              case NONE:
                {
                  jj_consume_token(NONE);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;
                  break;
                }
              case SHARED:
                {
                  jj_consume_token(SHARED);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY
                          .SHARED_LOCK;
                  break;
                }
              case DEFAULT_:
                {
                  jj_consume_token(DEFAULT_);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;
                  break;
                }
              default:
                jj_la1[43] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[44] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PARALLEL:
          {
            jj_consume_token(PARALLEL);
            jjtn000.parallel = true;
            break;
          }
        default:
          jj_la1[45] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NOCACHE:
          {
            jj_consume_token(NOCACHE);
            jjtn000.noCache = true;
            break;
          }
        default:
          jj_la1[46] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.validate();
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OTraverseStatement TraverseStatement() throws ParseException {
    /*@bgen(jjtree) TraverseStatement */
    OTraverseStatement jjtn000 = new OTraverseStatement(JJTTRAVERSESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OTraverseProjectionItem lastProjection;
    try {
      jj_consume_token(TRAVERSE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case LBRACKET:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            lastProjection = TraverseProjectionItem();
            jjtn000.addProjection(lastProjection);
            label_2:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[47] = jj_gen;
                  break label_2;
              }
              jj_consume_token(COMMA);
              lastProjection = TraverseProjectionItem();
              jjtn000.addProjection(lastProjection);
            }
            break;
          }
        default:
          jj_la1[48] = jj_gen;
          ;
      }
      jj_consume_token(FROM);
      jjtn000.target = FromClause();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MAXDEPTH:
          {
            jj_consume_token(MAXDEPTH);
            jjtn000.maxDepth = Integer();
            break;
          }
        default:
          jj_la1[49] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHILE:
          {
            jj_consume_token(WHILE);
            jjtn000.whileClause = WhereClause();
            break;
          }
        default:
          jj_la1[50] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[51] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STRATEGY:
          {
            jj_consume_token(STRATEGY);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case DEPTH_FIRST:
                {
                  jj_consume_token(DEPTH_FIRST);
                  jjtn000.strategy = OTraverseStatement.Strategy.DEPTH_FIRST;
                  break;
                }
              case BREADTH_FIRST:
                {
                  jj_consume_token(BREADTH_FIRST);
                  jjtn000.strategy = OTraverseStatement.Strategy.BREADTH_FIRST;
                  break;
                }
              default:
                jj_la1[52] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[53] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchStatement MatchStatement() throws ParseException {
    /*@bgen(jjtree) MatchStatement */
    OMatchStatement jjtn000 = new OMatchStatement(JJTMATCHSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OMatchExpression lastMatchExpr = null;
    OExpression lastReturn = null;
    OIdentifier lastReturnAlias = null;
    ONestedProjection lastNestedProjection = null;
    try {
      jj_consume_token(MATCH);
      lastMatchExpr = MatchExpression();
      jjtn000.addMatchExpression(lastMatchExpr);
      label_3:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[54] = jj_gen;
            break label_3;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case LBRACE:
            {
              lastMatchExpr = MatchExpression();
              jjtn000.addMatchExpression(lastMatchExpr);
              break;
            }
          case NOT:
            {
              jj_consume_token(NOT);
              lastMatchExpr = MatchExpression();
              jjtn000.addNotMatchExpression(lastMatchExpr);
              break;
            }
          default:
            jj_la1[55] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jj_consume_token(RETURN);
      if (jj_2_57(2)) {
        jj_consume_token(DISTINCT);
        jjtn000.returnDistinct = true;
        lastReturn = Expression();
        lastReturnAlias = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COLON:
            {
              lastNestedProjection = NestedProjection();
              break;
            }
          default:
            jj_la1[56] = jj_gen;
            ;
        }
      } else if (jj_2_58(2147483647)) {
        lastReturn = Expression();
        lastReturnAlias = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COLON:
            {
              lastNestedProjection = NestedProjection();
              break;
            }
          default:
            jj_la1[57] = jj_gen;
            ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case AS:
          {
            jj_consume_token(AS);
            lastReturnAlias = Identifier();
            break;
          }
        default:
          jj_la1[58] = jj_gen;
          ;
      }
      jjtn000.addReturnAlias(lastReturnAlias);
      jjtn000.addReturnItem(lastReturn);
      jjtn000.addReturnNestedProjection(lastNestedProjection);
      lastNestedProjection = null;
      label_4:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[59] = jj_gen;
            break label_4;
        }
        jj_consume_token(COMMA);
        lastReturn = Expression();
        lastReturnAlias = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COLON:
            {
              lastNestedProjection = NestedProjection();
              break;
            }
          default:
            jj_la1[60] = jj_gen;
            ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case AS:
            {
              jj_consume_token(AS);
              lastReturnAlias = Identifier();
              break;
            }
          default:
            jj_la1[61] = jj_gen;
            ;
        }
        jjtn000.addReturnAlias(lastReturnAlias);
        jjtn000.addReturnItem(lastReturn);
        jjtn000.addReturnNestedProjection(lastNestedProjection);
        lastNestedProjection = null;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case GROUP:
          {
            jjtn000.groupBy = GroupBy();
            break;
          }
        default:
          jj_la1[62] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ORDER:
          {
            jjtn000.orderBy = OrderBy();
            break;
          }
        default:
          jj_la1[63] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNWIND:
          {
            jjtn000.unwind = Unwind();
            break;
          }
        default:
          jj_la1[64] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case SKIP2:
        case OFFSET:
          {
            jjtn000.skip = Skip();
            break;
          }
        default:
          jj_la1[65] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[66] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODeleteStatement DeleteStatement() throws ParseException {
    /*@bgen(jjtree) DeleteStatement */
    ODeleteStatement jjtn000 = new ODeleteStatement(JJTDELETESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DELETE);
      jj_consume_token(FROM);
      jjtn000.fromClause = FromClause();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETURN:
          {
            jj_consume_token(RETURN);
            jj_consume_token(BEFORE);
            jjtn000.returnBefore = true;
            break;
          }
        default:
          jj_la1[67] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[68] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[69] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNSAFE:
          {
            jj_consume_token(UNSAFE);
            jjtn000.unsafe = true;
            break;
          }
        default:
          jj_la1[70] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODeleteVertexStatement DeleteVertexStatement() throws ParseException {
    /*@bgen(jjtree) DeleteVertexStatement */
    ODeleteVertexStatement jjtn000 = new ODeleteVertexStatement(JJTDELETEVERTEXSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DELETE);
      jj_consume_token(VERTEX);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case FROM:
          {
            jj_consume_token(FROM);
            jjtn000.from = true;
            break;
          }
        default:
          jj_la1[71] = jj_gen;
          ;
      }
      jjtn000.fromClause = FromClause();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETURN:
          {
            jj_consume_token(RETURN);
            jj_consume_token(BEFORE);
            jjtn000.returnBefore = true;
            break;
          }
        default:
          jj_la1[72] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[73] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[74] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BATCH:
          {
            jjtn000.batch = Batch();
            break;
          }
        default:
          jj_la1[75] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODeleteEdgeStatement DeleteEdgeStatement() throws ParseException {
    /*@bgen(jjtree) DeleteEdgeStatement */
    ODeleteEdgeStatement jjtn000 = new ODeleteEdgeStatement(JJTDELETEEDGESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ODeleteEdgeStatement result;
    try {
      if (jj_2_59(2147483647)) {
        result = DeleteEdgeByRidStatement();
      } else if (jj_2_60(2147483647)) {
        result = DeleteEdgeFromToStatement();
      } else if (jj_2_61(2147483647)) {
        result = DeleteEdgeVToStatement();
      } else if (jj_2_62(2147483647)) {
        result = DeleteEdgeToStatement();
      } else if (jj_2_63(2147483647)) {
        result = DeleteEdgeWhereStatement();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODeleteEdgeStatement DeleteEdgeByRidStatement() throws ParseException {
    /*@bgen(jjtree) DeleteEdgeByRidStatement */
    ODeleteEdgeByRidStatement jjtn000 = new ODeleteEdgeByRidStatement(JJTDELETEEDGEBYRIDSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ORid lastRid;
    try {
      jj_consume_token(DELETE);
      jj_consume_token(EDGE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER_LITERAL:
        case LBRACE:
        case MINUS:
        case 272:
          {
            jjtn000.rid = Rid();
            break;
          }
        case LBRACKET:
          {
            jj_consume_token(LBRACKET);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case INTEGER_LITERAL:
              case LBRACE:
              case MINUS:
              case 272:
                {
                  lastRid = Rid();
                  jjtn000.addRid(lastRid);
                  label_5:
                  while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case COMMA:
                        {
                          ;
                          break;
                        }
                      default:
                        jj_la1[76] = jj_gen;
                        break label_5;
                    }
                    jj_consume_token(COMMA);
                    lastRid = Rid();
                    jjtn000.addRid(lastRid);
                  }
                  break;
                }
              default:
                jj_la1[77] = jj_gen;
                ;
            }
            jj_consume_token(RBRACKET);
            break;
          }
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BATCH:
          {
            jjtn000.batch = Batch();
            break;
          }
        default:
          jj_la1[79] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODeleteEdgeStatement DeleteEdgeFromToStatement() throws ParseException {
    /*@bgen(jjtree) DeleteEdgeFromToStatement */
    ODeleteEdgeFromToStatement jjtn000 =
        new ODeleteEdgeFromToStatement(JJTDELETEEDGEFROMTOSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ORid lastRid;
    try {
      jj_consume_token(DELETE);
      jj_consume_token(EDGE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.className = Identifier();
            break;
          }
        default:
          jj_la1[80] = jj_gen;
          ;
      }
      jj_consume_token(FROM);
      jjtn000.leftExpression = Expression();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
          {
            jj_consume_token(TO);
            jjtn000.rightExpression = Expression();
            break;
          }
        default:
          jj_la1[81] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[82] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[83] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BATCH:
          {
            jjtn000.batch = Batch();
            break;
          }
        default:
          jj_la1[84] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODeleteEdgeStatement DeleteEdgeToStatement() throws ParseException {
    /*@bgen(jjtree) DeleteEdgeToStatement */
    ODeleteEdgeToStatement jjtn000 = new ODeleteEdgeToStatement(JJTDELETEEDGETOSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ORid lastRid;
    try {
      jj_consume_token(DELETE);
      jj_consume_token(EDGE);
      jjtn000.className = Identifier();
      jj_consume_token(TO);
      jjtn000.rightExpression = Expression();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[85] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[86] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BATCH:
          {
            jjtn000.batch = Batch();
            break;
          }
        default:
          jj_la1[87] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODeleteEdgeStatement DeleteEdgeVToStatement() throws ParseException {
    /*@bgen(jjtree) DeleteEdgeVToStatement */
    ODeleteEdgeVToStatement jjtn000 = new ODeleteEdgeVToStatement(JJTDELETEEDGEVTOSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ORid lastRid;
    try {
      jj_consume_token(DELETE);
      jj_consume_token(EDGE);
      jj_consume_token(TO);
      jjtn000.rightExpression = Expression();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[88] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[89] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BATCH:
          {
            jjtn000.batch = Batch();
            break;
          }
        default:
          jj_la1[90] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODeleteEdgeStatement DeleteEdgeWhereStatement() throws ParseException {
    /*@bgen(jjtree) DeleteEdgeWhereStatement */
    ODeleteEdgeWhereStatement jjtn000 = new ODeleteEdgeWhereStatement(JJTDELETEEDGEWHERESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ORid lastRid;
    try {
      jj_consume_token(DELETE);
      jj_consume_token(EDGE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.className = Identifier();
            break;
          }
        default:
          jj_la1[91] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[92] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[93] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BATCH:
          {
            jjtn000.batch = Batch();
            break;
          }
        default:
          jj_la1[94] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OUpdateEdgeStatement UpdateEdgeStatement() throws ParseException {
    /*@bgen(jjtree) UpdateEdgeStatement */
    OUpdateEdgeStatement jjtn000 = new OUpdateEdgeStatement(JJTUPDATEEDGESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OUpdateOperations lastOperations;
    ORid lastRid;
    try {
      jj_consume_token(UPDATE);
      jj_consume_token(EDGE);
      jjtn000.target = FromClause();
      label_6:
      while (true) {
        lastOperations = UpdateOperations();
        jjtn000.addOperations(lastOperations);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case INCREMENT:
            {
              ;
              break;
            }
          default:
            jj_la1[95] = jj_gen;
            break label_6;
        }
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UPSERT:
          {
            jj_consume_token(UPSERT);
            jjtn000.upsert = true;
            break;
          }
        default:
          jj_la1[96] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETURN:
          {
            jj_consume_token(RETURN);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case BEFORE:
                {
                  jj_consume_token(BEFORE);
                  jjtn000.returnBefore = true;
                  break;
                }
              case AFTER:
                {
                  jj_consume_token(AFTER);
                  jjtn000.returnAfter = true;
                  break;
                }
              default:
                jj_la1[97] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case NULL:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case DISTINCT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case THIS:
              case RECORD_ATTRIBUTE:
              case RID_STRING:
              case TRUE:
              case FALSE:
              case INTEGER_LITERAL:
              case FLOATING_POINT_LITERAL:
              case CHARACTER_LITERAL:
              case STRING_LITERAL:
              case LPAREN:
              case LBRACE:
              case LBRACKET:
              case BANG:
              case HOOK:
              case COLON:
              case MINUS:
              case STAR:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
              case 272:
                {
                  jjtn000.returnProjection = Projection();
                  break;
                }
              default:
                jj_la1[98] = jj_gen;
                ;
            }
            break;
          }
        default:
          jj_la1[99] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[100] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LOCK:
          {
            jj_consume_token(LOCK);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case RECORD:
                {
                  jj_consume_token(RECORD);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY
                          .EXCLUSIVE_LOCK;
                  break;
                }
              case NONE:
                {
                  jj_consume_token(NONE);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;
                  break;
                }
              case SHARED:
                {
                  jj_consume_token(SHARED);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY
                          .SHARED_LOCK;
                  break;
                }
              case DEFAULT_:
                {
                  jj_consume_token(DEFAULT_);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;
                  break;
                }
              default:
                jj_la1[101] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[102] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[103] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TIMEOUT:
          {
            jjtn000.timeout = Timeout();
            break;
          }
        default:
          jj_la1[104] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OUpdateStatement UpdateStatement() throws ParseException {
    /*@bgen(jjtree) UpdateStatement */
    OUpdateStatement jjtn000 = new OUpdateStatement(JJTUPDATESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OUpdateOperations lastOperations;
    ORid lastRid;
    try {
      jj_consume_token(UPDATE);
      jjtn000.target = FromClause();
      label_7:
      while (true) {
        lastOperations = UpdateOperations();
        jjtn000.addOperations(lastOperations);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case INCREMENT:
            {
              ;
              break;
            }
          default:
            jj_la1[105] = jj_gen;
            break label_7;
        }
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UPSERT:
          {
            jj_consume_token(UPSERT);
            jjtn000.upsert = true;
            break;
          }
        default:
          jj_la1[106] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETURN:
          {
            jj_consume_token(RETURN);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case BEFORE:
                {
                  jj_consume_token(BEFORE);
                  jjtn000.returnBefore = true;
                  break;
                }
              case AFTER:
                {
                  jj_consume_token(AFTER);
                  jjtn000.returnAfter = true;
                  break;
                }
              case COUNT:
                {
                  jj_consume_token(COUNT);
                  jjtn000.returnCount = true;
                  break;
                }
              default:
                jj_la1[107] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case NULL:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case DISTINCT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case THIS:
              case RECORD_ATTRIBUTE:
              case RID_STRING:
              case TRUE:
              case FALSE:
              case INTEGER_LITERAL:
              case FLOATING_POINT_LITERAL:
              case CHARACTER_LITERAL:
              case STRING_LITERAL:
              case LPAREN:
              case LBRACE:
              case LBRACKET:
              case BANG:
              case HOOK:
              case COLON:
              case MINUS:
              case STAR:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
              case 272:
                {
                  jjtn000.returnProjection = Projection();
                  break;
                }
              default:
                jj_la1[108] = jj_gen;
                ;
            }
            break;
          }
        default:
          jj_la1[109] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
          {
            jj_consume_token(WHERE);
            jjtn000.whereClause = WhereClause();
            break;
          }
        default:
          jj_la1[110] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LOCK:
          {
            jj_consume_token(LOCK);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case RECORD:
                {
                  jj_consume_token(RECORD);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY
                          .EXCLUSIVE_LOCK;
                  break;
                }
              case NONE:
                {
                  jj_consume_token(NONE);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;
                  break;
                }
              case SHARED:
                {
                  jj_consume_token(SHARED);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY
                          .SHARED_LOCK;
                  break;
                }
              case DEFAULT_:
                {
                  jj_consume_token(DEFAULT_);
                  jjtn000.lockRecord =
                      com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;
                  break;
                }
              default:
                jj_la1[111] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[112] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LIMIT:
          {
            jjtn000.limit = Limit();
            break;
          }
        default:
          jj_la1[113] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TIMEOUT:
          {
            jjtn000.timeout = Timeout();
            break;
          }
        default:
          jj_la1[114] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OUpdateOperations UpdateOperations() throws ParseException {
    /*@bgen(jjtree) UpdateOperations */
    OUpdateOperations jjtn000 = new OUpdateOperations(JJTUPDATEOPERATIONS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OUpdateItem lastItem;
    OUpdatePutItem lastPutItem;
    OUpdateIncrementItem lastIncrementItem;
    OUpdateRemoveItem lastRemoveItem;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case SET:
          {
            jj_consume_token(SET);
            jjtn000.type = OUpdateOperations.TYPE_SET;
            lastItem = UpdateItem();
            jjtn000.addUpdateItem(lastItem);
            label_8:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[115] = jj_gen;
                  break label_8;
              }
              jj_consume_token(COMMA);
              lastItem = UpdateItem();
              jjtn000.addUpdateItem(lastItem);
            }
            break;
          }
        case PUT:
          {
            jj_consume_token(PUT);
            jjtn000.type = OUpdateOperations.TYPE_PUT;
            lastPutItem = UpdatePutItem();
            jjtn000.addUpdatePutItem(lastPutItem);
            label_9:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[116] = jj_gen;
                  break label_9;
              }
              jj_consume_token(COMMA);
              lastPutItem = UpdatePutItem();
              jjtn000.addUpdatePutItem(lastPutItem);
            }
            break;
          }
        case MERGE:
        case CONTENT:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case MERGE:
                {
                  jj_consume_token(MERGE);
                  jjtn000.type = OUpdateOperations.TYPE_MERGE;
                  break;
                }
              case CONTENT:
                {
                  jj_consume_token(CONTENT);
                  jjtn000.type = OUpdateOperations.TYPE_CONTENT;
                  break;
                }
              default:
                jj_la1[117] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtn000.json = Json();
            break;
          }
        case ADD:
        case INCREMENT:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case INCREMENT:
                {
                  jj_consume_token(INCREMENT);
                  jjtn000.type = OUpdateOperations.TYPE_INCREMENT;
                  break;
                }
              case ADD:
                {
                  jj_consume_token(ADD);
                  jjtn000.type = OUpdateOperations.TYPE_ADD;
                  break;
                }
              default:
                jj_la1[118] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            lastIncrementItem = UpdateIncrementItem();
            jjtn000.addUpdateIncrementItem(lastIncrementItem);
            label_10:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[119] = jj_gen;
                  break label_10;
              }
              jj_consume_token(COMMA);
              lastIncrementItem = UpdateIncrementItem();
              jjtn000.addUpdateIncrementItem(lastIncrementItem);
            }
            break;
          }
        case REMOVE:
          {
            jj_consume_token(REMOVE);
            jjtn000.type = OUpdateOperations.TYPE_REMOVE;
            lastRemoveItem = UpdateRemoveItem();
            jjtn000.addUpdateRemoveItem(lastRemoveItem);
            label_11:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[120] = jj_gen;
                  break label_11;
              }
              jj_consume_token(COMMA);
              lastRemoveItem = UpdateRemoveItem();
              jjtn000.addUpdateRemoveItem(lastRemoveItem);
            }
            break;
          }
        default:
          jj_la1[121] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OUpdateItem UpdateItem() throws ParseException {
    /*@bgen(jjtree) UpdateItem */
    OUpdateItem jjtn000 = new OUpdateItem(JJTUPDATEITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACKET:
        case DOT:
          {
            jjtn000.leftModifier = Modifier();
            break;
          }
        default:
          jj_la1[122] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case EQ:
          {
            jj_consume_token(EQ);
            jjtn000.operator = OUpdateItem.OPERATOR_EQ;
            break;
          }
        case PLUSASSIGN:
          {
            jj_consume_token(PLUSASSIGN);
            jjtn000.operator = OUpdateItem.OPERATOR_PLUSASSIGN;
            break;
          }
        case MINUSASSIGN:
          {
            jj_consume_token(MINUSASSIGN);
            jjtn000.operator = OUpdateItem.OPERATOR_MINUSASSIGN;
            break;
          }
        case STARASSIGN:
          {
            jj_consume_token(STARASSIGN);
            jjtn000.operator = OUpdateItem.OPERATOR_STARASSIGN;
            break;
          }
        case SLASHASSIGN:
          {
            jj_consume_token(SLASHASSIGN);
            jjtn000.operator = OUpdateItem.OPERATOR_SLASHASSIGN;
            break;
          }
        default:
          jj_la1[123] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtn000.right = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OUpdateIncrementItem UpdateIncrementItem() throws ParseException {
    /*@bgen(jjtree) UpdateIncrementItem */
    OUpdateIncrementItem jjtn000 = new OUpdateIncrementItem(JJTUPDATEINCREMENTITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACKET:
        case DOT:
          {
            jjtn000.leftModifier = Modifier();
            break;
          }
        default:
          jj_la1[124] = jj_gen;
          ;
      }
      jj_consume_token(EQ);
      jjtn000.right = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OUpdateRemoveItem UpdateRemoveItem() throws ParseException {
    /*@bgen(jjtree) UpdateRemoveItem */
    OUpdateRemoveItem jjtn000 = new OUpdateRemoveItem(JJTUPDATEREMOVEITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Expression();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case EQ:
          {
            jj_consume_token(EQ);
            jjtn000.right = Expression();
            break;
          }
        default:
          jj_la1[125] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OUpdatePutItem UpdatePutItem() throws ParseException {
    /*@bgen(jjtree) UpdatePutItem */
    OUpdatePutItem jjtn000 = new OUpdatePutItem(JJTUPDATEPUTITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Identifier();
      jj_consume_token(EQ);
      jjtn000.key = Expression();
      jj_consume_token(COMMA);
      jjtn000.value = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OInsertStatement InsertStatement() throws ParseException {
    /*@bgen(jjtree) InsertStatement */
    OInsertStatement jjtn000 = new OInsertStatement(JJTINSERTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INSERT);
      jj_consume_token(INTO);
      if (jj_2_64(2147483647)) {
        jjtn000.targetIndex = IndexIdentifier();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              jjtn000.targetClass = Identifier();
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case CLUSTER:
                  {
                    jj_consume_token(CLUSTER);
                    jjtn000.targetClusterName = Identifier();
                    break;
                  }
                default:
                  jj_la1[126] = jj_gen;
                  ;
              }
              break;
            }
          case CLUSTER_IDENTIFIER:
          case CLUSTER_NUMBER_IDENTIFIER:
            {
              jjtn000.targetCluster = Cluster();
              break;
            }
          default:
            jj_la1[127] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      if (jj_2_65(2147483647)) {
        jjtn000.insertBody = InsertBody();
      } else {
        ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETURN:
          {
            jj_consume_token(RETURN);
            jjtn000.returnStatement = Projection();
            break;
          }
        default:
          jj_la1[128] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case SELECT:
        case FROM:
        case LPAREN:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case FROM:
                {
                  jj_consume_token(FROM);
                  jjtn000.selectWithFrom = true;
                  break;
                }
              default:
                jj_la1[129] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case SELECT:
                {
                  if (jj_2_66(2147483647)) {
                    jjtn000.selectStatement = SelectStatement();
                  } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case SELECT:
                        {
                          jjtn000.selectStatement = SelectWithoutTargetStatement();
                          break;
                        }
                      default:
                        jj_la1[130] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                  }
                  break;
                }
              default:
                jj_la1[132] = jj_gen;
                if (jj_2_68(2)) {
                  jj_consume_token(LPAREN);
                  if (jj_2_67(2147483647)) {
                    jjtn000.selectStatement = SelectStatement();
                  } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case SELECT:
                        {
                          jjtn000.selectStatement = SelectWithoutTargetStatement();
                          break;
                        }
                      default:
                        jj_la1[131] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                  }
                  jjtn000.selectInParentheses = true;
                  jj_consume_token(RPAREN);
                } else {
                  jj_consume_token(-1);
                  throw new ParseException();
                }
            }
            break;
          }
        default:
          jj_la1[133] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNSAFE:
          {
            jj_consume_token(UNSAFE);
            jjtn000.unsafe = true;
            break;
          }
        default:
          jj_la1[134] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OInsertBody InsertBody() throws ParseException {
    /*@bgen(jjtree) InsertBody */
    OInsertBody jjtn000 = new OInsertBody(JJTINSERTBODY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    OExpression lastExpression;
    List<OExpression> lastExpressionList;
    OJson content;
    OInputParameter inputParamater;
    try {
      if (jj_2_69(3)) {
        jj_consume_token(LPAREN);
        lastIdentifier = Identifier();
        jjtn000.addIdentifier(lastIdentifier);
        label_12:
        while (true) {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COMMA:
              {
                ;
                break;
              }
            default:
              jj_la1[135] = jj_gen;
              break label_12;
          }
          jj_consume_token(COMMA);
          lastIdentifier = Identifier();
          jjtn000.addIdentifier(lastIdentifier);
        }
        jj_consume_token(RPAREN);
        jj_consume_token(VALUES);
        jj_consume_token(LPAREN);
        lastExpressionList = new ArrayList<OExpression>();
        jjtn000.addValueExpression(lastExpressionList);
        lastExpression = Expression();
        lastExpressionList.add(lastExpression);
        label_13:
        while (true) {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COMMA:
              {
                ;
                break;
              }
            default:
              jj_la1[136] = jj_gen;
              break label_13;
          }
          jj_consume_token(COMMA);
          lastExpression = Expression();
          lastExpressionList.add(lastExpression);
        }
        jj_consume_token(RPAREN);
        label_14:
        while (true) {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COMMA:
              {
                ;
                break;
              }
            default:
              jj_la1[137] = jj_gen;
              break label_14;
          }
          jj_consume_token(COMMA);
          jj_consume_token(LPAREN);
          lastExpressionList = new ArrayList<OExpression>();
          jjtn000.addValueExpression(lastExpressionList);
          lastExpression = Expression();
          lastExpressionList.add(lastExpression);
          label_15:
          while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case COMMA:
                {
                  ;
                  break;
                }
              default:
                jj_la1[138] = jj_gen;
                break label_15;
            }
            jj_consume_token(COMMA);
            lastExpression = Expression();
            lastExpressionList.add(lastExpression);
          }
          jj_consume_token(RPAREN);
        }
      } else if (jj_2_70(3)) {
        jj_consume_token(SET);
        OInsertSetExpression lastSetExpr = new OInsertSetExpression();
        jjtn000.addInsertSetExpression(lastSetExpr);
        lastSetExpr.left = Identifier();
        jj_consume_token(EQ);
        lastSetExpr.right = Expression();
        label_16:
        while (true) {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COMMA:
              {
                ;
                break;
              }
            default:
              jj_la1[139] = jj_gen;
              break label_16;
          }
          jj_consume_token(COMMA);
          lastSetExpr = new OInsertSetExpression();
          jjtn000.addInsertSetExpression(lastSetExpr);
          lastSetExpr.left = Identifier();
          jj_consume_token(EQ);
          lastSetExpr.right = Expression();
        }
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case CONTENT:
            {
              jj_consume_token(CONTENT);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE:
                  {
                    content = Json();
                    jjtn000.addContent(content);
                    break;
                  }
                case HOOK:
                case COLON:
                  {
                    inputParamater = InputParameter();
                    jjtn000.addContentInputParam(inputParamater);
                    break;
                  }
                default:
                  jj_la1[140] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              label_17:
              while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case COMMA:
                    {
                      ;
                      break;
                    }
                  default:
                    jj_la1[141] = jj_gen;
                    break label_17;
                }
                jj_consume_token(COMMA);
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case LBRACE:
                    {
                      content = Json();
                      jjtn000.addContent(content);
                      break;
                    }
                  case HOOK:
                  case COLON:
                    {
                      inputParamater = InputParameter();
                      jjtn000.addContentInputParam(inputParamater);
                      break;
                    }
                  default:
                    jj_la1[142] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
              }
              break;
            }
          default:
            jj_la1[143] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateVertexStatementEmptyNoTarget CreateVertexStatementEmptyNoTarget()
      throws ParseException {
    /*@bgen(jjtree) CreateVertexStatementEmptyNoTarget */
    OCreateVertexStatementEmptyNoTarget jjtn000 =
        new OCreateVertexStatementEmptyNoTarget(JJTCREATEVERTEXSTATEMENTEMPTYNOTARGET);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(VERTEX);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateVertexStatement CreateVertexStatement() throws ParseException {
    /*@bgen(jjtree) CreateVertexStatement */
    OCreateVertexStatement jjtn000 = new OCreateVertexStatement(JJTCREATEVERTEXSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(VERTEX);
      if (jj_2_71(2147483647)) {
        jjtn000.targetClass = Identifier();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case CLUSTER:
            {
              jj_consume_token(CLUSTER);
              jjtn000.targetClusterName = Identifier();
              break;
            }
          default:
            jj_la1[144] = jj_gen;
            ;
        }
      } else if (jj_2_72(2147483647)) {
        jjtn000.targetCluster = Cluster();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETURN:
          {
            jj_consume_token(RETURN);
            jjtn000.returnStatement = Projection();
            break;
          }
        default:
          jj_la1[145] = jj_gen;
          ;
      }
      if (jj_2_73(2147483647)) {
        jjtn000.insertBody = InsertBody();
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateVertexStatementNoTarget CreateVertexStatementNoTarget()
      throws ParseException {
    /*@bgen(jjtree) CreateVertexStatementNoTarget */
    OCreateVertexStatementNoTarget jjtn000 =
        new OCreateVertexStatementNoTarget(JJTCREATEVERTEXSTATEMENTNOTARGET);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(VERTEX);
      jjtn000.insertBody = InsertBody();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMoveVertexStatement MoveVertexStatement() throws ParseException {
    /*@bgen(jjtree) MoveVertexStatement */
    OMoveVertexStatement jjtn000 = new OMoveVertexStatement(JJTMOVEVERTEXSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OExpression lastSetExpr;
    try {
      jj_consume_token(MOVE);
      jj_consume_token(VERTEX);
      jjtn000.source = FromItem();
      jj_consume_token(TO);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CLUSTER_IDENTIFIER:
        case CLUSTER_NUMBER_IDENTIFIER:
          {
            jjtn000.targetCluster = Cluster();
            break;
          }
        case CLASS:
          {
            jj_consume_token(CLASS);
            jj_consume_token(COLON);
            jjtn000.targetClass = Identifier();
            break;
          }
        default:
          jj_la1[146] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case INCREMENT:
          {
            jjtn000.updateOperations = UpdateOperations();
            break;
          }
        default:
          jj_la1[147] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BATCH:
          {
            jjtn000.batch = Batch();
            break;
          }
        default:
          jj_la1[148] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateEdgeStatement CreateEdgeStatement() throws ParseException {
    /*@bgen(jjtree) CreateEdgeStatement */
    OCreateEdgeStatement jjtn000 = new OCreateEdgeStatement(JJTCREATEEDGESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ORid lastRid;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(EDGE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.targetClass = Identifier();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case CLUSTER:
                {
                  jj_consume_token(CLUSTER);
                  jjtn000.targetClusterName = Identifier();
                  break;
                }
              default:
                jj_la1[149] = jj_gen;
                ;
            }
            break;
          }
        default:
          jj_la1[150] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UPSERT:
          {
            jj_consume_token(UPSERT);
            jjtn000.upsert = true;
            break;
          }
        default:
          jj_la1[151] = jj_gen;
          ;
      }
      jj_consume_token(FROM);
      jjtn000.leftExpression = Expression();
      jj_consume_token(TO);
      jjtn000.rightExpression = Expression();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case SET:
        case CONTENT:
        case LPAREN:
          {
            jjtn000.body = InsertBody();
            break;
          }
        default:
          jj_la1[152] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETRY:
          {
            jjtn000.retry = Retry();
            break;
          }
        default:
          jj_la1[153] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WAIT:
          {
            jjtn000.wait = Wait();
            break;
          }
        default:
          jj_la1[154] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BATCH:
          {
            jjtn000.batch = Batch();
            break;
          }
        default:
          jj_la1[155] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OInputParameter InputParameter() throws ParseException {
    /*@bgen(jjtree) InputParameter */
    OInputParameter jjtn000 = new OInputParameter(JJTINPUTPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OInputParameter result;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case HOOK:
          {
            result = PositionalParameter();
            break;
          }
        case COLON:
          {
            result = NamedParameter();
            break;
          }
        default:
          jj_la1[156] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OPositionalParameter PositionalParameter() throws ParseException {
    /*@bgen(jjtree) PositionalParameter */
    OPositionalParameter jjtn000 = new OPositionalParameter(JJTPOSITIONALPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(HOOK);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.paramNumber = inputParamCount;
      inputParamCount++;
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ONamedParameter NamedParameter() throws ParseException {
    /*@bgen(jjtree) NamedParameter */
    ONamedParameter jjtn000 = new ONamedParameter(JJTNAMEDPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier identifierParam;
    Token token;
    try {
      jj_consume_token(COLON);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            identifierParam = Identifier();
            jjtn000.paramName = identifierParam.toString();
            break;
          }
        case SKIP2:
          {
            token = jj_consume_token(SKIP2);
            jjtn000.paramName = token.image;
            break;
          }
        case LIMIT:
          {
            token = jj_consume_token(LIMIT);
            jjtn000.paramName = token.image;
            break;
          }
        case FROM:
          {
            token = jj_consume_token(FROM);
            jjtn000.paramName = token.image;
            break;
          }
        default:
          jj_la1[157] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.paramNumber = inputParamCount;
      inputParamCount++;
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OProjection Projection() throws ParseException {
    /*@bgen(jjtree) Projection */
    OProjection jjtn000 = new OProjection(JJTPROJECTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    java.util.List<OProjectionItem> items = new java.util.ArrayList<OProjectionItem>();
    OProjectionItem lastItem = null;
    try {
      if (jj_2_74(2147483647)) {
        lastItem = ProjectionItem();
        items.add(lastItem);
        label_18:
        while (true) {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COMMA:
              {
                ;
                break;
              }
            default:
              jj_la1[158] = jj_gen;
              break label_18;
          }
          jj_consume_token(COMMA);
          lastItem = ProjectionItem();
          items.add(lastItem);
        }
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case DISTINCT:
            {
              jj_consume_token(DISTINCT);
              jjtn000.distinct = true;
              lastItem = ProjectionItem();
              items.add(lastItem);
              label_19:
              while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case COMMA:
                    {
                      ;
                      break;
                    }
                  default:
                    jj_la1[159] = jj_gen;
                    break label_19;
                }
                jj_consume_token(COMMA);
                lastItem = ProjectionItem();
                items.add(lastItem);
              }
              break;
            }
          default:
            jj_la1[160] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.items = items;
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OProjectionItem ProjectionItem() throws ParseException {
    /*@bgen(jjtree) ProjectionItem */
    OProjectionItem jjtn000 = new OProjectionItem(JJTPROJECTIONITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case BANG:
          {
            jj_consume_token(BANG);
            jjtn000.exclude = true;
            break;
          }
        default:
          jj_la1[161] = jj_gen;
          ;
      }
      jjtn000.expression = Expression();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case COLON:
          {
            jjtn000.nestedProjection = NestedProjection();
            break;
          }
        default:
          jj_la1[162] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case AS:
          {
            jj_consume_token(AS);
            jjtn000.alias = Alias();
            break;
          }
        default:
          jj_la1[163] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ONestedProjection NestedProjection() throws ParseException {
    /*@bgen(jjtree) NestedProjection */
    ONestedProjection jjtn000 = new ONestedProjection(JJTNESTEDPROJECTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ONestedProjectionItem lastItem;
    try {
      jj_consume_token(COLON);
      jj_consume_token(LBRACE);
      lastItem = NestedProjectionItem();
      if (lastItem.exclude) {
        jjtn000.addExcludeItem(lastItem);
      } else if (lastItem.star) {
        jjtn000.starItem = lastItem;
      } else {
        jjtn000.addIncludeItem(lastItem);
      }
      label_20:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[164] = jj_gen;
            break label_20;
        }
        jj_consume_token(COMMA);
        lastItem = NestedProjectionItem();
        if (lastItem.exclude) {
          jjtn000.addExcludeItem(lastItem);
        } else if (lastItem.star) {
          jjtn000.starItem = lastItem;
        } else {
          jjtn000.addIncludeItem(lastItem);
        }
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ONestedProjectionItem NestedProjectionItem() throws ParseException {
    /*@bgen(jjtree) NestedProjectionItem */
    ONestedProjectionItem jjtn000 = new ONestedProjectionItem(JJTNESTEDPROJECTIONITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STAR:
          {
            jj_consume_token(STAR);
            jjtn000.star = true;
            break;
          }
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case RID_STRING:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case BANG:
        case HOOK:
        case COLON:
        case MINUS:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 272:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case BANG:
                {
                  jj_consume_token(BANG);
                  jjtn000.exclude = true;
                  break;
                }
              default:
                jj_la1[165] = jj_gen;
                ;
            }
            jjtn000.expression = Expression();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case STAR:
                {
                  jj_consume_token(STAR);
                  jjtn000.rightWildcard = true;
                  break;
                }
              default:
                jj_la1[166] = jj_gen;
                ;
            }
            break;
          }
        default:
          jj_la1[167] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case COLON:
          {
            jjtn000.expansion = NestedProjection();
            break;
          }
        default:
          jj_la1[168] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case AS:
          {
            jj_consume_token(AS);
            jjtn000.alias = Identifier();
            break;
          }
        default:
          jj_la1[169] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OArraySelector ArraySelector() throws ParseException {
    /*@bgen(jjtree) ArraySelector */
    OArraySelector jjtn000 = new OArraySelector(JJTARRAYSELECTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_75(2147483647)) {
        jjtn000.rid = Rid();
      } else if (jj_2_76(2147483647)) {
        jjtn000.inputParam = InputParameter();
      } else if (jj_2_77(2147483647)) {
        jjtn000.expression = Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OArrayNumberSelector ArrayNumberSelector() throws ParseException {
    /*@bgen(jjtree) ArrayNumberSelector */
    OArrayNumberSelector jjtn000 = new OArrayNumberSelector(JJTARRAYNUMBERSELECTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token tokenVal;
    try {
      if (jj_2_78(2147483647)) {
        jjtn000.inputValue = InputParameter();
      } else if (jj_2_79(2147483647)) {
        tokenVal = jj_consume_token(INTEGER_LITERAL);
        jjtn000.integer = Integer.parseInt(tokenVal.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OArraySingleValuesSelector ArraySingleValuesSelector() throws ParseException {
    /*@bgen(jjtree) ArraySingleValuesSelector */
    OArraySingleValuesSelector jjtn000 =
        new OArraySingleValuesSelector(JJTARRAYSINGLEVALUESSELECTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OArraySelector lastSelector;
    try {
      lastSelector = ArraySelector();
      jjtn000.addItem(lastSelector);
      label_21:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[170] = jj_gen;
            break label_21;
        }
        jj_consume_token(COMMA);
        lastSelector = ArraySelector();
        jjtn000.addItem(lastSelector);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OArrayRangeSelector ArrayRangeSelector() throws ParseException {
    /*@bgen(jjtree) ArrayRangeSelector */
    OArrayRangeSelector jjtn000 = new OArrayRangeSelector(JJTARRAYRANGESELECTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER_RANGE:
          {
            token = jj_consume_token(INTEGER_RANGE);
            String img = token.image;
            String[] splitted = img.split("\\.\\.");
            jjtn000.from = Integer.parseInt(splitted[0], 10);
            jjtn000.to = Integer.parseInt(splitted[1], 10);
            jjtn000.newRange = true;
            break;
          }
        case ELLIPSIS_INTEGER_RANGE:
          {
            token = jj_consume_token(ELLIPSIS_INTEGER_RANGE);
            String img2 = token.image;
            String[] splitted2 = img2.split("\\.\\.\\.");
            jjtn000.from = Integer.parseInt(splitted2[0], 10);
            jjtn000.to = Integer.parseInt(splitted2[1], 10);
            jjtn000.newRange = true;
            jjtn000.included = true;
            break;
          }
        case INTEGER_LITERAL:
        case HOOK:
        case COLON:
          {
            jjtn000.fromSelector = ArrayNumberSelector();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case RANGE:
                {
                  jj_consume_token(RANGE);
                  jjtn000.newRange = true;
                  break;
                }
              case ELLIPSIS:
                {
                  jj_consume_token(ELLIPSIS);
                  jjtn000.newRange = true;
                  jjtn000.included = true;
                  break;
                }
              default:
                jj_la1[171] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtn000.toSelector = ArrayNumberSelector();
            break;
          }
        default:
          jj_la1[172] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OIdentifier Alias() throws ParseException {
    /*@bgen(jjtree) Alias */
    OAlias jjtn000 = new OAlias(JJTALIAS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier identifier;
    try {
      identifier = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return identifier;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ORecordAttribute RecordAttribute() throws ParseException {
    /*@bgen(jjtree) RecordAttribute */
    ORecordAttribute jjtn000 = new ORecordAttribute(JJTRECORDATTRIBUTE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      token = jj_consume_token(RECORD_ATTRIBUTE);
      jjtn000.name = token.image;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OFunctionCall FunctionCall() throws ParseException {
    /*@bgen(jjtree) FunctionCall */
    OFunctionCall jjtn000 = new OFunctionCall(JJTFUNCTIONCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OExpression lastExpression = null;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.name = Identifier();
            break;
          }
        case DISTINCT:
          {
            jj_consume_token(DISTINCT);
            jjtn000.name = new OIdentifier("distinct");
            break;
          }
        default:
          jj_la1[173] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jj_consume_token(LPAREN);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case RID_STRING:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 272:
          {
            lastExpression = Expression();
            jjtn000.addParam(lastExpression);
            label_22:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[174] = jj_gen;
                  break label_22;
              }
              jj_consume_token(COMMA);
              lastExpression = Expression();
              jjtn000.addParam(lastExpression);
            }
            break;
          }
        default:
          jj_la1[175] = jj_gen;
          ;
      }
      jj_consume_token(RPAREN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMethodCall MethodCall() throws ParseException {
    /*@bgen(jjtree) MethodCall */
    OMethodCall jjtn000 = new OMethodCall(JJTMETHODCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OExpression lastExpression;
    try {
      jj_consume_token(DOT);
      jjtn000.methodName = Identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case RID_STRING:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 272:
          {
            lastExpression = Expression();
            jjtn000.addParam(lastExpression);
            label_23:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[176] = jj_gen;
                  break label_23;
              }
              jj_consume_token(COMMA);
              lastExpression = Expression();
              jjtn000.addParam(lastExpression);
            }
            break;
          }
        default:
          jj_la1[177] = jj_gen;
          ;
      }
      jj_consume_token(RPAREN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLevelZeroIdentifier LevelZeroIdentifier() throws ParseException {
    /*@bgen(jjtree) LevelZeroIdentifier */
    OLevelZeroIdentifier jjtn000 = new OLevelZeroIdentifier(JJTLEVELZEROIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_80(2147483647)) {
        jjtn000.functionCall = FunctionCall();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case THIS:
            {
              jj_consume_token(THIS);
              jjtn000.self = true;
              break;
            }
          default:
            jj_la1[178] = jj_gen;
            if (jj_2_81(2147483647)) {
              jjtn000.collection = Collection();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OSuffixIdentifier SuffixIdentifier() throws ParseException {
    /*@bgen(jjtree) SuffixIdentifier */
    OSuffixIdentifier jjtn000 = new OSuffixIdentifier(JJTSUFFIXIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier identifier;
    try {
      if (jj_2_82(2147483647)) {
        identifier = Identifier();
        jjtn000.setIdentifier(identifier);
      } else if (jj_2_83(2147483647)) {
        jjtn000.recordAttribute = RecordAttribute();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case STAR:
            {
              jj_consume_token(STAR);
              jjtn000.star = true;
              break;
            }
          default:
            jj_la1[179] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBaseIdentifier BaseIdentifier() throws ParseException {
    /*@bgen(jjtree) BaseIdentifier */
    OBaseIdentifier jjtn000 = new OBaseIdentifier(JJTBASEIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_84(2147483647)) {
        jjtn000.levelZero = LevelZeroIdentifier();
      } else if (jj_2_85(2147483647)) {
        jjtn000.suffix = SuffixIdentifier();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OModifier Modifier() throws ParseException {
    /*@bgen(jjtree) Modifier */
    OModifier jjtn000 = new OModifier(JJTMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACKET:
          {
            jj_consume_token(LBRACKET);
            jjtn000.squareBrackets = true;
            if (jj_2_86(2147483647)) {
              jjtn000.rightBinaryCondition = RightBinaryCondition();
            } else if (jj_2_87(2147483647)) {
              jjtn000.arrayRange = ArrayRangeSelector();
            } else if (jj_2_88(2147483647)) {
              jjtn000.condition = OrBlock();
            } else if (jj_2_89(2147483647)) {
              jjtn000.arraySingleValues = ArraySingleValuesSelector();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(RBRACKET);
            break;
          }
        default:
          jj_la1[180] = jj_gen;
          if (jj_2_90(2147483647)) {
            jjtn000.methodCall = MethodCall();
          } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case DOT:
                {
                  jj_consume_token(DOT);
                  jjtn000.suffix = SuffixIdentifier();
                  break;
                }
              default:
                jj_la1[181] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
          }
      }
      if (jj_2_91(2147483647)) {
        jjtn000.next = Modifier();
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OExpression Expression() throws ParseException {
    /*@bgen(jjtree) Expression */
    OExpression jjtn000 = new OExpression(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      if (jj_2_92(2147483647)) {
        jjtn000.arrayConcatExpression = ArrayConcatExpression();
        jjtn000.value = jjtn000.arrayConcatExpression;
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case NULL:
            {
              jj_consume_token(NULL);
              jjtn000.isNull = true;
              jjtn000.value = null;
              break;
            }
          case TRUE:
            {
              jj_consume_token(TRUE);
              jjtn000.booleanValue = true;
              jjtn000.value = true;
              break;
            }
          case FALSE:
            {
              jj_consume_token(FALSE);
              jjtn000.booleanValue = false;
              jjtn000.value = false;
              break;
            }
          default:
            jj_la1[182] = jj_gen;
            if (jj_2_93(2147483647)) {
              jjtn000.rid = Rid();
              jjtn000.value = jjtn000.rid;
            } else if (jj_2_94(2147483647)) {
              jjtn000.mathExpression = MathExpression();
              jjtn000.value = jjtn000.mathExpression;
            } else {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE:
                  {
                    jjtn000.json = Json();
                    jjtn000.value = jjtn000.json;
                    break;
                  }
                default:
                  jj_la1[183] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
            }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OArrayConcatExpression ArrayConcatExpression() throws ParseException {
    /*@bgen(jjtree) ArrayConcatExpression */
    OArrayConcatExpression jjtn000 = new OArrayConcatExpression(JJTARRAYCONCATEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OArrayConcatExpressionElement sub;
    jjtn000.setChildExpressions(new java.util.ArrayList());
    try {
      sub = ArrayConcatExpressionElement();
      jjtn000.addChildExpression(sub);
      label_24:
      while (true) {
        jj_consume_token(SC_OR);
        sub = ArrayConcatExpressionElement();
        jjtn000.addChildExpression(sub);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SC_OR:
            {
              ;
              break;
            }
          default:
            jj_la1[184] = jj_gen;
            break label_24;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OArrayConcatExpressionElement ArrayConcatExpressionElement() throws ParseException {
    /*@bgen(jjtree) ArrayConcatExpressionElement */
    OArrayConcatExpressionElement jjtn000 =
        new OArrayConcatExpressionElement(JJTARRAYCONCATEXPRESSIONELEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NULL:
          {
            jj_consume_token(NULL);
            jjtn000.isNull = true;
            jjtn000.value = null;
            break;
          }
        case TRUE:
          {
            jj_consume_token(TRUE);
            jjtn000.booleanValue = true;
            jjtn000.value = true;
            break;
          }
        case FALSE:
          {
            jj_consume_token(FALSE);
            jjtn000.booleanValue = false;
            jjtn000.value = false;
            break;
          }
        default:
          jj_la1[185] = jj_gen;
          if (jj_2_95(2147483647)) {
            jjtn000.rid = Rid();
            jjtn000.value = jjtn000.rid;
          } else if (jj_2_96(2147483647)) {
            jjtn000.mathExpression = MathExpression();
            jjtn000.value = jjtn000.mathExpression;
          } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case LBRACE:
                {
                  jjtn000.json = Json();
                  jjtn000.value = jjtn000.json;
                  break;
                }
              default:
                jj_la1[186] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
          }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMathExpression MathExpression() throws ParseException {
    /*@bgen(jjtree) MathExpression */
    OMathExpression jjtn000 = new OMathExpression(JJTMATHEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OMathExpression sub;
    try {
      sub = FirstLevelExpression();
      jjtn000.addChildExpression(sub);
      label_25:
      while (true) {
        if (jj_2_97(2)) {
          ;
        } else {
          break label_25;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case STAR:
            {
              jj_consume_token(STAR);
              jjtn000.addOperator(OMathExpression.Operator.STAR);
              break;
            }
          case SLASH:
            {
              jj_consume_token(SLASH);
              jjtn000.addOperator(OMathExpression.Operator.SLASH);
              break;
            }
          case REM:
            {
              jj_consume_token(REM);
              jjtn000.addOperator(OMathExpression.Operator.REM);
              break;
            }
          case PLUS:
            {
              jj_consume_token(PLUS);
              jjtn000.addOperator(OMathExpression.Operator.PLUS);
              break;
            }
          case MINUS:
            {
              jj_consume_token(MINUS);
              jjtn000.addOperator(OMathExpression.Operator.MINUS);
              break;
            }
          case LSHIFT:
            {
              jj_consume_token(LSHIFT);
              jjtn000.addOperator(OMathExpression.Operator.LSHIFT);
              break;
            }
          case RSHIFT:
            {
              jj_consume_token(RSHIFT);
              jjtn000.addOperator(OMathExpression.Operator.RSHIFT);
              break;
            }
          case RUNSIGNEDSHIFT:
            {
              jj_consume_token(RUNSIGNEDSHIFT);
              jjtn000.addOperator(OMathExpression.Operator.RUNSIGNEDSHIFT);
              break;
            }
          case BIT_AND:
            {
              jj_consume_token(BIT_AND);
              jjtn000.addOperator(OMathExpression.Operator.BIT_AND);
              break;
            }
          case NULL_COALESCING:
            {
              jj_consume_token(NULL_COALESCING);
              jjtn000.addOperator(OMathExpression.Operator.NULL_COALESCING);
              break;
            }
          case BIT_OR:
            {
              jj_consume_token(BIT_OR);
              jjtn000.addOperator(OMathExpression.Operator.BIT_OR);
              break;
            }
          case XOR:
            {
              jj_consume_token(XOR);
              jjtn000.addOperator(OMathExpression.Operator.XOR);
              break;
            }
          default:
            jj_la1[187] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        sub = FirstLevelExpression();
        jjtn000.addChildExpression(sub);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000.unwrapIfNeeded();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMathExpression FirstLevelExpression() throws ParseException {
    /*@bgen(jjtree) FirstLevelExpression */
    OFirstLevelExpression jjtn000 = new OFirstLevelExpression(JJTFIRSTLEVELEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OMathExpression expr;
    try {
      if (jj_2_98(2147483647)) {
        expr = ParenthesisExpression();
      } else if (jj_2_99(2147483647)) {
        expr = BaseExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return expr;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMathExpression ParenthesisExpression() throws ParseException {
    /*@bgen(jjtree) ParenthesisExpression */
    OParenthesisExpression jjtn000 = new OParenthesisExpression(JJTPARENTHESISEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      if (jj_2_100(2)) {
        jjtn000.statement = QueryStatement();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case NULL:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case DISTINCT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case THIS:
          case RECORD_ATTRIBUTE:
          case RID_STRING:
          case TRUE:
          case FALSE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case HOOK:
          case COLON:
          case MINUS:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
          case 272:
            {
              jjtn000.expression = Expression();
              break;
            }
          case INSERT:
            {
              jjtn000.statement = InsertStatement();
              break;
            }
          default:
            jj_la1[188] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBaseExpression BaseExpression() throws ParseException {
    /*@bgen(jjtree) BaseExpression */
    OBaseExpression jjtn000 = new OBaseExpression(JJTBASEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OBaseIdentifier identifier;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case MINUS:
          {
            jjtn000.number = Number();
            break;
          }
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case LBRACKET:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            identifier = BaseIdentifier();
            jjtn000.setIdentifier(identifier);
            if (jj_2_101(2147483647)) {
              jjtn000.modifier = Modifier();
            } else {
              ;
            }
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.inputParam = InputParameter();
            if (jj_2_102(2147483647)) {
              jjtn000.modifier = Modifier();
            } else {
              ;
            }
            break;
          }
        case RID_STRING:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case RID_STRING:
              case STRING_LITERAL:
                {
                  jjtn000.string = String();
                  break;
                }
              case CHARACTER_LITERAL:
                {
                  token = jj_consume_token(CHARACTER_LITERAL);
                  jjtn000.string = token.image;
                  break;
                }
              default:
                jj_la1[189] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            if (jj_2_103(2147483647)) {
              jjtn000.modifier = Modifier();
            } else {
              ;
            }
            break;
          }
        default:
          jj_la1[190] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OFromClause FromClause() throws ParseException {
    /*@bgen(jjtree) FromClause */
    OFromClause jjtn000 = new OFromClause(JJTFROMCLAUSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.item = FromItem();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLetClause LetClause() throws ParseException {
    /*@bgen(jjtree) LetClause */
    OLetClause jjtn000 = new OLetClause(JJTLETCLAUSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OLetItem lastItem;
    try {
      jj_consume_token(LET);
      lastItem = LetItem();
      jjtn000.addItem(lastItem);
      label_26:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[191] = jj_gen;
            break label_26;
        }
        jj_consume_token(COMMA);
        lastItem = LetItem();
        jjtn000.addItem(lastItem);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLetItem LetItem() throws ParseException {
    /*@bgen(jjtree) LetItem */
    OLetItem jjtn000 = new OLetItem(JJTLETITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.varName = Identifier();
      jj_consume_token(EQ);
      if (jj_2_104(2147483647)) {
        jjtn000.expression = Expression();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case LPAREN:
            {
              jj_consume_token(LPAREN);
              jjtn000.query = QueryStatement();
              jj_consume_token(RPAREN);
              break;
            }
          default:
            jj_la1[192] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OFromItem FromItem() throws ParseException {
    /*@bgen(jjtree) FromItem */
    OFromItem jjtn000 = new OFromItem(JJTFROMITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    jjtn000.rids = new java.util.ArrayList();
    jjtn000.inputParams = new java.util.ArrayList();
    ORid lastRid;
    OInputParameter lastParam;
    OIdentifier identifier;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER_LITERAL:
        case LBRACE:
        case MINUS:
        case 272:
          {
            lastRid = Rid();
            jjtn000.addRid(lastRid);
            break;
          }
        default:
          jj_la1[197] = jj_gen;
          if (jj_2_108(2)) {
            jjtn000.emptyList = EmptyList();
          } else if (jj_2_109(2)) {
            jj_consume_token(LBRACKET);
            lastRid = Rid();
            jjtn000.addRid(lastRid);
            label_27:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[193] = jj_gen;
                  break label_27;
              }
              jj_consume_token(COMMA);
              lastRid = Rid();
              jjtn000.addRid(lastRid);
            }
            jj_consume_token(RBRACKET);
          } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case LBRACKET:
                {
                  jj_consume_token(LBRACKET);
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case HOOK:
                      {
                        lastParam = PositionalParameter();
                        jjtn000.addInputParam(lastParam);
                        break;
                      }
                    case COLON:
                      {
                        lastParam = NamedParameter();
                        jjtn000.addInputParam(lastParam);
                        break;
                      }
                    default:
                      jj_la1[194] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                  }
                  label_28:
                  while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case COMMA:
                      case COLON:
                        {
                          ;
                          break;
                        }
                      default:
                        jj_la1[195] = jj_gen;
                        break label_28;
                    }
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case COMMA:
                        {
                          jj_consume_token(COMMA);
                          lastParam = PositionalParameter();
                          jjtn000.addInputParam(lastParam);
                          break;
                        }
                      case COLON:
                        {
                          lastParam = NamedParameter();
                          jjtn000.addInputParam(lastParam);
                          break;
                        }
                      default:
                        jj_la1[196] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                  }
                  jj_consume_token(RBRACKET);
                  break;
                }
              case CLUSTER_IDENTIFIER:
              case CLUSTER_NUMBER_IDENTIFIER:
                {
                  jjtn000.cluster = Cluster();
                  break;
                }
              case CLUSTER:
                {
                  jjtn000.clusterList = ClusterList();
                  break;
                }
              default:
                jj_la1[198] = jj_gen;
                if (jj_2_110(2147483647)) {
                  jjtn000.index = IndexIdentifier();
                } else {
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case METADATA_IDENTIFIER:
                      {
                        jjtn000.metadata = MetadataIdentifier();
                        break;
                      }
                    case LPAREN:
                      {
                        jj_consume_token(LPAREN);
                        jjtn000.statement = QueryStatement();
                        jj_consume_token(RPAREN);
                        if (jj_2_105(2147483647)) {
                          jjtn000.modifier = Modifier();
                        } else {
                          ;
                        }
                        break;
                      }
                    case HOOK:
                    case COLON:
                      {
                        jjtn000.inputParam = InputParameter();
                        break;
                      }
                    default:
                      jj_la1[199] = jj_gen;
                      if (jj_2_111(2)) {
                        jjtn000.functionCall = FunctionCall();
                        if (jj_2_106(2147483647)) {
                          jjtn000.modifier = Modifier();
                        } else {
                          ;
                        }
                      } else {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                          case TO:
                          case VALUE:
                          case VALUES:
                          case SET:
                          case ADD:
                          case PUT:
                          case MERGE:
                          case CONTENT:
                          case REMOVE:
                          case ORDER:
                          case GROUP:
                          case OFFSET:
                          case RECORD:
                          case CACHE:
                          case CYCLE:
                          case NOLIMIT:
                          case NOCYCLE:
                          case LUCENE:
                          case NEAR:
                          case WITHIN:
                          case MINDEPTH:
                          case CLASS:
                          case SUPERCLASS:
                          case CLASSES:
                          case SUPERCLASSES:
                          case VIEW:
                          case UPDATABLE:
                          case EXCEPTION:
                          case PROFILE:
                          case STORAGE:
                          case ON:
                          case OFF:
                          case TRUNCATE:
                          case FIND:
                          case REFERENCES:
                          case EXTENDS:
                          case CLUSTERS:
                          case ABSTRACT:
                          case ALTER:
                          case NAME:
                          case SHORTNAME:
                          case OVERSIZE:
                          case STRICTMODE:
                          case ADDCLUSTER:
                          case REMOVECLUSTER:
                          case CUSTOM:
                          case CLUSTERSELECTION:
                          case DESCRIPTION:
                          case ENCRYPTION:
                          case DROP:
                          case PROPERTY:
                          case FORCE:
                          case METADATA:
                          case INDEX:
                          case COLLATE:
                          case ENGINE:
                          case REBUILD:
                          case ID:
                          case DATABASE:
                          case OPTIMIZE:
                          case LINK:
                          case TYPE:
                          case INVERSE:
                          case EXPLAIN:
                          case GRANT:
                          case REVOKE:
                          case READ:
                          case EXECUTE:
                          case ALL:
                          case NONE:
                          case FUNCTION:
                          case PARAMETERS:
                          case IDEMPOTENT:
                          case LANGUAGE:
                          case BEGIN:
                          case COMMIT:
                          case ROLLBACK:
                          case IF:
                          case ELSE:
                          case CONTINUE:
                          case FAIL:
                          case ISOLATION:
                          case SLEEP:
                          case CONSOLE:
                          case BLOB:
                          case SHARED:
                          case DEFAULT_:
                          case SEQUENCE:
                          case START:
                          case OPTIONAL:
                          case COUNT:
                          case HA:
                          case STATUS:
                          case SERVER:
                          case SYNC:
                          case EXISTS:
                          case MOVE:
                          case DEPTH_ALIAS:
                          case PATH_ALIAS:
                          case IDENTIFIED:
                          case ROLE:
                          case USER:
                          case USERS:
                          case RID:
                          case SECURITY:
                          case POLICY:
                          case DEFAULTCLUSTER:
                          case SYSTEM:
                          case IN:
                          case KEY:
                          case IDENTIFIER:
                          case QUOTED_IDENTIFIER:
                            {
                              identifier = Identifier();
                              jjtn000.setIdentifier(identifier);
                              if (jj_2_107(2147483647)) {
                                jjtn000.modifier = Modifier();
                              } else {
                                ;
                              }
                              break;
                            }
                          default:
                            jj_la1[200] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                        }
                      }
                  }
                }
            }
          }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OEmptyList EmptyList() throws ParseException {
    /*@bgen(jjtree) EmptyList */
    OEmptyList jjtn000 = new OEmptyList(JJTEMPTYLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCluster Cluster() throws ParseException {
    /*@bgen(jjtree) Cluster */
    OCluster jjtn000 = new OCluster(JJTCLUSTER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token cName;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CLUSTER_IDENTIFIER:
          {
            cName = jj_consume_token(CLUSTER_IDENTIFIER);
            jjtn000.clusterName = cName.image.split(":")[1];
            break;
          }
        case CLUSTER_NUMBER_IDENTIFIER:
          {
            cName = jj_consume_token(CLUSTER_NUMBER_IDENTIFIER);
            jjtn000.clusterNumber = Integer.parseInt(cName.image.split(":")[1]);
            break;
          }
        default:
          jj_la1[201] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OClusterList ClusterList() throws ParseException {
    /*@bgen(jjtree) ClusterList */
    OClusterList jjtn000 = new OClusterList(JJTCLUSTERLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    try {
      jj_consume_token(CLUSTER);
      jj_consume_token(COLON);
      jj_consume_token(LBRACKET);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            lastIdentifier = Identifier();
            jjtn000.addCluster(lastIdentifier);
            label_29:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[202] = jj_gen;
                  break label_29;
              }
              jj_consume_token(COMMA);
              lastIdentifier = Identifier();
              jjtn000.addCluster(lastIdentifier);
            }
            break;
          }
        default:
          jj_la1[203] = jj_gen;
          ;
      }
      jj_consume_token(RBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMetadataIdentifier MetadataIdentifier() throws ParseException {
    /*@bgen(jjtree) MetadataIdentifier */
    OMetadataIdentifier jjtn000 = new OMetadataIdentifier(JJTMETADATAIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token mdName;
    try {
      mdName = jj_consume_token(METADATA_IDENTIFIER);
      jjtn000.name = mdName.image.split(":")[1];
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OIndexName IndexName() throws ParseException {
    /*@bgen(jjtree) IndexName */
    OIndexName jjtn000 = new OIndexName(JJTINDEXNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    StringBuilder builder = new StringBuilder();
    Token token;
    OIdentifier lastIdentifier;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case 273:
          {
            jj_consume_token(273);
            builder.append("__@recordmap@___");
            break;
          }
        default:
          jj_la1[204] = jj_gen;
          ;
      }
      lastIdentifier = Identifier();
      builder.append(lastIdentifier.getValue());
      label_30:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case DOT:
          case MINUS:
            {
              ;
              break;
            }
          default:
            jj_la1[205] = jj_gen;
            break label_30;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case DOT:
            {
              jj_consume_token(DOT);
              builder.append(".");
              break;
            }
          case MINUS:
            {
              jj_consume_token(MINUS);
              builder.append("-");
              break;
            }
          default:
            jj_la1[206] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        lastIdentifier = Identifier();
        builder.append(lastIdentifier.getValue());
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.value = builder.toString();
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OIndexIdentifier IndexIdentifier() throws ParseException {
    /*@bgen(jjtree) IndexIdentifier */
    OIndexIdentifier jjtn000 = new OIndexIdentifier(JJTINDEXIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INDEX_COLON:
          {
            jj_consume_token(INDEX_COLON);
            jjtn000.indexName = IndexName();
            jjtn000.type = OIndexIdentifier.Type.INDEX;
            break;
          }
        case INDEXVALUES_IDENTIFIER:
        case INDEXVALUESASC_IDENTIFIER:
        case INDEXVALUESDESC_IDENTIFIER:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case INDEXVALUES_IDENTIFIER:
                {
                  token = jj_consume_token(INDEXVALUES_IDENTIFIER);
                  jjtn000.type = OIndexIdentifier.Type.VALUES;
                  break;
                }
              case INDEXVALUESASC_IDENTIFIER:
                {
                  token = jj_consume_token(INDEXVALUESASC_IDENTIFIER);
                  jjtn000.type = OIndexIdentifier.Type.VALUESASC;
                  break;
                }
              case INDEXVALUESDESC_IDENTIFIER:
                {
                  token = jj_consume_token(INDEXVALUESDESC_IDENTIFIER);
                  jjtn000.type = OIndexIdentifier.Type.VALUESDESC;
                  break;
                }
              default:
                jj_la1[207] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtn000.indexNameString = token.image.split(":")[1];
            break;
          }
        default:
          jj_la1[208] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OWhereClause WhereClause() throws ParseException {
    /*@bgen(jjtree) WhereClause */
    OWhereClause jjtn000 = new OWhereClause(JJTWHERECLAUSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.baseExpression = OrBlock();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OOrBlock OrBlock() throws ParseException {
    /*@bgen(jjtree) OrBlock */
    OOrBlock jjtn000 = new OOrBlock(JJTORBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OAndBlock lastAnd = null;
    try {
      lastAnd = AndBlock();
      jjtn000.addSubBlock(lastAnd);
      label_31:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case OR:
            {
              ;
              break;
            }
          default:
            jj_la1[209] = jj_gen;
            break label_31;
        }
        jj_consume_token(OR);
        lastAnd = AndBlock();
        jjtn000.addSubBlock(lastAnd);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAndBlock AndBlock() throws ParseException {
    /*@bgen(jjtree) AndBlock */
    OAndBlock jjtn000 = new OAndBlock(JJTANDBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ONotBlock lastNot = null;
    try {
      lastNot = NotBlock();
      jjtn000.addSubBlock(lastNot);
      label_32:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case AND:
            {
              ;
              break;
            }
          default:
            jj_la1[210] = jj_gen;
            break label_32;
        }
        jj_consume_token(AND);
        lastNot = NotBlock();
        jjtn000.addSubBlock(lastNot);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ONotBlock NotBlock() throws ParseException {
    /*@bgen(jjtree) NotBlock */
    ONotBlock jjtn000 = new ONotBlock(JJTNOTBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NOT:
          {
            jj_consume_token(NOT);
            jjtn000.negate = true;
            if (jj_2_112(2147483647)) {
              jjtn000.sub = ConditionBlock();
            } else if (jj_2_113(2147483647)) {
              jjtn000.sub = ParenthesisBlock();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          }
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case RID_STRING:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 272:
          {
            if (jj_2_114(2147483647)) {
              jjtn000.sub = ConditionBlock();
            } else if (jj_2_115(2147483647)) {
              jjtn000.sub = ParenthesisBlock();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[211] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression ParenthesisBlock() throws ParseException {
    /*@bgen(jjtree) ParenthesisBlock */
    OParenthesisBlock jjtn000 = new OParenthesisBlock(JJTPARENTHESISBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      jjtn000.subElement = OrBlock();
      jj_consume_token(RPAREN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression ConditionBlock() throws ParseException {
    /*@bgen(jjtree) ConditionBlock */
    OConditionBlock jjtn000 = new OConditionBlock(JJTCONDITIONBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OBooleanExpression result = null;
    try {
      if (jj_2_116(2147483647)) {
        result = IsNotNullCondition();
      } else if (jj_2_117(2147483647)) {
        result = IsNullCondition();
      } else if (jj_2_118(2147483647)) {
        result = IsNotDefinedCondition();
      } else if (jj_2_119(2147483647)) {
        result = IsDefinedCondition();
      } else if (jj_2_120(2147483647)) {
        result = InCondition();
      } else if (jj_2_121(2147483647)) {
        result = NotInCondition();
      } else if (jj_2_122(2147483647)) {
        result = BinaryCondition();
      } else if (jj_2_123(2147483647)) {
        result = BetweenCondition();
      } else if (jj_2_124(2147483647)) {
        result = ContainsCondition();
      } else if (jj_2_125(2147483647)) {
        result = ContainsValueCondition();
      } else if (jj_2_126(2147483647)) {
        result = ContainsAllCondition();
      } else if (jj_2_127(2147483647)) {
        result = ContainsAnyCondition();
      } else if (jj_2_128(2147483647)) {
        result = ContainsTextCondition();
      } else if (jj_2_129(2147483647)) {
        result = MatchesCondition();
      } else if (jj_2_130(2147483647)) {
        result = InstanceofCondition();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TRUE:
            {
              jj_consume_token(TRUE);
              result = OBooleanExpression.TRUE;
              break;
            }
          case FALSE:
            {
              jj_consume_token(FALSE);
              result = OBooleanExpression.FALSE;
              break;
            }
          default:
            jj_la1[212] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBinaryCompareOperator CompareOperator() throws ParseException {
    /*@bgen(jjtree) CompareOperator */
    OCompareOperator jjtn000 = new OCompareOperator(JJTCOMPAREOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OBinaryCompareOperator result;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case EQ:
        case EQEQ:
          {
            result = EqualsCompareOperator();
            break;
          }
        case LT:
          {
            result = LtOperator();
            break;
          }
        case GT:
          {
            result = GtOperator();
            break;
          }
        case NE:
          {
            result = NeOperator();
            break;
          }
        case NEQ:
          {
            result = NeqOperator();
            break;
          }
        case GE:
          {
            result = GeOperator();
            break;
          }
        case LE:
          {
            result = LeOperator();
            break;
          }
        case LIKE:
          {
            result = LikeOperator();
            break;
          }
        case CONTAINSKEY:
          {
            result = ContainsKeyOperator();
            break;
          }
        case LUCENE:
          {
            result = LuceneOperator();
            break;
          }
        case NEAR:
          {
            result = NearOperator();
            break;
          }
        case WITHIN:
          {
            result = WithinOperator();
            break;
          }
        case SC_AND:
          {
            result = ScAndOperator();
            break;
          }
        default:
          jj_la1[213] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return result;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLtOperator LtOperator() throws ParseException {
    /*@bgen(jjtree) LtOperator */
    OLtOperator jjtn000 = new OLtOperator(JJTLTOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OGtOperator GtOperator() throws ParseException {
    /*@bgen(jjtree) GtOperator */
    OGtOperator jjtn000 = new OGtOperator(JJTGTOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ONeOperator NeOperator() throws ParseException {
    /*@bgen(jjtree) NeOperator */
    ONeOperator jjtn000 = new ONeOperator(JJTNEOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ONeqOperator NeqOperator() throws ParseException {
    /*@bgen(jjtree) NeqOperator */
    ONeqOperator jjtn000 = new ONeqOperator(JJTNEQOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NEQ);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OGeOperator GeOperator() throws ParseException {
    /*@bgen(jjtree) GeOperator */
    OGeOperator jjtn000 = new OGeOperator(JJTGEOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLeOperator LeOperator() throws ParseException {
    /*@bgen(jjtree) LeOperator */
    OLeOperator jjtn000 = new OLeOperator(JJTLEOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLikeOperator LikeOperator() throws ParseException {
    /*@bgen(jjtree) LikeOperator */
    OLikeOperator jjtn000 = new OLikeOperator(JJTLIKEOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LIKE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLuceneOperator LuceneOperator() throws ParseException {
    /*@bgen(jjtree) LuceneOperator */
    OLuceneOperator jjtn000 = new OLuceneOperator(JJTLUCENEOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LUCENE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ONearOperator NearOperator() throws ParseException {
    /*@bgen(jjtree) NearOperator */
    ONearOperator jjtn000 = new ONearOperator(JJTNEAROPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NEAR);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OWithinOperator WithinOperator() throws ParseException {
    /*@bgen(jjtree) WithinOperator */
    OWithinOperator jjtn000 = new OWithinOperator(JJTWITHINOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WITHIN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OScAndOperator ScAndOperator() throws ParseException {
    /*@bgen(jjtree) ScAndOperator */
    OScAndOperator jjtn000 = new OScAndOperator(JJTSCANDOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SC_AND);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OContainsKeyOperator ContainsKeyOperator() throws ParseException {
    /*@bgen(jjtree) ContainsKeyOperator */
    OContainsKeyOperator jjtn000 = new OContainsKeyOperator(JJTCONTAINSKEYOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTAINSKEY);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OContainsValueOperator ContainsValueOperator() throws ParseException {
    /*@bgen(jjtree) ContainsValueOperator */
    OContainsValueOperator jjtn000 = new OContainsValueOperator(JJTCONTAINSVALUEOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTAINSVALUE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OEqualsCompareOperator EqualsCompareOperator() throws ParseException {
    /*@bgen(jjtree) EqualsCompareOperator */
    OEqualsCompareOperator jjtn000 = new OEqualsCompareOperator(JJTEQUALSCOMPAREOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case EQ:
          {
            jj_consume_token(EQ);
            jjtn000.doubleEquals = false;
            break;
          }
        case EQEQ:
          {
            jj_consume_token(EQEQ);
            jjtn000.doubleEquals = true;
            break;
          }
        default:
          jj_la1[214] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ORightBinaryCondition RightBinaryCondition() throws ParseException {
    /*@bgen(jjtree) RightBinaryCondition */
    ORightBinaryCondition jjtn000 = new ORightBinaryCondition(JJTRIGHTBINARYCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LUCENE:
        case NEAR:
        case WITHIN:
        case EQ:
        case EQEQ:
        case LT:
        case GT:
        case LE:
        case GE:
        case NE:
        case NEQ:
        case SC_AND:
        case LIKE:
        case CONTAINSKEY:
          {
            jjtn000.operator = CompareOperator();
            jjtn000.right = Expression();
            break;
          }
        case NOT:
        case IN:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case NOT:
                {
                  jj_consume_token(NOT);
                  jjtn000.not = true;
                  break;
                }
              default:
                jj_la1[215] = jj_gen;
                ;
            }
            jjtn000.inOperator = InOperator();
            jjtn000.right = Expression();
            break;
          }
        default:
          jj_la1[216] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression BinaryCondition() throws ParseException {
    /*@bgen(jjtree) BinaryCondition */
    OBinaryCondition jjtn000 = new OBinaryCondition(JJTBINARYCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Expression();
      jjtn000.operator = CompareOperator();
      jjtn000.right = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression ContainsValueCondition() throws ParseException {
    /*@bgen(jjtree) ContainsValueCondition */
    OContainsValueCondition jjtn000 = new OContainsValueCondition(JJTCONTAINSVALUECONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Expression();
      jjtn000.operator = ContainsValueOperator();
      if (jj_2_131(3)) {
        jj_consume_token(LPAREN);
        jjtn000.condition = OrBlock();
        jj_consume_token(RPAREN);
      } else if (jj_2_132(2147483647)) {
        jjtn000.expression = Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression InstanceofCondition() throws ParseException {
    /*@bgen(jjtree) InstanceofCondition */
    OInstanceofCondition jjtn000 = new OInstanceofCondition(JJTINSTANCEOFCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      jjtn000.left = Expression();
      jj_consume_token(INSTANCEOF);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.right = Identifier();
            break;
          }
        case RID_STRING:
        case STRING_LITERAL:
          {
            jjtn000.rightString = String();
            break;
          }
        case CHARACTER_LITERAL:
          {
            token = jj_consume_token(CHARACTER_LITERAL);
            jjtn000.rightString = token.image;
            break;
          }
        default:
          jj_la1[217] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression BetweenCondition() throws ParseException {
    /*@bgen(jjtree) BetweenCondition */
    OBetweenCondition jjtn000 = new OBetweenCondition(JJTBETWEENCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.first = Expression();
      jj_consume_token(BETWEEN);
      jjtn000.second = Expression();
      jj_consume_token(AND);
      jjtn000.third = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression IsNullCondition() throws ParseException {
    /*@bgen(jjtree) IsNullCondition */
    OIsNullCondition jjtn000 = new OIsNullCondition(JJTISNULLCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.expression = Expression();
      jj_consume_token(IS);
      jj_consume_token(NULL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression IsNotNullCondition() throws ParseException {
    /*@bgen(jjtree) IsNotNullCondition */
    OIsNotNullCondition jjtn000 = new OIsNotNullCondition(JJTISNOTNULLCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.expression = Expression();
      jj_consume_token(IS);
      jj_consume_token(NOT);
      jj_consume_token(NULL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression IsDefinedCondition() throws ParseException {
    /*@bgen(jjtree) IsDefinedCondition */
    OIsDefinedCondition jjtn000 = new OIsDefinedCondition(JJTISDEFINEDCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.expression = Expression();
      jj_consume_token(IS);
      jj_consume_token(DEFINED);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression IsNotDefinedCondition() throws ParseException {
    /*@bgen(jjtree) IsNotDefinedCondition */
    OIsNotDefinedCondition jjtn000 = new OIsNotDefinedCondition(JJTISNOTDEFINEDCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.expression = Expression();
      jj_consume_token(IS);
      jj_consume_token(NOT);
      jj_consume_token(DEFINED);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression ContainsCondition() throws ParseException {
    /*@bgen(jjtree) ContainsCondition */
    OContainsCondition jjtn000 = new OContainsCondition(JJTCONTAINSCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Expression();
      jj_consume_token(CONTAINS);
      if (jj_2_133(3)) {
        jj_consume_token(LPAREN);
        jjtn000.condition = OrBlock();
        jj_consume_token(RPAREN);
      } else if (jj_2_134(2147483647)) {
        jjtn000.right = Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OInOperator InOperator() throws ParseException {
    /*@bgen(jjtree) InOperator */
    OInOperator jjtn000 = new OInOperator(JJTINOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression InCondition() throws ParseException {
    /*@bgen(jjtree) InCondition */
    OInCondition jjtn000 = new OInCondition(JJTINCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OExpression lastExpression;
    try {
      jjtn000.left = Expression();
      jjtn000.operator = InOperator();
      if (jj_2_136(2)) {
        jj_consume_token(LPAREN);
        if (jj_2_135(2147483647)) {
          jjtn000.rightStatement = SelectStatement();
        } else {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SELECT:
              {
                jjtn000.rightStatement = SelectWithoutTargetStatement();
                break;
              }
            default:
              jj_la1[218] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_137(2)) {
        jj_consume_token(LPAREN);
        jjtn000.rightParam = InputParameter();
        jj_consume_token(RPAREN);
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case DISTINCT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case THIS:
          case RECORD_ATTRIBUTE:
          case RID_STRING:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LPAREN:
          case LBRACKET:
          case HOOK:
          case COLON:
          case MINUS:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              jjtn000.rightMathExpression = MathExpression();
              break;
            }
          default:
            jj_la1[219] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression NotInCondition() throws ParseException {
    /*@bgen(jjtree) NotInCondition */
    ONotInCondition jjtn000 = new ONotInCondition(JJTNOTINCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OExpression lastExpression;
    try {
      jjtn000.left = Expression();
      jj_consume_token(NOT);
      InOperator();
      if (jj_2_139(2)) {
        jj_consume_token(LPAREN);
        if (jj_2_138(2147483647)) {
          jjtn000.rightStatement = SelectStatement();
        } else {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SELECT:
              {
                jjtn000.rightStatement = SelectWithoutTargetStatement();
                break;
              }
            default:
              jj_la1[220] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_140(2)) {
        jj_consume_token(LPAREN);
        jjtn000.rightParam = InputParameter();
        jj_consume_token(RPAREN);
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case DISTINCT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case THIS:
          case RECORD_ATTRIBUTE:
          case RID_STRING:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LPAREN:
          case LBRACKET:
          case HOOK:
          case COLON:
          case MINUS:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              jjtn000.rightMathExpression = MathExpression();
              break;
            }
          default:
            jj_la1[221] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression ContainsAllCondition() throws ParseException {
    /*@bgen(jjtree) ContainsAllCondition */
    OContainsAllCondition jjtn000 = new OContainsAllCondition(JJTCONTAINSALLCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Expression();
      jj_consume_token(CONTAINSALL);
      if (jj_2_141(3)) {
        jj_consume_token(LPAREN);
        jjtn000.rightBlock = OrBlock();
        jj_consume_token(RPAREN);
      } else if (jj_2_142(2147483647)) {
        jjtn000.right = Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression ContainsAnyCondition() throws ParseException {
    /*@bgen(jjtree) ContainsAnyCondition */
    OContainsAnyCondition jjtn000 = new OContainsAnyCondition(JJTCONTAINSANYCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Expression();
      jj_consume_token(CONTAINSANY);
      if (jj_2_143(3)) {
        jj_consume_token(LPAREN);
        jjtn000.rightBlock = OrBlock();
        jj_consume_token(RPAREN);
      } else if (jj_2_144(2147483647)) {
        jjtn000.right = Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression ContainsTextCondition() throws ParseException {
    /*@bgen(jjtree) ContainsTextCondition */
    OContainsTextCondition jjtn000 = new OContainsTextCondition(JJTCONTAINSTEXTCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.left = Expression();
      jj_consume_token(CONTAINSTEXT);
      jjtn000.right = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBooleanExpression MatchesCondition() throws ParseException {
    /*@bgen(jjtree) MatchesCondition */
    OMatchesCondition jjtn000 = new OMatchesCondition(JJTMATCHESCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      jjtn000.expression = Expression();
      jj_consume_token(MATCHES);
      if (jj_2_145(2147483647)) {
        jjtn000.rightExpression = Expression();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case RID_STRING:
          case STRING_LITERAL:
            {
              jjtn000.right = String();
              break;
            }
          case CHARACTER_LITERAL:
            {
              token = jj_consume_token(CHARACTER_LITERAL);
              jjtn000.right = token.image;
              break;
            }
          case HOOK:
          case COLON:
            {
              jjtn000.rightParam = InputParameter();
              break;
            }
          default:
            jj_la1[222] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OOrderBy OrderBy() throws ParseException {
    /*@bgen(jjtree) OrderBy */
    OOrderBy jjtn000 = new OOrderBy(JJTORDERBY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    jjtn000.items = new java.util.ArrayList();
    OOrderByItem lastItem;
    OIdentifier lastIdentifier;
    OModifier lastModifier;
    ORid lastRid;
    Token lastToken;
    try {
      jj_consume_token(ORDER);
      jj_consume_token(BY);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case RECORD_ATTRIBUTE:
        case INTEGER_LITERAL:
        case LBRACE:
        case MINUS:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 272:
          {
            lastItem = new OOrderByItem();
            jjtn000.addItem(lastItem);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  lastIdentifier = Identifier();
                  lastItem.alias = lastIdentifier.getStringValue();
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LBRACKET:
                    case DOT:
                      {
                        lastModifier = Modifier();
                        lastItem.modifier = lastModifier;
                        break;
                      }
                    default:
                      jj_la1[223] = jj_gen;
                      ;
                  }
                  break;
                }
              case INTEGER_LITERAL:
              case LBRACE:
              case MINUS:
              case 272:
                {
                  lastItem.rid = Rid();
                  break;
                }
              case RECORD_ATTRIBUTE:
                {
                  lastToken = jj_consume_token(RECORD_ATTRIBUTE);
                  lastItem.recordAttr = lastToken.image;
                  break;
                }
              default:
                jj_la1[224] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case ASC:
              case DESC:
                {
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case DESC:
                      {
                        jj_consume_token(DESC);
                        lastItem.type = OOrderByItem.DESC;
                        break;
                      }
                    case ASC:
                      {
                        jj_consume_token(ASC);
                        lastItem.type = OOrderByItem.ASC;
                        break;
                      }
                    default:
                      jj_la1[225] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                  }
                  break;
                }
              default:
                jj_la1[226] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case COLLATE:
                {
                  jj_consume_token(COLLATE);
                  lastItem.collate = Expression();
                  break;
                }
              default:
                jj_la1[227] = jj_gen;
                ;
            }
            break;
          }
        case LPAREN:
          {
            jj_consume_token(LPAREN);
            lastItem = new OOrderByItem();
            jjtn000.addItem(lastItem);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  lastIdentifier = Identifier();
                  lastItem.alias = lastIdentifier.getStringValue();
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LBRACKET:
                    case DOT:
                      {
                        lastModifier = Modifier();
                        lastItem.modifier = lastModifier;
                        break;
                      }
                    default:
                      jj_la1[228] = jj_gen;
                      ;
                  }
                  break;
                }
              case INTEGER_LITERAL:
              case LBRACE:
              case MINUS:
              case 272:
                {
                  lastItem.rid = Rid();
                  break;
                }
              case RECORD_ATTRIBUTE:
                {
                  lastToken = jj_consume_token(RECORD_ATTRIBUTE);
                  lastItem.recordAttr = lastToken.image;
                  break;
                }
              default:
                jj_la1[229] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case ASC:
              case DESC:
                {
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case DESC:
                      {
                        jj_consume_token(DESC);
                        lastItem.type = OOrderByItem.DESC;
                        break;
                      }
                    case ASC:
                      {
                        jj_consume_token(ASC);
                        lastItem.type = OOrderByItem.ASC;
                        break;
                      }
                    default:
                      jj_la1[230] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                  }
                  break;
                }
              default:
                jj_la1[231] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case COLLATE:
                {
                  jj_consume_token(COLLATE);
                  lastItem.collate = Expression();
                  break;
                }
              default:
                jj_la1[232] = jj_gen;
                ;
            }
            jj_consume_token(RPAREN);
            break;
          }
        default:
          jj_la1[233] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      label_33:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[234] = jj_gen;
            break label_33;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case RECORD_ATTRIBUTE:
          case INTEGER_LITERAL:
          case LBRACE:
          case MINUS:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
          case 272:
            {
              lastItem = new OOrderByItem();
              jjtn000.addItem(lastItem);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case TO:
                case VALUE:
                case VALUES:
                case SET:
                case ADD:
                case PUT:
                case MERGE:
                case CONTENT:
                case REMOVE:
                case ORDER:
                case GROUP:
                case OFFSET:
                case RECORD:
                case CACHE:
                case CYCLE:
                case NOLIMIT:
                case NOCYCLE:
                case LUCENE:
                case NEAR:
                case WITHIN:
                case MINDEPTH:
                case CLASS:
                case SUPERCLASS:
                case CLASSES:
                case SUPERCLASSES:
                case VIEW:
                case UPDATABLE:
                case EXCEPTION:
                case PROFILE:
                case STORAGE:
                case ON:
                case OFF:
                case TRUNCATE:
                case FIND:
                case REFERENCES:
                case EXTENDS:
                case CLUSTERS:
                case ABSTRACT:
                case ALTER:
                case NAME:
                case SHORTNAME:
                case OVERSIZE:
                case STRICTMODE:
                case ADDCLUSTER:
                case REMOVECLUSTER:
                case CUSTOM:
                case CLUSTERSELECTION:
                case DESCRIPTION:
                case ENCRYPTION:
                case DROP:
                case PROPERTY:
                case FORCE:
                case METADATA:
                case INDEX:
                case COLLATE:
                case ENGINE:
                case REBUILD:
                case ID:
                case DATABASE:
                case OPTIMIZE:
                case LINK:
                case TYPE:
                case INVERSE:
                case EXPLAIN:
                case GRANT:
                case REVOKE:
                case READ:
                case EXECUTE:
                case ALL:
                case NONE:
                case FUNCTION:
                case PARAMETERS:
                case IDEMPOTENT:
                case LANGUAGE:
                case BEGIN:
                case COMMIT:
                case ROLLBACK:
                case IF:
                case ELSE:
                case CONTINUE:
                case FAIL:
                case ISOLATION:
                case SLEEP:
                case CONSOLE:
                case BLOB:
                case SHARED:
                case DEFAULT_:
                case SEQUENCE:
                case START:
                case OPTIONAL:
                case COUNT:
                case HA:
                case STATUS:
                case SERVER:
                case SYNC:
                case EXISTS:
                case MOVE:
                case DEPTH_ALIAS:
                case PATH_ALIAS:
                case IDENTIFIED:
                case ROLE:
                case USER:
                case USERS:
                case RID:
                case SECURITY:
                case POLICY:
                case DEFAULTCLUSTER:
                case SYSTEM:
                case IN:
                case KEY:
                case IDENTIFIER:
                case QUOTED_IDENTIFIER:
                  {
                    lastIdentifier = Identifier();
                    lastItem.alias = lastIdentifier.toString();
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case LBRACKET:
                      case DOT:
                        {
                          lastModifier = Modifier();
                          lastItem.modifier = lastModifier;
                          break;
                        }
                      default:
                        jj_la1[235] = jj_gen;
                        ;
                    }
                    break;
                  }
                case INTEGER_LITERAL:
                case LBRACE:
                case MINUS:
                case 272:
                  {
                    lastItem.rid = Rid();
                    break;
                  }
                case RECORD_ATTRIBUTE:
                  {
                    lastToken = jj_consume_token(RECORD_ATTRIBUTE);
                    lastItem.recordAttr = lastToken.image;
                    break;
                  }
                default:
                  jj_la1[236] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ASC:
                case DESC:
                  {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case DESC:
                        {
                          jj_consume_token(DESC);
                          lastItem.type = OOrderByItem.DESC;
                          break;
                        }
                      case ASC:
                        {
                          jj_consume_token(ASC);
                          lastItem.type = OOrderByItem.ASC;
                          break;
                        }
                      default:
                        jj_la1[237] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    break;
                  }
                default:
                  jj_la1[238] = jj_gen;
                  ;
              }
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COLLATE:
                  {
                    jj_consume_token(COLLATE);
                    lastItem.collate = Expression();
                    break;
                  }
                default:
                  jj_la1[239] = jj_gen;
                  ;
              }
              break;
            }
          case LPAREN:
            {
              jj_consume_token(LPAREN);
              lastItem = new OOrderByItem();
              jjtn000.addItem(lastItem);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case TO:
                case VALUE:
                case VALUES:
                case SET:
                case ADD:
                case PUT:
                case MERGE:
                case CONTENT:
                case REMOVE:
                case ORDER:
                case GROUP:
                case OFFSET:
                case RECORD:
                case CACHE:
                case CYCLE:
                case NOLIMIT:
                case NOCYCLE:
                case LUCENE:
                case NEAR:
                case WITHIN:
                case MINDEPTH:
                case CLASS:
                case SUPERCLASS:
                case CLASSES:
                case SUPERCLASSES:
                case VIEW:
                case UPDATABLE:
                case EXCEPTION:
                case PROFILE:
                case STORAGE:
                case ON:
                case OFF:
                case TRUNCATE:
                case FIND:
                case REFERENCES:
                case EXTENDS:
                case CLUSTERS:
                case ABSTRACT:
                case ALTER:
                case NAME:
                case SHORTNAME:
                case OVERSIZE:
                case STRICTMODE:
                case ADDCLUSTER:
                case REMOVECLUSTER:
                case CUSTOM:
                case CLUSTERSELECTION:
                case DESCRIPTION:
                case ENCRYPTION:
                case DROP:
                case PROPERTY:
                case FORCE:
                case METADATA:
                case INDEX:
                case COLLATE:
                case ENGINE:
                case REBUILD:
                case ID:
                case DATABASE:
                case OPTIMIZE:
                case LINK:
                case TYPE:
                case INVERSE:
                case EXPLAIN:
                case GRANT:
                case REVOKE:
                case READ:
                case EXECUTE:
                case ALL:
                case NONE:
                case FUNCTION:
                case PARAMETERS:
                case IDEMPOTENT:
                case LANGUAGE:
                case BEGIN:
                case COMMIT:
                case ROLLBACK:
                case IF:
                case ELSE:
                case CONTINUE:
                case FAIL:
                case ISOLATION:
                case SLEEP:
                case CONSOLE:
                case BLOB:
                case SHARED:
                case DEFAULT_:
                case SEQUENCE:
                case START:
                case OPTIONAL:
                case COUNT:
                case HA:
                case STATUS:
                case SERVER:
                case SYNC:
                case EXISTS:
                case MOVE:
                case DEPTH_ALIAS:
                case PATH_ALIAS:
                case IDENTIFIED:
                case ROLE:
                case USER:
                case USERS:
                case RID:
                case SECURITY:
                case POLICY:
                case DEFAULTCLUSTER:
                case SYSTEM:
                case IN:
                case KEY:
                case IDENTIFIER:
                case QUOTED_IDENTIFIER:
                  {
                    lastIdentifier = Identifier();
                    lastItem.alias = lastIdentifier.toString();
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case LBRACKET:
                      case DOT:
                        {
                          lastModifier = Modifier();
                          lastItem.modifier = lastModifier;
                          break;
                        }
                      default:
                        jj_la1[240] = jj_gen;
                        ;
                    }
                    break;
                  }
                case INTEGER_LITERAL:
                case LBRACE:
                case MINUS:
                case 272:
                  {
                    lastItem.rid = Rid();
                    break;
                  }
                case RECORD_ATTRIBUTE:
                  {
                    lastToken = jj_consume_token(RECORD_ATTRIBUTE);
                    lastItem.recordAttr = lastToken.image;
                    break;
                  }
                default:
                  jj_la1[241] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ASC:
                case DESC:
                  {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case DESC:
                        {
                          jj_consume_token(DESC);
                          lastItem.type = OOrderByItem.DESC;
                          break;
                        }
                      case ASC:
                        {
                          jj_consume_token(ASC);
                          lastItem.type = OOrderByItem.ASC;
                          break;
                        }
                      default:
                        jj_la1[242] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    break;
                  }
                default:
                  jj_la1[243] = jj_gen;
                  ;
              }
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COLLATE:
                  {
                    jj_consume_token(COLLATE);
                    lastItem.collate = Expression();
                    break;
                  }
                default:
                  jj_la1[244] = jj_gen;
                  ;
              }
              jj_consume_token(RPAREN);
              break;
            }
          default:
            jj_la1[245] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OGroupBy GroupBy() throws ParseException {
    /*@bgen(jjtree) GroupBy */
    OGroupBy jjtn000 = new OGroupBy(JJTGROUPBY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OExpression lastExpression;
    try {
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      lastExpression = Expression();
      jjtn000.addItem(lastExpression);
      label_34:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[246] = jj_gen;
            break label_34;
        }
        jj_consume_token(COMMA);
        lastExpression = Expression();
        jjtn000.addItem(lastExpression);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OUnwind Unwind() throws ParseException {
    /*@bgen(jjtree) Unwind */
    OUnwind jjtn000 = new OUnwind(JJTUNWIND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    try {
      jj_consume_token(UNWIND);
      lastIdentifier = Identifier();
      jjtn000.addItem(lastIdentifier);
      label_35:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[247] = jj_gen;
            break label_35;
        }
        jj_consume_token(COMMA);
        lastIdentifier = Identifier();
        jjtn000.addItem(lastIdentifier);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLimit Limit() throws ParseException {
    /*@bgen(jjtree) Limit */
    OLimit jjtn000 = new OLimit(JJTLIMIT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LIMIT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER_LITERAL:
        case MINUS:
          {
            jjtn000.num = Integer();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.inputParam = InputParameter();
            break;
          }
        default:
          jj_la1[248] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OSkip Skip() throws ParseException {
    /*@bgen(jjtree) Skip */
    OSkip jjtn000 = new OSkip(JJTSKIP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case SKIP2:
          {
            jj_consume_token(SKIP2);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case INTEGER_LITERAL:
              case MINUS:
                {
                  jjtn000.num = Integer();
                  break;
                }
              case HOOK:
              case COLON:
                {
                  jjtn000.inputParam = InputParameter();
                  break;
                }
              default:
                jj_la1[249] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case OFFSET:
          {
            jj_consume_token(OFFSET);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case INTEGER_LITERAL:
              case MINUS:
                {
                  jjtn000.num = Integer();
                  break;
                }
              case HOOK:
              case COLON:
                {
                  jjtn000.inputParam = InputParameter();
                  break;
                }
              default:
                jj_la1[250] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[251] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBatch Batch() throws ParseException {
    /*@bgen(jjtree) Batch */
    OBatch jjtn000 = new OBatch(JJTBATCH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BATCH);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER_LITERAL:
        case MINUS:
          {
            jjtn000.num = Integer();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.inputParam = InputParameter();
            break;
          }
        default:
          jj_la1[252] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OTimeout Timeout() throws ParseException {
    /*@bgen(jjtree) Timeout */
    OTimeout jjtn000 = new OTimeout(JJTTIMEOUT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OInteger val;
    try {
      jj_consume_token(TIMEOUT);
      val = Integer();
      jjtn000.val = val.getValue();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETURN:
        case EXCEPTION:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case RETURN:
                {
                  jj_consume_token(RETURN);
                  jjtn000.failureStrategy = OTimeout.RETURN;
                  break;
                }
              case EXCEPTION:
                {
                  jj_consume_token(EXCEPTION);
                  jjtn000.failureStrategy = OTimeout.EXCEPTION;
                  break;
                }
              default:
                jj_la1[253] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[254] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final java.lang.Number Wait() throws ParseException {
    /*@bgen(jjtree) Wait */
    OWait jjtn000 = new OWait(JJTWAIT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OInteger val;
    try {
      jj_consume_token(WAIT);
      val = Integer();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return val.getValue();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final java.lang.Number Retry() throws ParseException {
    /*@bgen(jjtree) Retry */
    ORetry jjtn000 = new ORetry(JJTRETRY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OInteger val;
    try {
      jj_consume_token(RETRY);
      val = Integer();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return val.getValue();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCollection Collection() throws ParseException {
    /*@bgen(jjtree) Collection */
    OCollection jjtn000 = new OCollection(JJTCOLLECTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OExpression lastExpression;
    try {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case RID_STRING:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 272:
          {
            lastExpression = Expression();
            jjtn000.add(lastExpression);
            label_36:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[255] = jj_gen;
                  break label_36;
              }
              jj_consume_token(COMMA);
              lastExpression = Expression();
              jjtn000.add(lastExpression);
            }
            break;
          }
        default:
          jj_la1[256] = jj_gen;
          ;
      }
      jj_consume_token(RBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OFetchPlan FetchPlan() throws ParseException {
    /*@bgen(jjtree) FetchPlan */
    OFetchPlan jjtn000 = new OFetchPlan(JJTFETCHPLAN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OFetchPlanItem lastItem;
    try {
      jj_consume_token(FETCHPLAN);
      lastItem = FetchPlanItem();
      jjtn000.addItem(lastItem);
      label_37:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case LBRACKET:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              ;
              break;
            }
          default:
            jj_la1[257] = jj_gen;
            break label_37;
        }
        lastItem = FetchPlanItem();
        jjtn000.addItem(lastItem);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OFetchPlanItem FetchPlanItem() throws ParseException {
    /*@bgen(jjtree) FetchPlanItem */
    OFetchPlanItem jjtn000 = new OFetchPlanItem(JJTFETCHPLANITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    boolean lastStarred = false;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STAR:
          {
            jj_consume_token(STAR);
            jjtn000.star = true;
            break;
          }
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case LBRACKET:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case LBRACKET:
                {
                  jj_consume_token(LBRACKET);
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case INTEGER_LITERAL:
                    case MINUS:
                      {
                        jjtn000.leftDepth = Integer();
                        break;
                      }
                    case STAR:
                      {
                        jj_consume_token(STAR);
                        jjtn000.leftStar = true;
                        break;
                      }
                    default:
                      jj_la1[258] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                  }
                  jj_consume_token(RBRACKET);
                  break;
                }
              default:
                jj_la1[259] = jj_gen;
                ;
            }
            lastIdentifier = Identifier();
            lastStarred = false;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case STAR:
                {
                  jj_consume_token(STAR);
                  lastStarred = true;
                  break;
                }
              default:
                jj_la1[260] = jj_gen;
                ;
            }
            String field = lastIdentifier.getValue();
            if (lastStarred) {
              field += "*";
            }
            jjtn000.addFieldToChain(field);
            label_38:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case DOT:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[261] = jj_gen;
                  break label_38;
              }
              jj_consume_token(DOT);
              lastIdentifier = Identifier();
              lastStarred = false;
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case STAR:
                  {
                    jj_consume_token(STAR);
                    lastStarred = true;
                    break;
                  }
                default:
                  jj_la1[262] = jj_gen;
                  ;
              }
              field = lastIdentifier.getValue();
              if (lastStarred) {
                field += "*";
              }
              jjtn000.addFieldToChain(field);
            }
            break;
          }
        default:
          jj_la1[263] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jj_consume_token(COLON);
      jjtn000.rightDepth = Integer();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OTraverseProjectionItem TraverseProjectionItem() throws ParseException {
    /*@bgen(jjtree) TraverseProjectionItem */
    OTraverseProjectionItem jjtn000 = new OTraverseProjectionItem(JJTTRAVERSEPROJECTIONITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.base = BaseIdentifier();
      if (jj_2_146(2147483647)) {
        jjtn000.modifier = Modifier();
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OJson Json() throws ParseException {
    /*@bgen(jjtree) Json */
    OJson jjtn000 = new OJson(JJTJSON);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OJsonItem lastItem;
    Token token;
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case RECORD_ATTRIBUTE:
        case RID_STRING:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            lastItem = new OJsonItem();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  lastItem.leftIdentifier = Identifier();
                  break;
                }
              case RECORD_ATTRIBUTE:
                {
                  token = jj_consume_token(RECORD_ATTRIBUTE);
                  lastItem.leftString = token.image;
                  break;
                }
              case RID_STRING:
              case STRING_LITERAL:
                {
                  lastItem.leftString = String();
                  lastItem.leftString =
                      lastItem.leftString.substring(1, lastItem.leftString.length() - 1);
                  break;
                }
              case CHARACTER_LITERAL:
                {
                  token = jj_consume_token(CHARACTER_LITERAL);
                  lastItem.leftString = token.image.substring(1, token.image.length() - 1);
                  break;
                }
              default:
                jj_la1[264] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(COLON);
            lastItem.right = Expression();
            jjtn000.addItem(lastItem);
            label_39:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[265] = jj_gen;
                  break label_39;
              }
              jj_consume_token(COMMA);
              lastItem = new OJsonItem();
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case TO:
                case VALUE:
                case VALUES:
                case SET:
                case ADD:
                case PUT:
                case MERGE:
                case CONTENT:
                case REMOVE:
                case ORDER:
                case GROUP:
                case OFFSET:
                case RECORD:
                case CACHE:
                case CYCLE:
                case NOLIMIT:
                case NOCYCLE:
                case LUCENE:
                case NEAR:
                case WITHIN:
                case MINDEPTH:
                case CLASS:
                case SUPERCLASS:
                case CLASSES:
                case SUPERCLASSES:
                case VIEW:
                case UPDATABLE:
                case EXCEPTION:
                case PROFILE:
                case STORAGE:
                case ON:
                case OFF:
                case TRUNCATE:
                case FIND:
                case REFERENCES:
                case EXTENDS:
                case CLUSTERS:
                case ABSTRACT:
                case ALTER:
                case NAME:
                case SHORTNAME:
                case OVERSIZE:
                case STRICTMODE:
                case ADDCLUSTER:
                case REMOVECLUSTER:
                case CUSTOM:
                case CLUSTERSELECTION:
                case DESCRIPTION:
                case ENCRYPTION:
                case DROP:
                case PROPERTY:
                case FORCE:
                case METADATA:
                case INDEX:
                case COLLATE:
                case ENGINE:
                case REBUILD:
                case ID:
                case DATABASE:
                case OPTIMIZE:
                case LINK:
                case TYPE:
                case INVERSE:
                case EXPLAIN:
                case GRANT:
                case REVOKE:
                case READ:
                case EXECUTE:
                case ALL:
                case NONE:
                case FUNCTION:
                case PARAMETERS:
                case IDEMPOTENT:
                case LANGUAGE:
                case BEGIN:
                case COMMIT:
                case ROLLBACK:
                case IF:
                case ELSE:
                case CONTINUE:
                case FAIL:
                case ISOLATION:
                case SLEEP:
                case CONSOLE:
                case BLOB:
                case SHARED:
                case DEFAULT_:
                case SEQUENCE:
                case START:
                case OPTIONAL:
                case COUNT:
                case HA:
                case STATUS:
                case SERVER:
                case SYNC:
                case EXISTS:
                case MOVE:
                case DEPTH_ALIAS:
                case PATH_ALIAS:
                case IDENTIFIED:
                case ROLE:
                case USER:
                case USERS:
                case RID:
                case SECURITY:
                case POLICY:
                case DEFAULTCLUSTER:
                case SYSTEM:
                case IN:
                case KEY:
                case IDENTIFIER:
                case QUOTED_IDENTIFIER:
                  {
                    lastItem.leftIdentifier = Identifier();
                    break;
                  }
                case RECORD_ATTRIBUTE:
                  {
                    token = jj_consume_token(RECORD_ATTRIBUTE);
                    lastItem.leftString = token.image;
                    break;
                  }
                case RID_STRING:
                case STRING_LITERAL:
                  {
                    lastItem.leftString = String();
                    lastItem.leftString =
                        lastItem.leftString.substring(1, lastItem.leftString.length() - 1);
                    break;
                  }
                case CHARACTER_LITERAL:
                  {
                    token = jj_consume_token(CHARACTER_LITERAL);
                    lastItem.leftString = token.image.substring(1, token.image.length() - 1);
                    break;
                  }
                default:
                  jj_la1[266] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              jj_consume_token(COLON);
              lastItem.right = Expression();
              jjtn000.addItem(lastItem);
            }
            break;
          }
        default:
          jj_la1[267] = jj_gen;
          ;
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchExpression MatchExpression() throws ParseException {
    /*@bgen(jjtree) MatchExpression */
    OMatchExpression jjtn000 = new OMatchExpression(JJTMATCHEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OMatchPathItem nextItem = null;
    try {
      jjtn000.origin = MatchFilter();
      label_40:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case DOT:
          case LT:
          case DECR:
          case MINUS:
            {
              ;
              break;
            }
          default:
            jj_la1[268] = jj_gen;
            break label_40;
        }
        if (jj_2_147(3)) {
          nextItem = MatchPathItem();
        } else if (jj_2_148(3)) {
          nextItem = MultiMatchPathItemArrows();
        } else if (jj_2_149(3)) {
          nextItem = MultiMatchPathItem();
        } else if (jj_2_150(2147483647)) {
          nextItem = OutPathItem();
        } else {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case LT:
              {
                nextItem = InPathItem();
                break;
              }
            default:
              jj_la1[269] = jj_gen;
              if (jj_2_151(2147483647)) {
                nextItem = BothPathItem();
              } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case DOT:
                    {
                      nextItem = FieldMatchPathItem();
                      break;
                    }
                  default:
                    jj_la1[270] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
              }
          }
        }
        jjtn000.addItem(nextItem);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem MatchPathItem() throws ParseException {
    /*@bgen(jjtree) MatchPathItem */
    OMatchPathItem jjtn000 = new OMatchPathItem(JJTMATCHPATHITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.method = MethodCall();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.filter = MatchFilter();
            break;
          }
        default:
          jj_la1[271] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem FieldMatchPathItem() throws ParseException {
    /*@bgen(jjtree) FieldMatchPathItem */
    OFieldMatchPathItem jjtn000 = new OFieldMatchPathItem(JJTFIELDMATCHPATHITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DOT);
      jjtn000.field = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.filter = MatchFilter();
            break;
          }
        default:
          jj_la1[272] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem MatchPathItemFirst() throws ParseException {
    /*@bgen(jjtree) MatchPathItemFirst */
    OMatchPathItemFirst jjtn000 = new OMatchPathItemFirst(JJTMATCHPATHITEMFIRST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.function = FunctionCall();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.filter = MatchFilter();
            break;
          }
        default:
          jj_la1[273] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem MultiMatchPathItem() throws ParseException {
    /*@bgen(jjtree) MultiMatchPathItem */
    OMultiMatchPathItem jjtn000 = new OMultiMatchPathItem(JJTMULTIMATCHPATHITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OMatchPathItem nextItem = null;
    try {
      jj_consume_token(DOT);
      jj_consume_token(LPAREN);
      nextItem = MatchPathItemFirst();
      jjtn000.addItem(nextItem);
      label_41:
      while (true) {
        if (jj_2_152(2147483647)) {
          ;
        } else {
          break label_41;
        }
        nextItem = MatchPathItem();
        jjtn000.addItem(nextItem);
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.filter = MatchFilter();
            break;
          }
        default:
          jj_la1[274] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem MultiMatchPathItemArrows() throws ParseException {
    /*@bgen(jjtree) MultiMatchPathItemArrows */
    OMultiMatchPathItemArrows jjtn000 = new OMultiMatchPathItemArrows(JJTMULTIMATCHPATHITEMARROWS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OMatchPathItem prevItem = null;
    OMatchPathItem nextItem = null;
    try {
      jj_consume_token(DOT);
      jj_consume_token(LPAREN);
      label_42:
      while (true) {
        if (jj_2_153(2147483647)) {
          nextItem = OutPathItemOpt();
          jjtn000.addItem(nextItem);
        } else if (jj_2_154(2147483647)) {
          nextItem = InPathItemOpt();
          jjtn000.addItem(nextItem);
        } else if (jj_2_155(2147483647)) {
          nextItem = BothPathItemOpt();
          jjtn000.addItem(nextItem);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (prevItem != null && prevItem.filter == null) {
          {
            if (true) throw new OQueryParsingException("MATCH sub-pattern with no square brackets");
          }
        }
        prevItem = nextItem;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case LT:
          case DECR:
          case MINUS:
            {
              ;
              break;
            }
          default:
            jj_la1[275] = jj_gen;
            break label_42;
        }
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.filter = MatchFilter();
            break;
          }
        default:
          jj_la1[276] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchFilter MatchFilter() throws ParseException {
    /*@bgen(jjtree) MatchFilter */
    OMatchFilter jjtn000 = new OMatchFilter(JJTMATCHFILTER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OMatchFilterItem lastItem = null;
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case WHERE:
        case WHILE:
        case AS:
        case MAXDEPTH:
        case CLASS:
        case CLASSES:
        case OPTIONAL:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case RID:
        case CLUSTER:
        case CLUSTER_IDENTIFIER:
        case CLUSTER_NUMBER_IDENTIFIER:
          {
            lastItem = MatchFilterItem();
            jjtn000.addItem(lastItem);
            label_43:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[277] = jj_gen;
                  break label_43;
              }
              jj_consume_token(COMMA);
              lastItem = MatchFilterItem();
              jjtn000.addItem(lastItem);
            }
            break;
          }
        default:
          jj_la1[278] = jj_gen;
          ;
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchFilterItem MatchFilterItem() throws ParseException {
    /*@bgen(jjtree) MatchFilterItem */
    OMatchFilterItem jjtn000 = new OMatchFilterItem(JJTMATCHFILTERITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token lastToken;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CLASS:
          {
            jj_consume_token(CLASS);
            jj_consume_token(COLON);
            jjtn000.className = Expression();
            break;
          }
        case CLASSES:
          {
            jj_consume_token(CLASSES);
            jj_consume_token(COLON);
            jjtn000.classNames = Expression();
            break;
          }
        case CLUSTER:
          {
            jj_consume_token(CLUSTER);
            jj_consume_token(COLON);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.clusterName = Identifier();
                  break;
                }
              case INTEGER_LITERAL:
              case MINUS:
                {
                  jjtn000.clusterId = Integer();
                  break;
                }
              default:
                jj_la1[279] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case CLUSTER_IDENTIFIER:
        case CLUSTER_NUMBER_IDENTIFIER:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case CLUSTER_IDENTIFIER:
                {
                  lastToken = jj_consume_token(CLUSTER_IDENTIFIER);
                  jjtn000.clusterName = new OIdentifier(lastToken.image.split(":")[1]);
                  break;
                }
              case CLUSTER_NUMBER_IDENTIFIER:
                {
                  lastToken = jj_consume_token(CLUSTER_NUMBER_IDENTIFIER);
                  jjtn000.clusterId = new OInteger(-1);
                  jjtn000.clusterId.setValue(Integer.parseInt(lastToken.image.split(":")[1]));
                  break;
                }
              default:
                jj_la1[280] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case RID:
          {
            jj_consume_token(RID);
            jj_consume_token(COLON);
            jjtn000.rid = Rid();
            break;
          }
        case AS:
          {
            jj_consume_token(AS);
            jj_consume_token(COLON);
            jjtn000.alias = Identifier();
            break;
          }
        case WHERE:
          {
            jj_consume_token(WHERE);
            jj_consume_token(COLON);
            jj_consume_token(LPAREN);
            jjtn000.filter = WhereClause();
            jj_consume_token(RPAREN);
            break;
          }
        case WHILE:
          {
            jj_consume_token(WHILE);
            jj_consume_token(COLON);
            jj_consume_token(LPAREN);
            jjtn000.whileCondition = WhereClause();
            jj_consume_token(RPAREN);
            break;
          }
        case MAXDEPTH:
          {
            jj_consume_token(MAXDEPTH);
            jj_consume_token(COLON);
            jjtn000.maxDepth = Integer();
            break;
          }
        case OPTIONAL:
          {
            jj_consume_token(OPTIONAL);
            jj_consume_token(COLON);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TRUE:
                {
                  jj_consume_token(TRUE);
                  jjtn000.optional = true;
                  break;
                }
              case FALSE:
                {
                  jj_consume_token(FALSE);
                  jjtn000.optional = false;
                  break;
                }
              default:
                jj_la1[281] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case DEPTH_ALIAS:
          {
            jj_consume_token(DEPTH_ALIAS);
            jj_consume_token(COLON);
            jjtn000.depthAlias = Identifier();
            break;
          }
        case PATH_ALIAS:
          {
            jj_consume_token(PATH_ALIAS);
            jj_consume_token(COLON);
            jjtn000.pathAlias = Identifier();
            break;
          }
        default:
          jj_la1[282] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem OutPathItem() throws ParseException {
    /*@bgen(jjtree) OutPathItem */
    OOutPathItem jjtn000 = new OOutPathItem(JJTOUTPATHITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier edgeName = null;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MINUS:
          {
            jj_consume_token(MINUS);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  edgeName = Identifier();
                  break;
                }
              default:
                jj_la1[283] = jj_gen;
                ;
            }
            jj_consume_token(MINUS);
            break;
          }
        case DECR:
          {
            jj_consume_token(DECR);
            break;
          }
        default:
          jj_la1[284] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jj_consume_token(GT);
      jjtn000.filter = MatchFilter();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.outPath(edgeName);
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem InPathItem() throws ParseException {
    /*@bgen(jjtree) InPathItem */
    OInPathItem jjtn000 = new OInPathItem(JJTINPATHITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier edgeName = null;
    try {
      jj_consume_token(LT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MINUS:
          {
            jj_consume_token(MINUS);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  edgeName = Identifier();
                  break;
                }
              default:
                jj_la1[285] = jj_gen;
                ;
            }
            jj_consume_token(MINUS);
            break;
          }
        case DECR:
          {
            jj_consume_token(DECR);
            break;
          }
        default:
          jj_la1[286] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtn000.filter = MatchFilter();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.inPath(edgeName);
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem BothPathItem() throws ParseException {
    /*@bgen(jjtree) BothPathItem */
    OBothPathItem jjtn000 = new OBothPathItem(JJTBOTHPATHITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier edgeName = null;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MINUS:
          {
            jj_consume_token(MINUS);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  edgeName = Identifier();
                  break;
                }
              default:
                jj_la1[287] = jj_gen;
                ;
            }
            jj_consume_token(MINUS);
            break;
          }
        case DECR:
          {
            jj_consume_token(DECR);
            break;
          }
        default:
          jj_la1[288] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtn000.filter = MatchFilter();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.bothPath(edgeName);
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem OutPathItemOpt() throws ParseException {
    /*@bgen(jjtree) OutPathItemOpt */
    OOutPathItemOpt jjtn000 = new OOutPathItemOpt(JJTOUTPATHITEMOPT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier edgeName = null;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MINUS:
          {
            jj_consume_token(MINUS);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  edgeName = Identifier();
                  break;
                }
              default:
                jj_la1[289] = jj_gen;
                ;
            }
            jj_consume_token(MINUS);
            break;
          }
        case DECR:
          {
            jj_consume_token(DECR);
            break;
          }
        default:
          jj_la1[290] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jj_consume_token(GT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.filter = MatchFilter();
            break;
          }
        default:
          jj_la1[291] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.outPath(edgeName);
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem InPathItemOpt() throws ParseException {
    /*@bgen(jjtree) InPathItemOpt */
    OInPathItemOpt jjtn000 = new OInPathItemOpt(JJTINPATHITEMOPT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier edgeName = null;
    try {
      jj_consume_token(LT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MINUS:
          {
            jj_consume_token(MINUS);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  edgeName = Identifier();
                  break;
                }
              default:
                jj_la1[292] = jj_gen;
                ;
            }
            jj_consume_token(MINUS);
            break;
          }
        case DECR:
          {
            jj_consume_token(DECR);
            break;
          }
        default:
          jj_la1[293] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.filter = MatchFilter();
            break;
          }
        default:
          jj_la1[294] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.inPath(edgeName);
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OMatchPathItem BothPathItemOpt() throws ParseException {
    /*@bgen(jjtree) BothPathItemOpt */
    OBothPathItemOpt jjtn000 = new OBothPathItemOpt(JJTBOTHPATHITEMOPT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier edgeName = null;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MINUS:
          {
            jj_consume_token(MINUS);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  edgeName = Identifier();
                  break;
                }
              default:
                jj_la1[295] = jj_gen;
                ;
            }
            jj_consume_token(MINUS);
            break;
          }
        case DECR:
          {
            jj_consume_token(DECR);
            break;
          }
        default:
          jj_la1[296] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.filter = MatchFilter();
            break;
          }
        default:
          jj_la1[297] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.bothPath(edgeName);
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OProfileStorageStatement ProfileStorageStatement() throws ParseException {
    /*@bgen(jjtree) ProfileStorageStatement */
    OProfileStorageStatement jjtn000 = new OProfileStorageStatement(JJTPROFILESTORAGESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(PROFILE);
      jj_consume_token(STORAGE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ON:
          {
            jj_consume_token(ON);
            jjtn000.on = true;
            break;
          }
        case OFF:
          {
            jj_consume_token(OFF);
            jjtn000.on = false;
            break;
          }
        default:
          jj_la1[298] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OTruncateClassStatement TruncateClassStatement() throws ParseException {
    /*@bgen(jjtree) TruncateClassStatement */
    OTruncateClassStatement jjtn000 = new OTruncateClassStatement(JJTTRUNCATECLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRUNCATE);
      jj_consume_token(CLASS);
      jjtn000.className = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case POLYMORPHIC:
          {
            jj_consume_token(POLYMORPHIC);
            jjtn000.polymorphic = true;
            break;
          }
        default:
          jj_la1[299] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNSAFE:
          {
            jj_consume_token(UNSAFE);
            jjtn000.unsafe = true;
            break;
          }
        default:
          jj_la1[300] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OTruncateClusterStatement TruncateClusterStatement() throws ParseException {
    /*@bgen(jjtree) TruncateClusterStatement */
    OTruncateClusterStatement jjtn000 = new OTruncateClusterStatement(JJTTRUNCATECLUSTERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRUNCATE);
      jj_consume_token(CLUSTER);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.clusterName = Identifier();
            break;
          }
        case INTEGER_LITERAL:
        case MINUS:
          {
            jjtn000.clusterNumber = Integer();
            break;
          }
        default:
          jj_la1[301] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNSAFE:
          {
            jj_consume_token(UNSAFE);
            jjtn000.unsafe = true;
            break;
          }
        default:
          jj_la1[302] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OTruncateRecordStatement TruncateRecordStatement() throws ParseException {
    /*@bgen(jjtree) TruncateRecordStatement */
    OTruncateRecordStatement jjtn000 = new OTruncateRecordStatement(JJTTRUNCATERECORDSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ORid lastRecord;
    try {
      jj_consume_token(TRUNCATE);
      jj_consume_token(RECORD);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER_LITERAL:
        case LBRACE:
        case MINUS:
        case 272:
          {
            jjtn000.record = Rid();
            break;
          }
        case LBRACKET:
          {
            jj_consume_token(LBRACKET);
            jjtn000.records = new ArrayList<ORid>();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case INTEGER_LITERAL:
              case LBRACE:
              case MINUS:
              case 272:
                {
                  lastRecord = Rid();
                  jjtn000.addRecord(lastRecord);
                  label_44:
                  while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case COMMA:
                        {
                          ;
                          break;
                        }
                      default:
                        jj_la1[303] = jj_gen;
                        break label_44;
                    }
                    jj_consume_token(COMMA);
                    lastRecord = Rid();
                    jjtn000.addRecord(lastRecord);
                  }
                  break;
                }
              default:
                jj_la1[304] = jj_gen;
                ;
            }
            jj_consume_token(RBRACKET);
            break;
          }
        default:
          jj_la1[305] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OFindReferencesStatement FindReferencesStatement() throws ParseException {
    /*@bgen(jjtree) FindReferencesStatement */
    OFindReferencesStatement jjtn000 = new OFindReferencesStatement(JJTFINDREFERENCESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    SimpleNode lastTarget;
    try {
      jj_consume_token(FIND);
      jj_consume_token(REFERENCES);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER_LITERAL:
        case LBRACE:
        case MINUS:
        case 272:
          {
            jjtn000.rid = Rid();
            break;
          }
        case LPAREN:
          {
            jj_consume_token(LPAREN);
            jjtn000.subQuery = StatementInternal();
            jj_consume_token(RPAREN);
            break;
          }
        default:
          jj_la1[306] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACKET:
          {
            jj_consume_token(LBRACKET);
            jjtn000.targets = new ArrayList<SimpleNode>();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  lastTarget = Identifier();
                  break;
                }
              case CLUSTER_IDENTIFIER:
              case CLUSTER_NUMBER_IDENTIFIER:
                {
                  lastTarget = Cluster();
                  break;
                }
              default:
                jj_la1[307] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtn000.addTarget(lastTarget);
            label_45:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[308] = jj_gen;
                  break label_45;
              }
              jj_consume_token(COMMA);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case TO:
                case VALUE:
                case VALUES:
                case SET:
                case ADD:
                case PUT:
                case MERGE:
                case CONTENT:
                case REMOVE:
                case ORDER:
                case GROUP:
                case OFFSET:
                case RECORD:
                case CACHE:
                case CYCLE:
                case NOLIMIT:
                case NOCYCLE:
                case LUCENE:
                case NEAR:
                case WITHIN:
                case MINDEPTH:
                case CLASS:
                case SUPERCLASS:
                case CLASSES:
                case SUPERCLASSES:
                case VIEW:
                case UPDATABLE:
                case EXCEPTION:
                case PROFILE:
                case STORAGE:
                case ON:
                case OFF:
                case TRUNCATE:
                case FIND:
                case REFERENCES:
                case EXTENDS:
                case CLUSTERS:
                case ABSTRACT:
                case ALTER:
                case NAME:
                case SHORTNAME:
                case OVERSIZE:
                case STRICTMODE:
                case ADDCLUSTER:
                case REMOVECLUSTER:
                case CUSTOM:
                case CLUSTERSELECTION:
                case DESCRIPTION:
                case ENCRYPTION:
                case DROP:
                case PROPERTY:
                case FORCE:
                case METADATA:
                case INDEX:
                case COLLATE:
                case ENGINE:
                case REBUILD:
                case ID:
                case DATABASE:
                case OPTIMIZE:
                case LINK:
                case TYPE:
                case INVERSE:
                case EXPLAIN:
                case GRANT:
                case REVOKE:
                case READ:
                case EXECUTE:
                case ALL:
                case NONE:
                case FUNCTION:
                case PARAMETERS:
                case IDEMPOTENT:
                case LANGUAGE:
                case BEGIN:
                case COMMIT:
                case ROLLBACK:
                case IF:
                case ELSE:
                case CONTINUE:
                case FAIL:
                case ISOLATION:
                case SLEEP:
                case CONSOLE:
                case BLOB:
                case SHARED:
                case DEFAULT_:
                case SEQUENCE:
                case START:
                case OPTIONAL:
                case COUNT:
                case HA:
                case STATUS:
                case SERVER:
                case SYNC:
                case EXISTS:
                case MOVE:
                case DEPTH_ALIAS:
                case PATH_ALIAS:
                case IDENTIFIED:
                case ROLE:
                case USER:
                case USERS:
                case RID:
                case SECURITY:
                case POLICY:
                case DEFAULTCLUSTER:
                case SYSTEM:
                case IN:
                case KEY:
                case IDENTIFIER:
                case QUOTED_IDENTIFIER:
                  {
                    lastTarget = Identifier();
                    break;
                  }
                case CLUSTER_IDENTIFIER:
                case CLUSTER_NUMBER_IDENTIFIER:
                  {
                    lastTarget = Cluster();
                    break;
                  }
                default:
                  jj_la1[309] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              jjtn000.addTarget(lastTarget);
            }
            jj_consume_token(RBRACKET);
            break;
          }
        default:
          jj_la1[310] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateClassStatement CreateClassStatement() throws ParseException {
    /*@bgen(jjtree) CreateClassStatement */
    OCreateClassStatement jjtn000 = new OCreateClassStatement(JJTCREATECLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    OInteger lastInteger;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(CLASS);
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(NOT);
            jj_consume_token(EXISTS);
            jjtn000.ifNotExists = true;
            break;
          }
        default:
          jj_la1[311] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case EXTENDS:
          {
            jj_consume_token(EXTENDS);
            lastIdentifier = Identifier();
            jjtn000.superclasses = new ArrayList<OIdentifier>();
            jjtn000.addSuperclass(lastIdentifier);
            label_46:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[312] = jj_gen;
                  break label_46;
              }
              jj_consume_token(COMMA);
              lastIdentifier = Identifier();
              jjtn000.addSuperclass(lastIdentifier);
            }
            break;
          }
        default:
          jj_la1[313] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CLUSTER:
          {
            jj_consume_token(CLUSTER);
            lastInteger = Integer();
            jjtn000.clusters = new ArrayList<OInteger>();
            jjtn000.addCluster(lastInteger);
            label_47:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[314] = jj_gen;
                  break label_47;
              }
              jj_consume_token(COMMA);
              lastInteger = Integer();
              jjtn000.addCluster(lastInteger);
            }
            break;
          }
        default:
          jj_la1[315] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CLUSTERS:
          {
            jj_consume_token(CLUSTERS);
            jjtn000.totalClusterNo = Integer();
            break;
          }
        default:
          jj_la1[316] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ABSTRACT:
          {
            jj_consume_token(ABSTRACT);
            jjtn000.abstractClass = true;
            break;
          }
        default:
          jj_la1[317] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateViewStatement CreateViewStatement() throws ParseException {
    /*@bgen(jjtree) CreateViewStatement */
    OCreateViewStatement jjtn000 = new OCreateViewStatement(JJTCREATEVIEWSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(VIEW);
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(NOT);
            jj_consume_token(EXISTS);
            jjtn000.ifNotExists = true;
            break;
          }
        default:
          jj_la1[318] = jj_gen;
          ;
      }
      jj_consume_token(FROM);
      jj_consume_token(LPAREN);
      jjtn000.statement = QueryStatement();
      jj_consume_token(RPAREN);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case METADATA:
          {
            jj_consume_token(METADATA);
            jjtn000.metadata = Json();
            break;
          }
        default:
          jj_la1[319] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.checkMetadataSyntax();
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAlterClassStatement AlterClassStatement() throws ParseException {
    /*@bgen(jjtree) AlterClassStatement */
    OAlterClassStatement jjtn000 = new OAlterClassStatement(JJTALTERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    OInteger lastInteger;
    Token lastToken;
    try {
      jj_consume_token(ALTER);
      jj_consume_token(CLASS);
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NAME:
          {
            jj_consume_token(NAME);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.NAME;
            jjtn000.identifierValue = Identifier();
            break;
          }
        case SHORTNAME:
          {
            jj_consume_token(SHORTNAME);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SHORTNAME;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.identifierValue = Identifier();
                  break;
                }
              case NULL:
                {
                  jj_consume_token(NULL);
                  break;
                }
              default:
                jj_la1[320] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case SUPERCLASS:
          {
            jj_consume_token(SUPERCLASS);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SUPERCLASS;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case PLUS:
              case MINUS:
                {
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case PLUS:
                      {
                        jj_consume_token(PLUS);
                        jjtn000.add = true;
                        break;
                      }
                    case MINUS:
                      {
                        jj_consume_token(MINUS);
                        jjtn000.remove = true;
                        break;
                      }
                    default:
                      jj_la1[321] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                  }
                  break;
                }
              default:
                jj_la1[322] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.identifierValue = Identifier();
                  break;
                }
              case NULL:
                {
                  jj_consume_token(NULL);
                  jjtn000.identifierValue = null;
                  break;
                }
              default:
                jj_la1[323] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case SUPERCLASSES:
          {
            jj_consume_token(SUPERCLASSES);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SUPERCLASSES;
            jjtn000.identifierListValue = new ArrayList<OIdentifier>();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  lastIdentifier = Identifier();
                  jjtn000.addIdentifierListValue(lastIdentifier);
                  label_48:
                  while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                      case COMMA:
                        {
                          ;
                          break;
                        }
                      default:
                        jj_la1[324] = jj_gen;
                        break label_48;
                    }
                    jj_consume_token(COMMA);
                    lastIdentifier = Identifier();
                    jjtn000.addIdentifierListValue(lastIdentifier);
                  }
                  break;
                }
              case NULL:
                {
                  jj_consume_token(NULL);
                  jjtn000.identifierListValue = null;
                  break;
                }
              default:
                jj_la1[325] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case OVERSIZE:
          {
            jj_consume_token(OVERSIZE);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.OVERSIZE;
            jjtn000.numberValue = Number();
            break;
          }
        case STRICTMODE:
          {
            jj_consume_token(STRICTMODE);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.STRICTMODE;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TRUE:
                {
                  jj_consume_token(TRUE);
                  jjtn000.booleanValue = true;
                  break;
                }
              case FALSE:
                {
                  jj_consume_token(FALSE);
                  jjtn000.booleanValue = false;
                  break;
                }
              default:
                jj_la1[326] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case ADDCLUSTER:
          {
            jj_consume_token(ADDCLUSTER);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ADDCLUSTER;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.identifierValue = Identifier();
                  break;
                }
              case INTEGER_LITERAL:
              case MINUS:
                {
                  jjtn000.numberValue = Integer();
                  break;
                }
              default:
                jj_la1[327] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case REMOVECLUSTER:
          {
            jj_consume_token(REMOVECLUSTER);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.REMOVECLUSTER;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.identifierValue = Identifier();
                  break;
                }
              case INTEGER_LITERAL:
              case MINUS:
                {
                  jjtn000.numberValue = Integer();
                  break;
                }
              default:
                jj_la1[328] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case CUSTOM:
          {
            jj_consume_token(CUSTOM);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.CUSTOM;
            jjtn000.customKey = Identifier();
            jj_consume_token(EQ);
            jjtn000.customValue = Expression();
            break;
          }
        case ABSTRACT:
          {
            jj_consume_token(ABSTRACT);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ABSTRACT;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TRUE:
                {
                  jj_consume_token(TRUE);
                  jjtn000.booleanValue = true;
                  break;
                }
              case FALSE:
                {
                  jj_consume_token(FALSE);
                  jjtn000.booleanValue = false;
                  break;
                }
              default:
                jj_la1[329] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case CLUSTERSELECTION:
          {
            jj_consume_token(CLUSTERSELECTION);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES
                    .CLUSTERSELECTION;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.identifierValue = Identifier();
                  break;
                }
              case 274:
                {
                  jj_consume_token(274);
                  jjtn000.customString = "round-robin";
                  break;
                }
              case RID_STRING:
              case STRING_LITERAL:
                {
                  jjtn000.customString = String();
                  jjtn000.customString =
                      jjtn000.customString.substring(1, jjtn000.customString.length() - 1);
                  break;
                }
              default:
                jj_la1[330] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case DESCRIPTION:
          {
            jj_consume_token(DESCRIPTION);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.DESCRIPTION;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.identifierValue = Identifier();
                  break;
                }
              case NULL:
                {
                  jj_consume_token(NULL);
                  break;
                }
              default:
                jj_la1[331] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case ENCRYPTION:
          {
            jj_consume_token(ENCRYPTION);
            jjtn000.property =
                com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ENCRYPTION;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.identifierValue = Identifier();
                  break;
                }
              case NULL:
                {
                  jj_consume_token(NULL);
                  break;
                }
              default:
                jj_la1[332] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        case DEFAULTCLUSTER:
          {
            jj_consume_token(DEFAULTCLUSTER);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case INTEGER_LITERAL:
              case MINUS:
                {
                  jjtn000.defaultClusterId = Integer();
                  break;
                }
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  jjtn000.defaultClusterName = Identifier();
                  break;
                }
              default:
                jj_la1[333] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[334] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNSAFE:
          {
            jj_consume_token(UNSAFE);
            jjtn000.unsafe = true;
            break;
          }
        default:
          jj_la1[335] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODropClassStatement DropClassStatement() throws ParseException {
    /*@bgen(jjtree) DropClassStatement */
    ODropClassStatement jjtn000 = new ODropClassStatement(JJTDROPCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DROP);
      jj_consume_token(CLASS);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.name = Identifier();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.nameParam = InputParameter();
            break;
          }
        default:
          jj_la1[336] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(EXISTS);
            jjtn000.ifExists = true;
            break;
          }
        default:
          jj_la1[337] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNSAFE:
          {
            jj_consume_token(UNSAFE);
            jjtn000.unsafe = true;
            break;
          }
        default:
          jj_la1[338] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODropViewStatement DropViewStatement() throws ParseException {
    /*@bgen(jjtree) DropViewStatement */
    ODropViewStatement jjtn000 = new ODropViewStatement(JJTDROPVIEWSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DROP);
      jj_consume_token(VIEW);
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(EXISTS);
            jjtn000.ifExists = true;
            break;
          }
        default:
          jj_la1[339] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final void IfNotExists() throws ParseException {
    /*@bgen(jjtree) IfNotExists */
    OIfNotExists jjtn000 = new OIfNotExists(JJTIFNOTEXISTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final OCreatePropertyStatement CreatePropertyStatement() throws ParseException {
    /*@bgen(jjtree) CreatePropertyStatement */
    OCreatePropertyStatement jjtn000 = new OCreatePropertyStatement(JJTCREATEPROPERTYSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OCreatePropertyAttributeStatement lastAttribute;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(PROPERTY);
      jjtn000.className = Identifier();
      jj_consume_token(DOT);
      jjtn000.propertyName = Identifier();
      if (jj_2_156(3)) {
        IfNotExists();
        jjtn000.ifNotExists = true;
      } else {
        ;
      }
      jjtn000.propertyType = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.linkedType = Identifier();
            break;
          }
        default:
          jj_la1[340] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LPAREN:
          {
            jj_consume_token(LPAREN);
            lastAttribute = CreatePropertyAttributeStatement();
            jjtn000.addAttribute(lastAttribute);
            label_49:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[341] = jj_gen;
                  break label_49;
              }
              jj_consume_token(COMMA);
              lastAttribute = CreatePropertyAttributeStatement();
              jjtn000.addAttribute(lastAttribute);
            }
            jj_consume_token(RPAREN);
            break;
          }
        default:
          jj_la1[342] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case UNSAFE:
          {
            jj_consume_token(UNSAFE);
            jjtn000.unsafe = true;
            break;
          }
        default:
          jj_la1[343] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreatePropertyAttributeStatement CreatePropertyAttributeStatement()
      throws ParseException {
    /*@bgen(jjtree) CreatePropertyAttributeStatement */
    OCreatePropertyAttributeStatement jjtn000 =
        new OCreatePropertyAttributeStatement(JJTCREATEPROPERTYATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jjtn000.settingName = Identifier();
      if (getToken(1).kind != COMMA && getToken(1).kind != RPAREN) {
        jjtn000.settingValue = Expression();
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAlterPropertyStatement AlterPropertyStatement() throws ParseException {
    /*@bgen(jjtree) AlterPropertyStatement */
    OAlterPropertyStatement jjtn000 = new OAlterPropertyStatement(JJTALTERPROPERTYSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ALTER);
      jj_consume_token(PROPERTY);
      jjtn000.className = Identifier();
      jj_consume_token(DOT);
      jjtn000.propertyName = Identifier();
      if (jj_2_157(3)) {
        jj_consume_token(CUSTOM);
        jjtn000.customPropertyName = Identifier();
        jj_consume_token(EQ);
        jjtn000.customPropertyValue = Expression();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              jjtn000.settingName = Identifier();
              jjtn000.settingValue = Expression();
              break;
            }
          default:
            jj_la1[344] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODropPropertyStatement DropPropertyStatement() throws ParseException {
    /*@bgen(jjtree) DropPropertyStatement */
    ODropPropertyStatement jjtn000 = new ODropPropertyStatement(JJTDROPPROPERTYSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DROP);
      jj_consume_token(PROPERTY);
      jjtn000.className = Identifier();
      jj_consume_token(DOT);
      jjtn000.propertyName = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(EXISTS);
            jjtn000.ifExists = true;
            break;
          }
        default:
          jj_la1[345] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case FORCE:
          {
            jj_consume_token(FORCE);
            jjtn000.force = true;
            break;
          }
        default:
          jj_la1[346] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateIndexStatement CreateIndexStatement() throws ParseException {
    /*@bgen(jjtree) CreateIndexStatement */
    OCreateIndexStatement jjtn000 = new OCreateIndexStatement(JJTCREATEINDEXSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OCreateIndexStatement.Property lastProperty;
    OIdentifier lastIdentifier;
    ORecordAttribute lastRecordAttr;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(INDEX);
      jjtn000.name = IndexName();
      if (jj_2_159(4)) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case IF:
            {
              jj_consume_token(IF);
              jj_consume_token(NOT);
              jj_consume_token(EXISTS);
              jjtn000.ifNotExists = true;
              break;
            }
          default:
            jj_la1[347] = jj_gen;
            ;
        }
        jj_consume_token(ON);
        jjtn000.className = Identifier();
        jj_consume_token(LPAREN);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              lastIdentifier = Identifier();
              lastProperty = new OCreateIndexStatement.Property();
              lastProperty.name = lastIdentifier;
              jjtn000.addProperty(lastProperty);
              break;
            }
          case RECORD_ATTRIBUTE:
            {
              lastRecordAttr = RecordAttribute();
              lastProperty = new OCreateIndexStatement.Property();
              lastProperty.recordAttribute = lastRecordAttr;
              jjtn000.addProperty(lastProperty);
              break;
            }
          default:
            jj_la1[348] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case BY:
            {
              jj_consume_token(BY);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case KEY:
                  {
                    jj_consume_token(KEY);
                    lastProperty.byKey = true;
                    break;
                  }
                case VALUE:
                  {
                    jj_consume_token(VALUE);
                    lastProperty.byValue = true;
                    break;
                  }
                default:
                  jj_la1[349] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              break;
            }
          default:
            jj_la1[350] = jj_gen;
            ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COLLATE:
            {
              jj_consume_token(COLLATE);
              lastProperty.collate = Identifier();
              break;
            }
          default:
            jj_la1[351] = jj_gen;
            ;
        }
        label_50:
        while (true) {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COMMA:
              {
                ;
                break;
              }
            default:
              jj_la1[352] = jj_gen;
              break label_50;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case TO:
            case VALUE:
            case VALUES:
            case SET:
            case ADD:
            case PUT:
            case MERGE:
            case CONTENT:
            case REMOVE:
            case ORDER:
            case GROUP:
            case OFFSET:
            case RECORD:
            case CACHE:
            case CYCLE:
            case NOLIMIT:
            case NOCYCLE:
            case LUCENE:
            case NEAR:
            case WITHIN:
            case MINDEPTH:
            case CLASS:
            case SUPERCLASS:
            case CLASSES:
            case SUPERCLASSES:
            case VIEW:
            case UPDATABLE:
            case EXCEPTION:
            case PROFILE:
            case STORAGE:
            case ON:
            case OFF:
            case TRUNCATE:
            case FIND:
            case REFERENCES:
            case EXTENDS:
            case CLUSTERS:
            case ABSTRACT:
            case ALTER:
            case NAME:
            case SHORTNAME:
            case OVERSIZE:
            case STRICTMODE:
            case ADDCLUSTER:
            case REMOVECLUSTER:
            case CUSTOM:
            case CLUSTERSELECTION:
            case DESCRIPTION:
            case ENCRYPTION:
            case DROP:
            case PROPERTY:
            case FORCE:
            case METADATA:
            case INDEX:
            case COLLATE:
            case ENGINE:
            case REBUILD:
            case ID:
            case DATABASE:
            case OPTIMIZE:
            case LINK:
            case TYPE:
            case INVERSE:
            case EXPLAIN:
            case GRANT:
            case REVOKE:
            case READ:
            case EXECUTE:
            case ALL:
            case NONE:
            case FUNCTION:
            case PARAMETERS:
            case IDEMPOTENT:
            case LANGUAGE:
            case BEGIN:
            case COMMIT:
            case ROLLBACK:
            case IF:
            case ELSE:
            case CONTINUE:
            case FAIL:
            case ISOLATION:
            case SLEEP:
            case CONSOLE:
            case BLOB:
            case SHARED:
            case DEFAULT_:
            case SEQUENCE:
            case START:
            case OPTIONAL:
            case COUNT:
            case HA:
            case STATUS:
            case SERVER:
            case SYNC:
            case EXISTS:
            case MOVE:
            case DEPTH_ALIAS:
            case PATH_ALIAS:
            case IDENTIFIED:
            case ROLE:
            case USER:
            case USERS:
            case RID:
            case SECURITY:
            case POLICY:
            case DEFAULTCLUSTER:
            case SYSTEM:
            case IN:
            case KEY:
            case IDENTIFIER:
            case QUOTED_IDENTIFIER:
              {
                lastIdentifier = Identifier();
                lastProperty = new OCreateIndexStatement.Property();
                lastProperty.name = lastIdentifier;
                jjtn000.addProperty(lastProperty);
                break;
              }
            case RECORD_ATTRIBUTE:
              {
                lastRecordAttr = RecordAttribute();
                lastProperty = new OCreateIndexStatement.Property();
                lastProperty.recordAttribute = lastRecordAttr;
                jjtn000.addProperty(lastProperty);
                break;
              }
            default:
              jj_la1[353] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case BY:
              {
                jj_consume_token(BY);
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case KEY:
                    {
                      jj_consume_token(KEY);
                      lastProperty.byKey = true;
                      break;
                    }
                  case VALUE:
                    {
                      jj_consume_token(VALUE);
                      lastProperty.byValue = true;
                      break;
                    }
                  default:
                    jj_la1[354] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
              }
            default:
              jj_la1[355] = jj_gen;
              ;
          }
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case COLLATE:
              {
                jj_consume_token(COLLATE);
                lastProperty.collate = Identifier();
                break;
              }
            default:
              jj_la1[356] = jj_gen;
              ;
          }
        }
        jj_consume_token(RPAREN);
        jjtn000.type = Identifier();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              if (jj_2_158(3)) {
                jj_consume_token(IF);
                jj_consume_token(NOT);
                jj_consume_token(EXISTS);
                jjtn000.ifNotExists = true;
                jjtn000.type = Identifier();
              } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case TO:
                  case VALUE:
                  case VALUES:
                  case SET:
                  case ADD:
                  case PUT:
                  case MERGE:
                  case CONTENT:
                  case REMOVE:
                  case ORDER:
                  case GROUP:
                  case OFFSET:
                  case RECORD:
                  case CACHE:
                  case CYCLE:
                  case NOLIMIT:
                  case NOCYCLE:
                  case LUCENE:
                  case NEAR:
                  case WITHIN:
                  case MINDEPTH:
                  case CLASS:
                  case SUPERCLASS:
                  case CLASSES:
                  case SUPERCLASSES:
                  case VIEW:
                  case UPDATABLE:
                  case EXCEPTION:
                  case PROFILE:
                  case STORAGE:
                  case ON:
                  case OFF:
                  case TRUNCATE:
                  case FIND:
                  case REFERENCES:
                  case EXTENDS:
                  case CLUSTERS:
                  case ABSTRACT:
                  case ALTER:
                  case NAME:
                  case SHORTNAME:
                  case OVERSIZE:
                  case STRICTMODE:
                  case ADDCLUSTER:
                  case REMOVECLUSTER:
                  case CUSTOM:
                  case CLUSTERSELECTION:
                  case DESCRIPTION:
                  case ENCRYPTION:
                  case DROP:
                  case PROPERTY:
                  case FORCE:
                  case METADATA:
                  case INDEX:
                  case COLLATE:
                  case ENGINE:
                  case REBUILD:
                  case ID:
                  case DATABASE:
                  case OPTIMIZE:
                  case LINK:
                  case TYPE:
                  case INVERSE:
                  case EXPLAIN:
                  case GRANT:
                  case REVOKE:
                  case READ:
                  case EXECUTE:
                  case ALL:
                  case NONE:
                  case FUNCTION:
                  case PARAMETERS:
                  case IDEMPOTENT:
                  case LANGUAGE:
                  case BEGIN:
                  case COMMIT:
                  case ROLLBACK:
                  case IF:
                  case ELSE:
                  case CONTINUE:
                  case FAIL:
                  case ISOLATION:
                  case SLEEP:
                  case CONSOLE:
                  case BLOB:
                  case SHARED:
                  case DEFAULT_:
                  case SEQUENCE:
                  case START:
                  case OPTIONAL:
                  case COUNT:
                  case HA:
                  case STATUS:
                  case SERVER:
                  case SYNC:
                  case EXISTS:
                  case MOVE:
                  case DEPTH_ALIAS:
                  case PATH_ALIAS:
                  case IDENTIFIED:
                  case ROLE:
                  case USER:
                  case USERS:
                  case RID:
                  case SECURITY:
                  case POLICY:
                  case DEFAULTCLUSTER:
                  case SYSTEM:
                  case IN:
                  case KEY:
                  case IDENTIFIER:
                  case QUOTED_IDENTIFIER:
                    {
                      jjtn000.type = Identifier();
                      break;
                    }
                  default:
                    jj_la1[357] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
              }
              break;
            }
          default:
            jj_la1[358] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      if (jj_2_162(2)) {
        jj_consume_token(ENGINE);
        jjtn000.engine = Identifier();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              if (jj_2_160(2)) {
                jj_consume_token(METADATA);
                jjtn000.metadata = Json();
              } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case TO:
                  case VALUE:
                  case VALUES:
                  case SET:
                  case ADD:
                  case PUT:
                  case MERGE:
                  case CONTENT:
                  case REMOVE:
                  case ORDER:
                  case GROUP:
                  case OFFSET:
                  case RECORD:
                  case CACHE:
                  case CYCLE:
                  case NOLIMIT:
                  case NOCYCLE:
                  case LUCENE:
                  case NEAR:
                  case WITHIN:
                  case MINDEPTH:
                  case CLASS:
                  case SUPERCLASS:
                  case CLASSES:
                  case SUPERCLASSES:
                  case VIEW:
                  case UPDATABLE:
                  case EXCEPTION:
                  case PROFILE:
                  case STORAGE:
                  case ON:
                  case OFF:
                  case TRUNCATE:
                  case FIND:
                  case REFERENCES:
                  case EXTENDS:
                  case CLUSTERS:
                  case ABSTRACT:
                  case ALTER:
                  case NAME:
                  case SHORTNAME:
                  case OVERSIZE:
                  case STRICTMODE:
                  case ADDCLUSTER:
                  case REMOVECLUSTER:
                  case CUSTOM:
                  case CLUSTERSELECTION:
                  case DESCRIPTION:
                  case ENCRYPTION:
                  case DROP:
                  case PROPERTY:
                  case FORCE:
                  case METADATA:
                  case INDEX:
                  case COLLATE:
                  case ENGINE:
                  case REBUILD:
                  case ID:
                  case DATABASE:
                  case OPTIMIZE:
                  case LINK:
                  case TYPE:
                  case INVERSE:
                  case EXPLAIN:
                  case GRANT:
                  case REVOKE:
                  case READ:
                  case EXECUTE:
                  case ALL:
                  case NONE:
                  case FUNCTION:
                  case PARAMETERS:
                  case IDEMPOTENT:
                  case LANGUAGE:
                  case BEGIN:
                  case COMMIT:
                  case ROLLBACK:
                  case IF:
                  case ELSE:
                  case CONTINUE:
                  case FAIL:
                  case ISOLATION:
                  case SLEEP:
                  case CONSOLE:
                  case BLOB:
                  case SHARED:
                  case DEFAULT_:
                  case SEQUENCE:
                  case START:
                  case OPTIONAL:
                  case COUNT:
                  case HA:
                  case STATUS:
                  case SERVER:
                  case SYNC:
                  case EXISTS:
                  case MOVE:
                  case DEPTH_ALIAS:
                  case PATH_ALIAS:
                  case IDENTIFIED:
                  case ROLE:
                  case USER:
                  case USERS:
                  case RID:
                  case SECURITY:
                  case POLICY:
                  case DEFAULTCLUSTER:
                  case SYSTEM:
                  case IN:
                  case KEY:
                  case IDENTIFIER:
                  case QUOTED_IDENTIFIER:
                    {
                      lastIdentifier = Identifier();
                      jjtn000.addKeyType(lastIdentifier);
                      label_51:
                      while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                          case COMMA:
                            {
                              ;
                              break;
                            }
                          default:
                            jj_la1[359] = jj_gen;
                            break label_51;
                        }
                        jj_consume_token(COMMA);
                        lastIdentifier = Identifier();
                        jjtn000.addKeyType(lastIdentifier);
                      }
                      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case METADATA:
                          {
                            jj_consume_token(METADATA);
                            jjtn000.metadata = Json();
                            break;
                          }
                        default:
                          jj_la1[360] = jj_gen;
                          ;
                      }
                      break;
                    }
                  default:
                    jj_la1[361] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
              }
              break;
            }
          default:
            jj_la1[362] = jj_gen;
            ;
        }
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              if (jj_2_161(2)) {
                jj_consume_token(METADATA);
                jjtn000.metadata = Json();
              } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case TO:
                  case VALUE:
                  case VALUES:
                  case SET:
                  case ADD:
                  case PUT:
                  case MERGE:
                  case CONTENT:
                  case REMOVE:
                  case ORDER:
                  case GROUP:
                  case OFFSET:
                  case RECORD:
                  case CACHE:
                  case CYCLE:
                  case NOLIMIT:
                  case NOCYCLE:
                  case LUCENE:
                  case NEAR:
                  case WITHIN:
                  case MINDEPTH:
                  case CLASS:
                  case SUPERCLASS:
                  case CLASSES:
                  case SUPERCLASSES:
                  case VIEW:
                  case UPDATABLE:
                  case EXCEPTION:
                  case PROFILE:
                  case STORAGE:
                  case ON:
                  case OFF:
                  case TRUNCATE:
                  case FIND:
                  case REFERENCES:
                  case EXTENDS:
                  case CLUSTERS:
                  case ABSTRACT:
                  case ALTER:
                  case NAME:
                  case SHORTNAME:
                  case OVERSIZE:
                  case STRICTMODE:
                  case ADDCLUSTER:
                  case REMOVECLUSTER:
                  case CUSTOM:
                  case CLUSTERSELECTION:
                  case DESCRIPTION:
                  case ENCRYPTION:
                  case DROP:
                  case PROPERTY:
                  case FORCE:
                  case METADATA:
                  case INDEX:
                  case COLLATE:
                  case ENGINE:
                  case REBUILD:
                  case ID:
                  case DATABASE:
                  case OPTIMIZE:
                  case LINK:
                  case TYPE:
                  case INVERSE:
                  case EXPLAIN:
                  case GRANT:
                  case REVOKE:
                  case READ:
                  case EXECUTE:
                  case ALL:
                  case NONE:
                  case FUNCTION:
                  case PARAMETERS:
                  case IDEMPOTENT:
                  case LANGUAGE:
                  case BEGIN:
                  case COMMIT:
                  case ROLLBACK:
                  case IF:
                  case ELSE:
                  case CONTINUE:
                  case FAIL:
                  case ISOLATION:
                  case SLEEP:
                  case CONSOLE:
                  case BLOB:
                  case SHARED:
                  case DEFAULT_:
                  case SEQUENCE:
                  case START:
                  case OPTIONAL:
                  case COUNT:
                  case HA:
                  case STATUS:
                  case SERVER:
                  case SYNC:
                  case EXISTS:
                  case MOVE:
                  case DEPTH_ALIAS:
                  case PATH_ALIAS:
                  case IDENTIFIED:
                  case ROLE:
                  case USER:
                  case USERS:
                  case RID:
                  case SECURITY:
                  case POLICY:
                  case DEFAULTCLUSTER:
                  case SYSTEM:
                  case IN:
                  case KEY:
                  case IDENTIFIER:
                  case QUOTED_IDENTIFIER:
                    {
                      lastIdentifier = Identifier();
                      jjtn000.addKeyType(lastIdentifier);
                      label_52:
                      while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                          case COMMA:
                            {
                              ;
                              break;
                            }
                          default:
                            jj_la1[363] = jj_gen;
                            break label_52;
                        }
                        jj_consume_token(COMMA);
                        lastIdentifier = Identifier();
                        jjtn000.addKeyType(lastIdentifier);
                      }
                      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case METADATA:
                          {
                            jj_consume_token(METADATA);
                            jjtn000.metadata = Json();
                            break;
                          }
                        default:
                          jj_la1[364] = jj_gen;
                          ;
                      }
                      break;
                    }
                  default:
                    jj_la1[365] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
              }
              break;
            }
          default:
            jj_la1[366] = jj_gen;
            ;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ORebuildIndexStatement RebuildIndexStatement() throws ParseException {
    /*@bgen(jjtree) RebuildIndexStatement */
    ORebuildIndexStatement jjtn000 = new ORebuildIndexStatement(JJTREBUILDINDEXSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(REBUILD);
      jj_consume_token(INDEX);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 273:
          {
            jjtn000.name = IndexName();
            break;
          }
        case STAR:
          {
            jj_consume_token(STAR);
            jjtn000.all = true;
            break;
          }
        default:
          jj_la1[367] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODropIndexStatement DropIndexStatement() throws ParseException {
    /*@bgen(jjtree) DropIndexStatement */
    ODropIndexStatement jjtn000 = new ODropIndexStatement(JJTDROPINDEXSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DROP);
      jj_consume_token(INDEX);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 273:
          {
            jjtn000.name = IndexName();
            break;
          }
        case STAR:
          {
            jj_consume_token(STAR);
            jjtn000.all = true;
            break;
          }
        default:
          jj_la1[368] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(EXISTS);
            jjtn000.ifExists = true;
            break;
          }
        default:
          jj_la1[369] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateClusterStatement CreateClusterStatement() throws ParseException {
    /*@bgen(jjtree) CreateClusterStatement */
    OCreateClusterStatement jjtn000 = new OCreateClusterStatement(JJTCREATECLUSTERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CLUSTER:
          {
            jj_consume_token(CLUSTER);
            break;
          }
        case BLOB:
          {
            jj_consume_token(BLOB);
            jj_consume_token(CLUSTER);
            jjtn000.blob = true;
            break;
          }
        default:
          jj_la1[370] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(NOT);
            jj_consume_token(EXISTS);
            jjtn000.ifNotExists = true;
            break;
          }
        default:
          jj_la1[371] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ID:
          {
            jj_consume_token(ID);
            jjtn000.id = Integer();
            break;
          }
        default:
          jj_la1[372] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAlterClusterStatement AlterClusterStatement() throws ParseException {
    /*@bgen(jjtree) AlterClusterStatement */
    OAlterClusterStatement jjtn000 = new OAlterClusterStatement(JJTALTERCLUSTERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ALTER);
      jj_consume_token(CLUSTER);
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STAR:
          {
            jj_consume_token(STAR);
            jjtn000.starred = true;
            break;
          }
        default:
          jj_la1[373] = jj_gen;
          ;
      }
      jjtn000.attributeName = Identifier();
      jjtn000.attributeValue = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODropClusterStatement DropClusterStatement() throws ParseException {
    /*@bgen(jjtree) DropClusterStatement */
    ODropClusterStatement jjtn000 = new ODropClusterStatement(JJTDROPCLUSTERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DROP);
      jj_consume_token(CLUSTER);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.name = Identifier();
            break;
          }
        case INTEGER_LITERAL:
        case MINUS:
          {
            jjtn000.id = Integer();
            break;
          }
        default:
          jj_la1[374] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(EXISTS);
            jjtn000.ifExists = true;
            break;
          }
        default:
          jj_la1[375] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAlterDatabaseStatement AlterDatabaseStatement() throws ParseException {
    /*@bgen(jjtree) AlterDatabaseStatement */
    OAlterDatabaseStatement jjtn000 = new OAlterDatabaseStatement(JJTALTERDATABASESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ALTER);
      jj_consume_token(DATABASE);
      if (jj_2_163(3)) {
        jj_consume_token(CUSTOM);
        jjtn000.customPropertyName = Identifier();
        jj_consume_token(EQ);
        jjtn000.customPropertyValue = Expression();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TO:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
            {
              jjtn000.settingName = Identifier();
              jjtn000.settingValue = Expression();
              break;
            }
          default:
            jj_la1[376] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCommandLineOption CommandLineOption() throws ParseException {
    /*@bgen(jjtree) CommandLineOption */
    OCommandLineOption jjtn000 = new OCommandLineOption(JJTCOMMANDLINEOPTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(MINUS);
      jjtn000.name = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OOptimizeDatabaseStatement OptimizeDatabaseStatement() throws ParseException {
    /*@bgen(jjtree) OptimizeDatabaseStatement */
    OOptimizeDatabaseStatement jjtn000 =
        new OOptimizeDatabaseStatement(JJTOPTIMIZEDATABASESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OCommandLineOption lastOption;
    try {
      jj_consume_token(OPTIMIZE);
      jj_consume_token(DATABASE);
      label_53:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case MINUS:
            {
              ;
              break;
            }
          default:
            jj_la1[377] = jj_gen;
            break label_53;
        }
        lastOption = CommandLineOption();
        jjtn000.addOption(lastOption);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateLinkStatement CreateLinkStatement() throws ParseException {
    /*@bgen(jjtree) CreateLinkStatement */
    OCreateLinkStatement jjtn000 = new OCreateLinkStatement(JJTCREATELINKSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(LINK);
      jjtn000.name = Identifier();
      jj_consume_token(TYPE);
      jjtn000.type = Identifier();
      jj_consume_token(FROM);
      jjtn000.sourceClass = Identifier();
      jj_consume_token(DOT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.sourceField = Identifier();
            break;
          }
        case RECORD_ATTRIBUTE:
          {
            jjtn000.sourceRecordAttr = RecordAttribute();
            break;
          }
        default:
          jj_la1[378] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jj_consume_token(TO);
      jjtn000.destClass = Identifier();
      jj_consume_token(DOT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.destField = Identifier();
            break;
          }
        case RECORD_ATTRIBUTE:
          {
            jjtn000.destRecordAttr = RecordAttribute();
            break;
          }
        default:
          jj_la1[379] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INVERSE:
          {
            jj_consume_token(INVERSE);
            jjtn000.inverse = true;
            break;
          }
        default:
          jj_la1[380] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OExplainStatement ExplainStatement() throws ParseException {
    /*@bgen(jjtree) ExplainStatement */
    OExplainStatement jjtn000 = new OExplainStatement(JJTEXPLAINSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXPLAIN);
      jjtn000.statement = StatementInternal();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OProfileStatement ProfileStatement() throws ParseException {
    /*@bgen(jjtree) ProfileStatement */
    OProfileStatement jjtn000 = new OProfileStatement(JJTPROFILESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(PROFILE);
      jjtn000.statement = StatementInternal();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OPermission Permission() throws ParseException {
    /*@bgen(jjtree) Permission */
    OPermission jjtn000 = new OPermission(JJTPERMISSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CREATE:
          {
            jj_consume_token(CREATE);
            jjtn000.permission = "CREATE";
            break;
          }
        case READ:
          {
            jj_consume_token(READ);
            jjtn000.permission = "READ";
            break;
          }
        case UPDATE:
          {
            jj_consume_token(UPDATE);
            jjtn000.permission = "UPDATE";
            break;
          }
        case DELETE:
          {
            jj_consume_token(DELETE);
            jjtn000.permission = "DELETE";
            break;
          }
        case EXECUTE:
          {
            jj_consume_token(EXECUTE);
            jjtn000.permission = "EXECUTE";
            break;
          }
        case ALL:
          {
            jj_consume_token(ALL);
            jjtn000.permission = "ALL";
            break;
          }
        case NONE:
          {
            jj_consume_token(NONE);
            jjtn000.permission = "NONE";
            break;
          }
        default:
          jj_la1[381] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OGrantStatement GrantStatement() throws ParseException {
    /*@bgen(jjtree) GrantStatement */
    OGrantStatement jjtn000 = new OGrantStatement(JJTGRANTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GRANT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case POLICY:
          {
            jj_consume_token(POLICY);
            jjtn000.policyName = Identifier();
            break;
          }
        case CREATE:
        case DELETE:
        case UPDATE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
          {
            jjtn000.permission = Permission();
            break;
          }
        default:
          jj_la1[382] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jj_consume_token(ON);
      jjtn000.securityResource = SecurityResourceSegment();
      jj_consume_token(TO);
      jjtn000.actor = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ORevokeStatement RevokeStatement() throws ParseException {
    /*@bgen(jjtree) RevokeStatement */
    ORevokeStatement jjtn000 = new ORevokeStatement(JJTREVOKESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(REVOKE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case POLICY:
          {
            jj_consume_token(POLICY);
            jjtn000.revokePolicy = true;
            break;
          }
        case CREATE:
        case DELETE:
        case UPDATE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
          {
            jjtn000.permission = Permission();
            break;
          }
        default:
          jj_la1[383] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jj_consume_token(ON);
      jjtn000.securityResource = SecurityResourceSegment();
      jj_consume_token(FROM);
      jjtn000.actor = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateFunctionStatement CreateFunctionStatement() throws ParseException {
    /*@bgen(jjtree) CreateFunctionStatement */
    OCreateFunctionStatement jjtn000 = new OCreateFunctionStatement(JJTCREATEFUNCTIONSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    OIdentifier lastIdentifier;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(FUNCTION);
      jjtn000.name = Identifier();
      jjtn000.codeQuoted = String();
      jjtn000.code = jjtn000.codeQuoted.substring(1, jjtn000.codeQuoted.length() - 1);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PARAMETERS:
          {
            jj_consume_token(PARAMETERS);
            jj_consume_token(LBRACKET);
            lastIdentifier = Identifier();
            jjtn000.parameters = new ArrayList<OIdentifier>();
            jjtn000.addParameter(lastIdentifier);
            label_54:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[384] = jj_gen;
                  break label_54;
              }
              jj_consume_token(COMMA);
              lastIdentifier = Identifier();
              jjtn000.addParameter(lastIdentifier);
            }
            jj_consume_token(RBRACKET);
            break;
          }
        default:
          jj_la1[385] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IDEMPOTENT:
          {
            jj_consume_token(IDEMPOTENT);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TRUE:
                {
                  jj_consume_token(TRUE);
                  jjtn000.idempotent = true;
                  break;
                }
              case FALSE:
                {
                  jj_consume_token(FALSE);
                  jjtn000.idempotent = false;
                  break;
                }
              default:
                jj_la1[386] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[387] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LANGUAGE:
          {
            jj_consume_token(LANGUAGE);
            jjtn000.language = Identifier();
            break;
          }
        default:
          jj_la1[388] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateSystemUserStatement CreateSystemUserStatement() throws ParseException {
    /*@bgen(jjtree) CreateSystemUserStatement */
    OCreateSystemUserStatement jjtn000 =
        new OCreateSystemUserStatement(JJTCREATESYSTEMUSERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    OIdentifier lastIdentifier;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(SYSTEM);
      jj_consume_token(USER);
      jjtn000.name = Identifier();
      jj_consume_token(IDENTIFIED);
      jj_consume_token(BY);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.passwordIdentifier = Identifier();
            break;
          }
        case RID_STRING:
        case STRING_LITERAL:
          {
            jjtn000.passwordString = String();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.passwordParam = InputParameter();
            break;
          }
        default:
          jj_la1[389] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ROLE:
          {
            jj_consume_token(ROLE);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  lastIdentifier = Identifier();
                  jjtn000.addRole(lastIdentifier);
                  break;
                }
              case LBRACKET:
                {
                  jj_consume_token(LBRACKET);
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case TO:
                    case VALUE:
                    case VALUES:
                    case SET:
                    case ADD:
                    case PUT:
                    case MERGE:
                    case CONTENT:
                    case REMOVE:
                    case ORDER:
                    case GROUP:
                    case OFFSET:
                    case RECORD:
                    case CACHE:
                    case CYCLE:
                    case NOLIMIT:
                    case NOCYCLE:
                    case LUCENE:
                    case NEAR:
                    case WITHIN:
                    case MINDEPTH:
                    case CLASS:
                    case SUPERCLASS:
                    case CLASSES:
                    case SUPERCLASSES:
                    case VIEW:
                    case UPDATABLE:
                    case EXCEPTION:
                    case PROFILE:
                    case STORAGE:
                    case ON:
                    case OFF:
                    case TRUNCATE:
                    case FIND:
                    case REFERENCES:
                    case EXTENDS:
                    case CLUSTERS:
                    case ABSTRACT:
                    case ALTER:
                    case NAME:
                    case SHORTNAME:
                    case OVERSIZE:
                    case STRICTMODE:
                    case ADDCLUSTER:
                    case REMOVECLUSTER:
                    case CUSTOM:
                    case CLUSTERSELECTION:
                    case DESCRIPTION:
                    case ENCRYPTION:
                    case DROP:
                    case PROPERTY:
                    case FORCE:
                    case METADATA:
                    case INDEX:
                    case COLLATE:
                    case ENGINE:
                    case REBUILD:
                    case ID:
                    case DATABASE:
                    case OPTIMIZE:
                    case LINK:
                    case TYPE:
                    case INVERSE:
                    case EXPLAIN:
                    case GRANT:
                    case REVOKE:
                    case READ:
                    case EXECUTE:
                    case ALL:
                    case NONE:
                    case FUNCTION:
                    case PARAMETERS:
                    case IDEMPOTENT:
                    case LANGUAGE:
                    case BEGIN:
                    case COMMIT:
                    case ROLLBACK:
                    case IF:
                    case ELSE:
                    case CONTINUE:
                    case FAIL:
                    case ISOLATION:
                    case SLEEP:
                    case CONSOLE:
                    case BLOB:
                    case SHARED:
                    case DEFAULT_:
                    case SEQUENCE:
                    case START:
                    case OPTIONAL:
                    case COUNT:
                    case HA:
                    case STATUS:
                    case SERVER:
                    case SYNC:
                    case EXISTS:
                    case MOVE:
                    case DEPTH_ALIAS:
                    case PATH_ALIAS:
                    case IDENTIFIED:
                    case ROLE:
                    case USER:
                    case USERS:
                    case RID:
                    case SECURITY:
                    case POLICY:
                    case DEFAULTCLUSTER:
                    case SYSTEM:
                    case IN:
                    case KEY:
                    case IDENTIFIER:
                    case QUOTED_IDENTIFIER:
                      {
                        lastIdentifier = Identifier();
                        jjtn000.addRole(lastIdentifier);
                        label_55:
                        while (true) {
                          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case COMMA:
                              {
                                ;
                                break;
                              }
                            default:
                              jj_la1[390] = jj_gen;
                              break label_55;
                          }
                          jj_consume_token(COMMA);
                          lastIdentifier = Identifier();
                          jjtn000.addRole(lastIdentifier);
                        }
                        break;
                      }
                    default:
                      jj_la1[391] = jj_gen;
                      ;
                  }
                  jj_consume_token(RBRACKET);
                  break;
                }
              default:
                jj_la1[392] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[393] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OExistsSystemUserStatement ExistsSystemUserStatement() throws ParseException {
    /*@bgen(jjtree) ExistsSystemUserStatement */
    OExistsSystemUserStatement jjtn000 =
        new OExistsSystemUserStatement(JJTEXISTSSYSTEMUSERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXISTS);
      jj_consume_token(SYSTEM);
      jj_consume_token(USER);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.name = Identifier();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.nameParam = InputParameter();
            break;
          }
        default:
          jj_la1[394] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateUserStatement CreateUserStatement() throws ParseException {
    /*@bgen(jjtree) CreateUserStatement */
    OCreateUserStatement jjtn000 = new OCreateUserStatement(JJTCREATEUSERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    OIdentifier lastIdentifier;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(USER);
      jjtn000.name = Identifier();
      jj_consume_token(IDENTIFIED);
      jj_consume_token(BY);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.passwordIdentifier = Identifier();
            break;
          }
        case RID_STRING:
        case STRING_LITERAL:
          {
            jjtn000.passwordString = String();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.passwordParam = InputParameter();
            break;
          }
        default:
          jj_la1[395] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ROLE:
          {
            jj_consume_token(ROLE);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  lastIdentifier = Identifier();
                  jjtn000.addRole(lastIdentifier);
                  break;
                }
              case LBRACKET:
                {
                  jj_consume_token(LBRACKET);
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case TO:
                    case VALUE:
                    case VALUES:
                    case SET:
                    case ADD:
                    case PUT:
                    case MERGE:
                    case CONTENT:
                    case REMOVE:
                    case ORDER:
                    case GROUP:
                    case OFFSET:
                    case RECORD:
                    case CACHE:
                    case CYCLE:
                    case NOLIMIT:
                    case NOCYCLE:
                    case LUCENE:
                    case NEAR:
                    case WITHIN:
                    case MINDEPTH:
                    case CLASS:
                    case SUPERCLASS:
                    case CLASSES:
                    case SUPERCLASSES:
                    case VIEW:
                    case UPDATABLE:
                    case EXCEPTION:
                    case PROFILE:
                    case STORAGE:
                    case ON:
                    case OFF:
                    case TRUNCATE:
                    case FIND:
                    case REFERENCES:
                    case EXTENDS:
                    case CLUSTERS:
                    case ABSTRACT:
                    case ALTER:
                    case NAME:
                    case SHORTNAME:
                    case OVERSIZE:
                    case STRICTMODE:
                    case ADDCLUSTER:
                    case REMOVECLUSTER:
                    case CUSTOM:
                    case CLUSTERSELECTION:
                    case DESCRIPTION:
                    case ENCRYPTION:
                    case DROP:
                    case PROPERTY:
                    case FORCE:
                    case METADATA:
                    case INDEX:
                    case COLLATE:
                    case ENGINE:
                    case REBUILD:
                    case ID:
                    case DATABASE:
                    case OPTIMIZE:
                    case LINK:
                    case TYPE:
                    case INVERSE:
                    case EXPLAIN:
                    case GRANT:
                    case REVOKE:
                    case READ:
                    case EXECUTE:
                    case ALL:
                    case NONE:
                    case FUNCTION:
                    case PARAMETERS:
                    case IDEMPOTENT:
                    case LANGUAGE:
                    case BEGIN:
                    case COMMIT:
                    case ROLLBACK:
                    case IF:
                    case ELSE:
                    case CONTINUE:
                    case FAIL:
                    case ISOLATION:
                    case SLEEP:
                    case CONSOLE:
                    case BLOB:
                    case SHARED:
                    case DEFAULT_:
                    case SEQUENCE:
                    case START:
                    case OPTIONAL:
                    case COUNT:
                    case HA:
                    case STATUS:
                    case SERVER:
                    case SYNC:
                    case EXISTS:
                    case MOVE:
                    case DEPTH_ALIAS:
                    case PATH_ALIAS:
                    case IDENTIFIED:
                    case ROLE:
                    case USER:
                    case USERS:
                    case RID:
                    case SECURITY:
                    case POLICY:
                    case DEFAULTCLUSTER:
                    case SYSTEM:
                    case IN:
                    case KEY:
                    case IDENTIFIER:
                    case QUOTED_IDENTIFIER:
                      {
                        lastIdentifier = Identifier();
                        jjtn000.addRole(lastIdentifier);
                        label_56:
                        while (true) {
                          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case COMMA:
                              {
                                ;
                                break;
                              }
                            default:
                              jj_la1[396] = jj_gen;
                              break label_56;
                          }
                          jj_consume_token(COMMA);
                          lastIdentifier = Identifier();
                          jjtn000.addRole(lastIdentifier);
                        }
                        break;
                      }
                    default:
                      jj_la1[397] = jj_gen;
                      ;
                  }
                  jj_consume_token(RBRACKET);
                  break;
                }
              default:
                jj_la1[398] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[399] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODropUserStatement DropUserStatement() throws ParseException {
    /*@bgen(jjtree) DropUserStatement */
    ODropUserStatement jjtn000 = new ODropUserStatement(JJTDROPUSERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      jj_consume_token(DROP);
      jj_consume_token(USER);
      jjtn000.name = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAlterRoleStatement AlterRoleStatement() throws ParseException {
    /*@bgen(jjtree) AlterRoleStatement */
    OAlterRoleStatement jjtn000 = new OAlterRoleStatement(JJTALTERROLESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OSecurityResourceSegment lastSecurityResource;
    OIdentifier lastPolicy;
    try {
      jj_consume_token(ALTER);
      jj_consume_token(ROLE);
      jjtn000.name = Identifier();
      label_57:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SET:
            {
              jj_consume_token(SET);
              jj_consume_token(POLICY);
              lastPolicy = Identifier();
              jj_consume_token(ON);
              lastSecurityResource = SecurityResourceSegment();
              jjtn000.addOperation(
                  new com.orientechnologies.orient.core.sql.parser.OAlterRoleStatement.Op(
                      com.orientechnologies.orient.core.sql.parser.OAlterRoleStatement.Op.TYPE_ADD,
                      lastSecurityResource,
                      lastPolicy));
              break;
            }
          case REMOVE:
            {
              jj_consume_token(REMOVE);
              jj_consume_token(POLICY);
              jj_consume_token(ON);
              lastSecurityResource = SecurityResourceSegment();
              jjtn000.addOperation(
                  new com.orientechnologies.orient.core.sql.parser.OAlterRoleStatement.Op(
                      com.orientechnologies.orient.core.sql.parser.OAlterRoleStatement.Op
                          .TYPE_REMOVE,
                      lastSecurityResource,
                      null));
              break;
            }
          default:
            jj_la1[400] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SET:
          case REMOVE:
            {
              ;
              break;
            }
          default:
            jj_la1[401] = jj_gen;
            break label_57;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAlterSystemRoleStatement AlterSystemRoleStatement() throws ParseException {
    /*@bgen(jjtree) AlterSystemRoleStatement */
    OAlterSystemRoleStatement jjtn000 = new OAlterSystemRoleStatement(JJTALTERSYSTEMROLESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OSecurityResourceSegment lastSecurityResource;
    OIdentifier lastPolicy;
    try {
      jj_consume_token(ALTER);
      jj_consume_token(SYSTEM);
      jj_consume_token(ROLE);
      jjtn000.name = Identifier();
      label_58:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SET:
            {
              jj_consume_token(SET);
              jj_consume_token(POLICY);
              lastPolicy = Identifier();
              jj_consume_token(ON);
              lastSecurityResource = SecurityResourceSegment();
              jjtn000.addOperation(
                  new com.orientechnologies.orient.core.sql.parser.OAlterSystemRoleStatement.Op(
                      com.orientechnologies.orient.core.sql.parser.OAlterSystemRoleStatement.Op
                          .TYPE_ADD,
                      lastSecurityResource,
                      lastPolicy));
              break;
            }
          case REMOVE:
            {
              jj_consume_token(REMOVE);
              jj_consume_token(POLICY);
              jj_consume_token(ON);
              lastSecurityResource = SecurityResourceSegment();
              jjtn000.addOperation(
                  new com.orientechnologies.orient.core.sql.parser.OAlterSystemRoleStatement.Op(
                      com.orientechnologies.orient.core.sql.parser.OAlterSystemRoleStatement.Op
                          .TYPE_REMOVE,
                      lastSecurityResource,
                      null));
              break;
            }
          default:
            jj_la1[402] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SET:
          case REMOVE:
            {
              ;
              break;
            }
          default:
            jj_la1[403] = jj_gen;
            break label_58;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OLetStatement LetStatement() throws ParseException {
    /*@bgen(jjtree) LetStatement */
    OLetStatement jjtn000 = new OLetStatement(JJTLETSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LET);
      jjtn000.name = Identifier();
      jj_consume_token(EQ);
      if (jj_2_164(2147483647)) {
        jjtn000.statement = StatementInternal();
      } else if (jj_2_165(2147483647)) {
        jjtn000.expression = Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OBeginStatement BeginStatement() throws ParseException {
    /*@bgen(jjtree) BeginStatement */
    OBeginStatement jjtn000 = new OBeginStatement(JJTBEGINSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BEGIN);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ISOLATION:
          {
            jj_consume_token(ISOLATION);
            jjtn000.isolation = Identifier();
            break;
          }
        default:
          jj_la1[404] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCommitStatement CommitStatement() throws ParseException {
    /*@bgen(jjtree) CommitStatement */
    OCommitStatement jjtn000 = new OCommitStatement(JJTCOMMITSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement last;
    try {
      jj_consume_token(COMMIT);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RETRY:
          {
            jj_consume_token(RETRY);
            jjtn000.retry = Integer();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case ELSE:
                {
                  jj_consume_token(ELSE);
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LBRACE:
                      {
                        jjtn000.elseStatements = new ArrayList();
                        jj_consume_token(LBRACE);
                        label_59:
                        while (true) {
                          last = StatementInternal();
                          jjtn000.addElse(last);
                          jj_consume_token(SEMICOLON);
                          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case SELECT:
                            case TRAVERSE:
                            case MATCH:
                            case INSERT:
                            case CREATE:
                            case DELETE:
                            case UPDATE:
                            case RETURN:
                            case LET:
                            case PROFILE:
                            case TRUNCATE:
                            case FIND:
                            case ALTER:
                            case DROP:
                            case REBUILD:
                            case OPTIMIZE:
                            case EXPLAIN:
                            case GRANT:
                            case REVOKE:
                            case BEGIN:
                            case COMMIT:
                            case ROLLBACK:
                            case IF:
                            case SLEEP:
                            case CONSOLE:
                            case HA:
                            case MOVE:
                              {
                                ;
                                break;
                              }
                            default:
                              jj_la1[405] = jj_gen;
                              break label_59;
                          }
                        }
                        jj_consume_token(RBRACE);
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                          case AND:
                            {
                              jj_consume_token(AND);
                              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                                case CONTINUE:
                                  {
                                    jj_consume_token(CONTINUE);
                                    jjtn000.elseFail = false;
                                    break;
                                  }
                                case FAIL:
                                  {
                                    jj_consume_token(FAIL);
                                    jjtn000.elseFail = true;
                                    break;
                                  }
                                default:
                                  jj_la1[406] = jj_gen;
                                  jj_consume_token(-1);
                                  throw new ParseException();
                              }
                              break;
                            }
                          default:
                            jj_la1[407] = jj_gen;
                            ;
                        }
                        break;
                      }
                    case CONTINUE:
                    case FAIL:
                      {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                          case CONTINUE:
                            {
                              jj_consume_token(CONTINUE);
                              jjtn000.elseFail = false;
                              break;
                            }
                          case FAIL:
                            {
                              jj_consume_token(FAIL);
                              jjtn000.elseFail = true;
                              break;
                            }
                          default:
                            jj_la1[408] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                        }
                        break;
                      }
                    default:
                      jj_la1[409] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                  }
                  break;
                }
              default:
                jj_la1[410] = jj_gen;
                ;
            }
            break;
          }
        default:
          jj_la1[411] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ORollbackStatement RollbackStatement() throws ParseException {
    /*@bgen(jjtree) RollbackStatement */
    ORollbackStatement jjtn000 = new ORollbackStatement(JJTROLLBACKSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ROLLBACK);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OReturnStatement ReturnStatement() throws ParseException {
    /*@bgen(jjtree) ReturnStatement */
    OReturnStatement jjtn000 = new OReturnStatement(JJTRETURNSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case DISTINCT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case THIS:
        case RECORD_ATTRIBUTE:
        case RID_STRING:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case 272:
          {
            jjtn000.expression = Expression();
            break;
          }
        default:
          jj_la1[412] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OIfStatement IfStatement() throws ParseException {
    /*@bgen(jjtree) IfStatement */
    OIfStatement jjtn000 = new OIfStatement(JJTIFSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement last;
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      jjtn000.expression = OrBlock();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_60:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SELECT:
          case TRAVERSE:
          case MATCH:
          case INSERT:
          case CREATE:
          case DELETE:
          case UPDATE:
          case TO:
          case WHILE:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case NULL:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RETURN:
          case RECORD:
          case LET:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case DISTINCT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case FOREACH:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case THIS:
          case RECORD_ATTRIBUTE:
          case RID_STRING:
          case TRUE:
          case FALSE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case SEMICOLON:
          case HOOK:
          case COLON:
          case MINUS:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
          case 272:
            {
              ;
              break;
            }
          default:
            jj_la1[413] = jj_gen;
            break label_60;
        }
        if (jj_2_166(2147483647)) {
          last = StatementSemicolon();
          jjtn000.addStatement(last);
        } else {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case IF:
              {
                last = IfStatement();
                jjtn000.addStatement(last);
                break;
              }
            case WHILE:
              {
                last = WhileBlock();
                jjtn000.addStatement(last);
                break;
              }
            case FOREACH:
              {
                last = ForEachBlock();
                jjtn000.addStatement(last);
                break;
              }
            case SEMICOLON:
              {
                jj_consume_token(SEMICOLON);
                break;
              }
            default:
              jj_la1[414] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OSleepStatement SleepStatement() throws ParseException {
    /*@bgen(jjtree) SleepStatement */
    OSleepStatement jjtn000 = new OSleepStatement(JJTSLEEPSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SLEEP);
      jjtn000.millis = Integer();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OConsoleStatement ConsoleStatement() throws ParseException {
    /*@bgen(jjtree) ConsoleStatement */
    OConsoleStatement jjtn000 = new OConsoleStatement(JJTCONSOLESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONSOLE);
      jj_consume_token(DOT);
      jjtn000.logLevel = Identifier();
      jjtn000.message = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateSequenceStatement CreateSequenceStatement() throws ParseException {
    /*@bgen(jjtree) CreateSequenceStatement */
    OCreateSequenceStatement jjtn000 = new OCreateSequenceStatement(JJTCREATESEQUENCESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(SEQUENCE);
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(NOT);
            jj_consume_token(EXISTS);
            jjtn000.ifNotExists = true;
            break;
          }
        default:
          jj_la1[415] = jj_gen;
          ;
      }
      jj_consume_token(TYPE);
      lastIdentifier = Identifier();
      if (lastIdentifier.getStringValue().equalsIgnoreCase("cached")) {
        jjtn000.type = OCreateSequenceStatement.TYPE_CACHED;
      } else if (lastIdentifier.getStringValue().equalsIgnoreCase("ordered")) {
        jjtn000.type = OCreateSequenceStatement.TYPE_ORDERED;
      } else {
        {
          if (true) throw new ParseException();
        }
      }
      label_61:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case INCREMENT:
          case LIMIT:
          case ASC:
          case DESC:
          case CACHE:
          case CYCLE:
          case START:
            {
              ;
              break;
            }
          default:
            jj_la1[416] = jj_gen;
            break label_61;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case START:
            {
              jj_consume_token(START);
              jjtn000.start = Expression();
              break;
            }
          case INCREMENT:
            {
              jj_consume_token(INCREMENT);
              jjtn000.increment = Expression();
              break;
            }
          case LIMIT:
            {
              jj_consume_token(LIMIT);
              jjtn000.limitValue = Expression();
              break;
            }
          case CYCLE:
            {
              jj_consume_token(CYCLE);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case TRUE:
                  {
                    jj_consume_token(TRUE);
                    jjtn000.cyclic = true;
                    break;
                  }
                case FALSE:
                  {
                    jj_consume_token(FALSE);
                    jjtn000.cyclic = false;
                    break;
                  }
                default:
                  jj_la1[417] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              break;
            }
          case CACHE:
            {
              jj_consume_token(CACHE);
              jjtn000.cache = Expression();
              break;
            }
          case ASC:
            {
              jj_consume_token(ASC);
              jjtn000.positive = true;
              break;
            }
          case DESC:
            {
              jj_consume_token(DESC);
              jjtn000.positive = false;
              break;
            }
          default:
            jj_la1[418] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAlterSequenceStatement AlterSequenceStatement() throws ParseException {
    /*@bgen(jjtree) AlterSequenceStatement */
    OAlterSequenceStatement jjtn000 = new OAlterSequenceStatement(JJTALTERSEQUENCESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    try {
      jj_consume_token(ALTER);
      jj_consume_token(SEQUENCE);
      jjtn000.name = Identifier();
      label_62:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case INCREMENT:
          case LIMIT:
          case ASC:
          case DESC:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case START:
            {
              ;
              break;
            }
          default:
            jj_la1[419] = jj_gen;
            break label_62;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case START:
            {
              jj_consume_token(START);
              jjtn000.start = Expression();
              break;
            }
          case INCREMENT:
            {
              jj_consume_token(INCREMENT);
              jjtn000.increment = Expression();
              break;
            }
          case LIMIT:
            {
              jj_consume_token(LIMIT);
              jjtn000.limitValue = Expression();
              break;
            }
          case CYCLE:
            {
              jj_consume_token(CYCLE);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case TRUE:
                  {
                    jj_consume_token(TRUE);
                    jjtn000.cyclic = true;
                    break;
                  }
                case FALSE:
                  {
                    jj_consume_token(FALSE);
                    jjtn000.cyclic = false;
                    break;
                  }
                default:
                  jj_la1[420] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              break;
            }
          case CACHE:
            {
              jj_consume_token(CACHE);
              jjtn000.cache = Expression();
              break;
            }
          case ASC:
            {
              jj_consume_token(ASC);
              jjtn000.positive = true;
              break;
            }
          case DESC:
            {
              jj_consume_token(DESC);
              jjtn000.positive = false;
              break;
            }
          case NOLIMIT:
            {
              jj_consume_token(NOLIMIT);
              jjtn000.turnLimitOff = true;
              break;
            }
          default:
            jj_la1[421] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODropSequenceStatement DropSequenceStatement() throws ParseException {
    /*@bgen(jjtree) DropSequenceStatement */
    ODropSequenceStatement jjtn000 = new ODropSequenceStatement(JJTDROPSEQUENCESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    try {
      jj_consume_token(DROP);
      jj_consume_token(SEQUENCE);
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(EXISTS);
            jjtn000.ifExists = true;
            break;
          }
        default:
          jj_la1[422] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OHaStatusStatement HaStatusStatement() throws ParseException {
    /*@bgen(jjtree) HaStatusStatement */
    OHaStatusStatement jjtn000 = new OHaStatusStatement(JJTHASTATUSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      jj_consume_token(HA);
      jj_consume_token(STATUS);
      label_63:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case 275:
          case 276:
          case 277:
          case 278:
          case 279:
          case 280:
          case 281:
            {
              ;
              break;
            }
          default:
            jj_la1[423] = jj_gen;
            break label_63;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case 275:
            {
              token = jj_consume_token(275);
              jjtn000.servers = true;
              break;
            }
          case 276:
            {
              token = jj_consume_token(276);
              jjtn000.db = true;
              break;
            }
          case 277:
            {
              token = jj_consume_token(277);
              jjtn000.latency = true;
              break;
            }
          case 278:
            {
              token = jj_consume_token(278);
              jjtn000.messages = true;
              break;
            }
          case 279:
            {
              token = jj_consume_token(279);
              jjtn000.locks = true;
              break;
            }
          case 280:
            {
              token = jj_consume_token(280);
              jjtn000.servers = true;
              jjtn000.db = true;
              jjtn000.latency = true;
              jjtn000.messages = true;
              jjtn000.locks = true;
              break;
            }
          case 281:
            {
              token = jj_consume_token(281);
              jjtn000.outputText = true;
              break;
            }
          default:
            jj_la1[424] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OHaRemoveServerStatement HaRemoveServerStatement() throws ParseException {
    /*@bgen(jjtree) HaRemoveServerStatement */
    OHaRemoveServerStatement jjtn000 = new OHaRemoveServerStatement(JJTHAREMOVESERVERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(HA);
      jj_consume_token(REMOVE);
      jj_consume_token(SERVER);
      jjtn000.serverName = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OHaSyncDatabaseStatement HaSyncDatabaseStatement() throws ParseException {
    /*@bgen(jjtree) HaSyncDatabaseStatement */
    OHaSyncDatabaseStatement jjtn000 = new OHaSyncDatabaseStatement(JJTHASYNCDATABASESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(HA);
      jj_consume_token(SYNC);
      jj_consume_token(DATABASE);
      label_64:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case 282:
          case 283:
            {
              ;
              break;
            }
          default:
            jj_la1[425] = jj_gen;
            break label_64;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case 282:
            {
              jj_consume_token(282);
              jjtn000.force = true;
              break;
            }
          case 283:
            {
              jj_consume_token(283);
              jjtn000.full = true;
              break;
            }
          default:
            jj_la1[426] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OHaSyncClusterStatement HaSyncClusterStatement() throws ParseException {
    /*@bgen(jjtree) HaSyncClusterStatement */
    OHaSyncClusterStatement jjtn000 = new OHaSyncClusterStatement(JJTHASYNCCLUSTERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(HA);
      jj_consume_token(SYNC);
      jj_consume_token(CLUSTER);
      jjtn000.clusterName = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case 284:
        case 285:
          {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case 284:
                {
                  jj_consume_token(284);
                  jjtn000.modeFull = true;
                  break;
                }
              case 285:
                {
                  jj_consume_token(285);
                  jjtn000.modeMerge = true;
                  break;
                }
              default:
                jj_la1[427] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[428] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OHaSetStatement HaSetStatement() throws ParseException {
    /*@bgen(jjtree) HaSetStatement */
    OHaSetStatement jjtn000 = new OHaSetStatement(JJTHASETSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token token;
    try {
      jj_consume_token(HA);
      jj_consume_token(SET);
      jjtn000.operation = Identifier();
      jjtn000.key = Expression();
      jj_consume_token(EQ);
      jjtn000.value = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OForEachBlock ForEachBlock() throws ParseException {
    /*@bgen(jjtree) ForEachBlock */
    OForEachBlock jjtn000 = new OForEachBlock(JJTFOREACHBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement lastStatement;
    try {
      jj_consume_token(FOREACH);
      jj_consume_token(LPAREN);
      jjtn000.loopVariable = Identifier();
      jj_consume_token(IN);
      jjtn000.loopValues = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_65:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SELECT:
          case TRAVERSE:
          case MATCH:
          case INSERT:
          case CREATE:
          case DELETE:
          case UPDATE:
          case TO:
          case WHILE:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case NULL:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RETURN:
          case RECORD:
          case LET:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case DISTINCT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case FOREACH:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case THIS:
          case RECORD_ATTRIBUTE:
          case RID_STRING:
          case TRUE:
          case FALSE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case SEMICOLON:
          case HOOK:
          case COLON:
          case MINUS:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
          case 272:
            {
              ;
              break;
            }
          default:
            jj_la1[429] = jj_gen;
            break label_65;
        }
        if (jj_2_167(2147483647)) {
          lastStatement = StatementSemicolon();
          jjtn000.addStatement(lastStatement);
        } else {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case IF:
              {
                lastStatement = IfStatement();
                jjtn000.addStatement(lastStatement);
                break;
              }
            case FOREACH:
              {
                lastStatement = ForEachBlock();
                jjtn000.addStatement(lastStatement);
                break;
              }
            case WHILE:
              {
                lastStatement = WhileBlock();
                jjtn000.addStatement(lastStatement);
                break;
              }
            case SEMICOLON:
              {
                jj_consume_token(SEMICOLON);
                break;
              }
            default:
              jj_la1[430] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OWhileBlock WhileBlock() throws ParseException {
    /*@bgen(jjtree) WhileBlock */
    OWhileBlock jjtn000 = new OWhileBlock(JJTWHILEBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OStatement lastStatement;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      jjtn000.condition = OrBlock();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_66:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SELECT:
          case TRAVERSE:
          case MATCH:
          case INSERT:
          case CREATE:
          case DELETE:
          case UPDATE:
          case TO:
          case WHILE:
          case VALUE:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case NULL:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RETURN:
          case RECORD:
          case LET:
          case CACHE:
          case CYCLE:
          case NOLIMIT:
          case NOCYCLE:
          case LUCENE:
          case NEAR:
          case WITHIN:
          case MINDEPTH:
          case CLASS:
          case SUPERCLASS:
          case CLASSES:
          case SUPERCLASSES:
          case VIEW:
          case UPDATABLE:
          case EXCEPTION:
          case PROFILE:
          case STORAGE:
          case ON:
          case OFF:
          case TRUNCATE:
          case FIND:
          case REFERENCES:
          case EXTENDS:
          case CLUSTERS:
          case ABSTRACT:
          case ALTER:
          case NAME:
          case SHORTNAME:
          case OVERSIZE:
          case STRICTMODE:
          case ADDCLUSTER:
          case REMOVECLUSTER:
          case CUSTOM:
          case CLUSTERSELECTION:
          case DESCRIPTION:
          case ENCRYPTION:
          case DROP:
          case PROPERTY:
          case FORCE:
          case METADATA:
          case INDEX:
          case COLLATE:
          case ENGINE:
          case REBUILD:
          case ID:
          case DATABASE:
          case OPTIMIZE:
          case LINK:
          case TYPE:
          case INVERSE:
          case EXPLAIN:
          case GRANT:
          case REVOKE:
          case READ:
          case EXECUTE:
          case ALL:
          case NONE:
          case FUNCTION:
          case PARAMETERS:
          case IDEMPOTENT:
          case LANGUAGE:
          case BEGIN:
          case COMMIT:
          case ROLLBACK:
          case IF:
          case ELSE:
          case CONTINUE:
          case FAIL:
          case ISOLATION:
          case SLEEP:
          case CONSOLE:
          case BLOB:
          case SHARED:
          case DEFAULT_:
          case SEQUENCE:
          case START:
          case OPTIONAL:
          case COUNT:
          case DISTINCT:
          case HA:
          case STATUS:
          case SERVER:
          case SYNC:
          case EXISTS:
          case FOREACH:
          case MOVE:
          case DEPTH_ALIAS:
          case PATH_ALIAS:
          case IDENTIFIED:
          case ROLE:
          case USER:
          case USERS:
          case RID:
          case SECURITY:
          case POLICY:
          case DEFAULTCLUSTER:
          case SYSTEM:
          case THIS:
          case RECORD_ATTRIBUTE:
          case RID_STRING:
          case TRUE:
          case FALSE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case SEMICOLON:
          case HOOK:
          case COLON:
          case MINUS:
          case STAR:
          case IN:
          case KEY:
          case IDENTIFIER:
          case QUOTED_IDENTIFIER:
          case 272:
            {
              ;
              break;
            }
          default:
            jj_la1[431] = jj_gen;
            break label_66;
        }
        if (jj_2_168(2147483647)) {
          lastStatement = StatementSemicolon();
          jjtn000.addStatement(lastStatement);
        } else {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case IF:
              {
                lastStatement = IfStatement();
                jjtn000.addStatement(lastStatement);
                break;
              }
            case FOREACH:
              {
                lastStatement = ForEachBlock();
                jjtn000.addStatement(lastStatement);
                break;
              }
            case WHILE:
              {
                lastStatement = WhileBlock();
                jjtn000.addStatement(lastStatement);
                break;
              }
            case SEMICOLON:
              {
                jj_consume_token(SEMICOLON);
                break;
              }
            default:
              jj_la1[432] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OSecurityResourceSegment SecurityResourceSegment() throws ParseException {
    /*@bgen(jjtree) SecurityResourceSegment */
    OSecurityResourceSegment jjtn000 = new OSecurityResourceSegment(JJTSECURITYRESOURCESEGMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier identifier;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STAR:
          {
            jj_consume_token(STAR);
            jjtn000.star = true;
            break;
          }
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            identifier = Identifier();
            jjtn000.setIdentifier(identifier);
            break;
          }
        case CLUSTER:
          {
            token = jj_consume_token(CLUSTER);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case CREATE:
          {
            token = jj_consume_token(CREATE);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case DELETE:
          {
            token = jj_consume_token(DELETE);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case INSERT:
          {
            token = jj_consume_token(INSERT);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case SELECT:
          {
            token = jj_consume_token(SELECT);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case LIKE:
          {
            token = jj_consume_token(LIKE);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case VERTEX:
          {
            token = jj_consume_token(VERTEX);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case EDGE:
          {
            token = jj_consume_token(EDGE);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case CONTAINS:
          {
            token = jj_consume_token(CONTAINS);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case CONTAINSALL:
          {
            token = jj_consume_token(CONTAINSALL);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case CONTAINSANY:
          {
            token = jj_consume_token(CONTAINSANY);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case CONTAINSKEY:
          {
            token = jj_consume_token(CONTAINSKEY);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case CONTAINSVALUE:
          {
            token = jj_consume_token(CONTAINSVALUE);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        case FROM:
          {
            token = jj_consume_token(FROM);
            jjtn000.setIdentifier(new OIdentifier(token.image));
            break;
          }
        default:
          jj_la1[433] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case DOT:
          {
            jj_consume_token(DOT);
            jjtn000.next = SecurityResourceSegment();
            break;
          }
        default:
          jj_la1[434] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateSecurityPolicyStatement CreateSecurityPolicyStatement()
      throws ParseException {
    /*@bgen(jjtree) CreateSecurityPolicyStatement */
    OCreateSecurityPolicyStatement jjtn000 =
        new OCreateSecurityPolicyStatement(JJTCREATESECURITYPOLICYSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(SECURITY);
      jj_consume_token(POLICY);
      jjtn000.name = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case SET:
          {
            jj_consume_token(SET);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case CREATE:
                {
                  jj_consume_token(CREATE);
                  jj_consume_token(EQ);
                  jj_consume_token(LPAREN);
                  jjtn000.create = OrBlock();
                  jj_consume_token(RPAREN);
                  break;
                }
              case READ:
                {
                  jj_consume_token(READ);
                  jj_consume_token(EQ);
                  jj_consume_token(LPAREN);
                  jjtn000.read = OrBlock();
                  jj_consume_token(RPAREN);
                  break;
                }
              case BEFORE:
                {
                  jj_consume_token(BEFORE);
                  jj_consume_token(UPDATE);
                  jj_consume_token(EQ);
                  jj_consume_token(LPAREN);
                  jjtn000.beforeUpdate = OrBlock();
                  jj_consume_token(RPAREN);
                  break;
                }
              case AFTER:
                {
                  jj_consume_token(AFTER);
                  jj_consume_token(UPDATE);
                  jj_consume_token(EQ);
                  jj_consume_token(LPAREN);
                  jjtn000.afterUpdate = OrBlock();
                  jj_consume_token(RPAREN);
                  break;
                }
              case DELETE:
                {
                  jj_consume_token(DELETE);
                  jj_consume_token(EQ);
                  jj_consume_token(LPAREN);
                  jjtn000.delete = OrBlock();
                  jj_consume_token(RPAREN);
                  break;
                }
              case EXECUTE:
                {
                  jj_consume_token(EXECUTE);
                  jj_consume_token(EQ);
                  jj_consume_token(LPAREN);
                  jjtn000.execute = OrBlock();
                  jj_consume_token(RPAREN);
                  break;
                }
              default:
                jj_la1[435] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            label_67:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[436] = jj_gen;
                  break label_67;
              }
              jj_consume_token(COMMA);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case CREATE:
                  {
                    jj_consume_token(CREATE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.create = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case READ:
                  {
                    jj_consume_token(READ);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.read = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case BEFORE:
                  {
                    jj_consume_token(BEFORE);
                    jj_consume_token(UPDATE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.beforeUpdate = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case AFTER:
                  {
                    jj_consume_token(AFTER);
                    jj_consume_token(UPDATE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.afterUpdate = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case DELETE:
                  {
                    jj_consume_token(DELETE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.delete = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case EXECUTE:
                  {
                    jj_consume_token(EXECUTE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.execute = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                default:
                  jj_la1[437] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
            }
            break;
          }
        default:
          jj_la1[438] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OAlterSecurityPolicyStatement AlterSecurityPolicyStatement() throws ParseException {
    /*@bgen(jjtree) AlterSecurityPolicyStatement */
    OAlterSecurityPolicyStatement jjtn000 =
        new OAlterSecurityPolicyStatement(JJTALTERSECURITYPOLICYSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ALTER);
      jj_consume_token(SECURITY);
      jj_consume_token(POLICY);
      jjtn000.name = Identifier();
      label_68:
      while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SET:
            {
              jj_consume_token(SET);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case CREATE:
                  {
                    jj_consume_token(CREATE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.create = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case READ:
                  {
                    jj_consume_token(READ);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.read = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case BEFORE:
                  {
                    jj_consume_token(BEFORE);
                    jj_consume_token(UPDATE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.beforeUpdate = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case AFTER:
                  {
                    jj_consume_token(AFTER);
                    jj_consume_token(UPDATE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.afterUpdate = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case DELETE:
                  {
                    jj_consume_token(DELETE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.delete = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                case EXECUTE:
                  {
                    jj_consume_token(EXECUTE);
                    jj_consume_token(EQ);
                    jj_consume_token(LPAREN);
                    jjtn000.execute = OrBlock();
                    jj_consume_token(RPAREN);
                    break;
                  }
                default:
                  jj_la1[439] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              label_69:
              while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case COMMA:
                    {
                      ;
                      break;
                    }
                  default:
                    jj_la1[440] = jj_gen;
                    break label_69;
                }
                jj_consume_token(COMMA);
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case CREATE:
                    {
                      jj_consume_token(CREATE);
                      jj_consume_token(EQ);
                      jj_consume_token(LPAREN);
                      jjtn000.create = OrBlock();
                      jj_consume_token(RPAREN);
                      break;
                    }
                  case READ:
                    {
                      jj_consume_token(READ);
                      jj_consume_token(EQ);
                      jj_consume_token(LPAREN);
                      jjtn000.read = OrBlock();
                      jj_consume_token(RPAREN);
                      break;
                    }
                  case BEFORE:
                    {
                      jj_consume_token(BEFORE);
                      jj_consume_token(UPDATE);
                      jj_consume_token(EQ);
                      jj_consume_token(LPAREN);
                      jjtn000.beforeUpdate = OrBlock();
                      jj_consume_token(RPAREN);
                      break;
                    }
                  case AFTER:
                    {
                      jj_consume_token(AFTER);
                      jj_consume_token(UPDATE);
                      jj_consume_token(EQ);
                      jj_consume_token(LPAREN);
                      jjtn000.afterUpdate = OrBlock();
                      jj_consume_token(RPAREN);
                      break;
                    }
                  case DELETE:
                    {
                      jj_consume_token(DELETE);
                      jj_consume_token(EQ);
                      jj_consume_token(LPAREN);
                      jjtn000.delete = OrBlock();
                      jj_consume_token(RPAREN);
                      break;
                    }
                  case EXECUTE:
                    {
                      jj_consume_token(EXECUTE);
                      jj_consume_token(EQ);
                      jj_consume_token(LPAREN);
                      jjtn000.execute = OrBlock();
                      jj_consume_token(RPAREN);
                      break;
                    }
                  default:
                    jj_la1[441] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
              }
              break;
            }
          case REMOVE:
            {
              jj_consume_token(REMOVE);
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case CREATE:
                  {
                    jj_consume_token(CREATE);
                    jjtn000.removeCreate = true;
                    break;
                  }
                case READ:
                  {
                    jj_consume_token(READ);
                    jjtn000.removeRead = true;
                    break;
                  }
                case BEFORE:
                  {
                    jj_consume_token(BEFORE);
                    jj_consume_token(UPDATE);
                    jjtn000.removeBeforeUpdate = true;
                    break;
                  }
                case AFTER:
                  {
                    jj_consume_token(AFTER);
                    jj_consume_token(UPDATE);
                    jjtn000.removeAfterUpdate = true;
                    break;
                  }
                case DELETE:
                  {
                    jj_consume_token(DELETE);
                    jjtn000.removeDelete = true;
                    break;
                  }
                case EXECUTE:
                  {
                    jj_consume_token(EXECUTE);
                    jjtn000.removeExecute = true;
                    break;
                  }
                default:
                  jj_la1[442] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              label_70:
              while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case COMMA:
                    {
                      ;
                      break;
                    }
                  default:
                    jj_la1[443] = jj_gen;
                    break label_70;
                }
                jj_consume_token(COMMA);
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                  case CREATE:
                    {
                      jj_consume_token(CREATE);
                      jjtn000.removeCreate = true;
                      break;
                    }
                  case READ:
                    {
                      jj_consume_token(READ);
                      jjtn000.removeRead = true;
                      break;
                    }
                  case BEFORE:
                    {
                      jj_consume_token(BEFORE);
                      jj_consume_token(UPDATE);
                      jjtn000.removeBeforeUpdate = true;
                      break;
                    }
                  case AFTER:
                    {
                      jj_consume_token(AFTER);
                      jj_consume_token(UPDATE);
                      jjtn000.removeAfterUpdate = true;
                      break;
                    }
                  case DELETE:
                    {
                      jj_consume_token(DELETE);
                      jjtn000.removeDelete = true;
                      break;
                    }
                  case EXECUTE:
                    {
                      jj_consume_token(EXECUTE);
                      jjtn000.removeExecute = true;
                      break;
                    }
                  default:
                    jj_la1[444] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
              }
              break;
            }
          default:
            jj_la1[445] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case SET:
          case REMOVE:
            {
              ;
              break;
            }
          default:
            jj_la1[446] = jj_gen;
            break label_68;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODatabaseUserData DatabaseUserData() throws ParseException {
    /*@bgen(jjtree) DatabaseUserData */
    ODatabaseUserData jjtn000 = new ODatabaseUserData(JJTDATABASEUSERDATA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    OIdentifier lastIdentifier;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.name = Identifier();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.nameParam = InputParameter();
            break;
          }
        default:
          jj_la1[447] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jj_consume_token(IDENTIFIED);
      jj_consume_token(BY);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.passwordIdentifier = Identifier();
            break;
          }
        case RID_STRING:
        case STRING_LITERAL:
          {
            jjtn000.passwordString = String();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.passwordParam = InputParameter();
            break;
          }
        default:
          jj_la1[448] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case ROLE:
          {
            jj_consume_token(ROLE);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
              case TO:
              case VALUE:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case CACHE:
              case CYCLE:
              case NOLIMIT:
              case NOCYCLE:
              case LUCENE:
              case NEAR:
              case WITHIN:
              case MINDEPTH:
              case CLASS:
              case SUPERCLASS:
              case CLASSES:
              case SUPERCLASSES:
              case VIEW:
              case UPDATABLE:
              case EXCEPTION:
              case PROFILE:
              case STORAGE:
              case ON:
              case OFF:
              case TRUNCATE:
              case FIND:
              case REFERENCES:
              case EXTENDS:
              case CLUSTERS:
              case ABSTRACT:
              case ALTER:
              case NAME:
              case SHORTNAME:
              case OVERSIZE:
              case STRICTMODE:
              case ADDCLUSTER:
              case REMOVECLUSTER:
              case CUSTOM:
              case CLUSTERSELECTION:
              case DESCRIPTION:
              case ENCRYPTION:
              case DROP:
              case PROPERTY:
              case FORCE:
              case METADATA:
              case INDEX:
              case COLLATE:
              case ENGINE:
              case REBUILD:
              case ID:
              case DATABASE:
              case OPTIMIZE:
              case LINK:
              case TYPE:
              case INVERSE:
              case EXPLAIN:
              case GRANT:
              case REVOKE:
              case READ:
              case EXECUTE:
              case ALL:
              case NONE:
              case FUNCTION:
              case PARAMETERS:
              case IDEMPOTENT:
              case LANGUAGE:
              case BEGIN:
              case COMMIT:
              case ROLLBACK:
              case IF:
              case ELSE:
              case CONTINUE:
              case FAIL:
              case ISOLATION:
              case SLEEP:
              case CONSOLE:
              case BLOB:
              case SHARED:
              case DEFAULT_:
              case SEQUENCE:
              case START:
              case OPTIONAL:
              case COUNT:
              case HA:
              case STATUS:
              case SERVER:
              case SYNC:
              case EXISTS:
              case MOVE:
              case DEPTH_ALIAS:
              case PATH_ALIAS:
              case IDENTIFIED:
              case ROLE:
              case USER:
              case USERS:
              case RID:
              case SECURITY:
              case POLICY:
              case DEFAULTCLUSTER:
              case SYSTEM:
              case IN:
              case KEY:
              case IDENTIFIER:
              case QUOTED_IDENTIFIER:
                {
                  lastIdentifier = Identifier();
                  jjtn000.addRole(lastIdentifier);
                  break;
                }
              case LBRACKET:
                {
                  jj_consume_token(LBRACKET);
                  switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case TO:
                    case VALUE:
                    case VALUES:
                    case SET:
                    case ADD:
                    case PUT:
                    case MERGE:
                    case CONTENT:
                    case REMOVE:
                    case ORDER:
                    case GROUP:
                    case OFFSET:
                    case RECORD:
                    case CACHE:
                    case CYCLE:
                    case NOLIMIT:
                    case NOCYCLE:
                    case LUCENE:
                    case NEAR:
                    case WITHIN:
                    case MINDEPTH:
                    case CLASS:
                    case SUPERCLASS:
                    case CLASSES:
                    case SUPERCLASSES:
                    case VIEW:
                    case UPDATABLE:
                    case EXCEPTION:
                    case PROFILE:
                    case STORAGE:
                    case ON:
                    case OFF:
                    case TRUNCATE:
                    case FIND:
                    case REFERENCES:
                    case EXTENDS:
                    case CLUSTERS:
                    case ABSTRACT:
                    case ALTER:
                    case NAME:
                    case SHORTNAME:
                    case OVERSIZE:
                    case STRICTMODE:
                    case ADDCLUSTER:
                    case REMOVECLUSTER:
                    case CUSTOM:
                    case CLUSTERSELECTION:
                    case DESCRIPTION:
                    case ENCRYPTION:
                    case DROP:
                    case PROPERTY:
                    case FORCE:
                    case METADATA:
                    case INDEX:
                    case COLLATE:
                    case ENGINE:
                    case REBUILD:
                    case ID:
                    case DATABASE:
                    case OPTIMIZE:
                    case LINK:
                    case TYPE:
                    case INVERSE:
                    case EXPLAIN:
                    case GRANT:
                    case REVOKE:
                    case READ:
                    case EXECUTE:
                    case ALL:
                    case NONE:
                    case FUNCTION:
                    case PARAMETERS:
                    case IDEMPOTENT:
                    case LANGUAGE:
                    case BEGIN:
                    case COMMIT:
                    case ROLLBACK:
                    case IF:
                    case ELSE:
                    case CONTINUE:
                    case FAIL:
                    case ISOLATION:
                    case SLEEP:
                    case CONSOLE:
                    case BLOB:
                    case SHARED:
                    case DEFAULT_:
                    case SEQUENCE:
                    case START:
                    case OPTIONAL:
                    case COUNT:
                    case HA:
                    case STATUS:
                    case SERVER:
                    case SYNC:
                    case EXISTS:
                    case MOVE:
                    case DEPTH_ALIAS:
                    case PATH_ALIAS:
                    case IDENTIFIED:
                    case ROLE:
                    case USER:
                    case USERS:
                    case RID:
                    case SECURITY:
                    case POLICY:
                    case DEFAULTCLUSTER:
                    case SYSTEM:
                    case IN:
                    case KEY:
                    case IDENTIFIER:
                    case QUOTED_IDENTIFIER:
                      {
                        lastIdentifier = Identifier();
                        jjtn000.addRole(lastIdentifier);
                        label_71:
                        while (true) {
                          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case COMMA:
                              {
                                ;
                                break;
                              }
                            default:
                              jj_la1[449] = jj_gen;
                              break label_71;
                          }
                          jj_consume_token(COMMA);
                          lastIdentifier = Identifier();
                          jjtn000.addRole(lastIdentifier);
                        }
                        break;
                      }
                    default:
                      jj_la1[450] = jj_gen;
                      ;
                  }
                  jj_consume_token(RBRACKET);
                  break;
                }
              default:
                jj_la1[451] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
          }
        default:
          jj_la1[452] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final OCreateDatabaseStatement CreateDatabaseStatement() throws ParseException {
    /*@bgen(jjtree) CreateDatabaseStatement */
    OCreateDatabaseStatement jjtn000 = new OCreateDatabaseStatement(JJTCREATEDATABASESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    ODatabaseUserData lastUserData;
    try {
      jj_consume_token(CREATE);
      jj_consume_token(DATABASE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.name = Identifier();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.nameParam = InputParameter();
            break;
          }
        default:
          jj_la1[453] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtn000.type = Identifier();
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(NOT);
            jj_consume_token(EXISTS);
            jjtn000.ifNotExists = true;
            break;
          }
        default:
          jj_la1[454] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case USERS:
          {
            jj_consume_token(USERS);
            jj_consume_token(LPAREN);
            lastUserData = DatabaseUserData();
            jjtn000.addUser(lastUserData);
            label_72:
            while (true) {
              switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA:
                  {
                    ;
                    break;
                  }
                default:
                  jj_la1[455] = jj_gen;
                  break label_72;
              }
              jj_consume_token(COMMA);
              lastUserData = DatabaseUserData();
              jjtn000.addUser(lastUserData);
            }
            jj_consume_token(RPAREN);
            break;
          }
        default:
          jj_la1[456] = jj_gen;
          ;
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
          {
            jjtn000.config = Json();
            break;
          }
        default:
          jj_la1[457] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final ODropDatabaseStatement DropDatabaseStatement() throws ParseException {
    /*@bgen(jjtree) DropDatabaseStatement */
    ODropDatabaseStatement jjtn000 = new ODropDatabaseStatement(JJTDROPDATABASESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DROP);
      jj_consume_token(DATABASE);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TO:
        case VALUE:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case CACHE:
        case CYCLE:
        case NOLIMIT:
        case NOCYCLE:
        case LUCENE:
        case NEAR:
        case WITHIN:
        case MINDEPTH:
        case CLASS:
        case SUPERCLASS:
        case CLASSES:
        case SUPERCLASSES:
        case VIEW:
        case UPDATABLE:
        case EXCEPTION:
        case PROFILE:
        case STORAGE:
        case ON:
        case OFF:
        case TRUNCATE:
        case FIND:
        case REFERENCES:
        case EXTENDS:
        case CLUSTERS:
        case ABSTRACT:
        case ALTER:
        case NAME:
        case SHORTNAME:
        case OVERSIZE:
        case STRICTMODE:
        case ADDCLUSTER:
        case REMOVECLUSTER:
        case CUSTOM:
        case CLUSTERSELECTION:
        case DESCRIPTION:
        case ENCRYPTION:
        case DROP:
        case PROPERTY:
        case FORCE:
        case METADATA:
        case INDEX:
        case COLLATE:
        case ENGINE:
        case REBUILD:
        case ID:
        case DATABASE:
        case OPTIMIZE:
        case LINK:
        case TYPE:
        case INVERSE:
        case EXPLAIN:
        case GRANT:
        case REVOKE:
        case READ:
        case EXECUTE:
        case ALL:
        case NONE:
        case FUNCTION:
        case PARAMETERS:
        case IDEMPOTENT:
        case LANGUAGE:
        case BEGIN:
        case COMMIT:
        case ROLLBACK:
        case IF:
        case ELSE:
        case CONTINUE:
        case FAIL:
        case ISOLATION:
        case SLEEP:
        case CONSOLE:
        case BLOB:
        case SHARED:
        case DEFAULT_:
        case SEQUENCE:
        case START:
        case OPTIONAL:
        case COUNT:
        case HA:
        case STATUS:
        case SERVER:
        case SYNC:
        case EXISTS:
        case MOVE:
        case DEPTH_ALIAS:
        case PATH_ALIAS:
        case IDENTIFIED:
        case ROLE:
        case USER:
        case USERS:
        case RID:
        case SECURITY:
        case POLICY:
        case DEFAULTCLUSTER:
        case SYSTEM:
        case IN:
        case KEY:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          {
            jjtn000.name = Identifier();
            break;
          }
        case HOOK:
        case COLON:
          {
            jjtn000.nameParam = InputParameter();
            break;
          }
        default:
          jj_la1[458] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF:
          {
            jj_consume_token(IF);
            jj_consume_token(EXISTS);
            jjtn000.ifExists = true;
            break;
          }
        default:
          jj_la1[459] = jj_gen;
          ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_1());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(0, xla);
    }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_2());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(1, xla);
    }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_3());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(2, xla);
    }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_4());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(3, xla);
    }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_5());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(4, xla);
    }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_6());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(5, xla);
    }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_7());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(6, xla);
    }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_8());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(7, xla);
    }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_9());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(8, xla);
    }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_10());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(9, xla);
    }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_11());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(10, xla);
    }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_12());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(11, xla);
    }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_13());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(12, xla);
    }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_14());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(13, xla);
    }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_15());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(14, xla);
    }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_16());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(15, xla);
    }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_17());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(16, xla);
    }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_18());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(17, xla);
    }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_19());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(18, xla);
    }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_20());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(19, xla);
    }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_21());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(20, xla);
    }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_22());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(21, xla);
    }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_23());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(22, xla);
    }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_24());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(23, xla);
    }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_25());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(24, xla);
    }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_26());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(25, xla);
    }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_27());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(26, xla);
    }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_28());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(27, xla);
    }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_29());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(28, xla);
    }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_30());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(29, xla);
    }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_31());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(30, xla);
    }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_32());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(31, xla);
    }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_33());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(32, xla);
    }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_34());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(33, xla);
    }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_35());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(34, xla);
    }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_36());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(35, xla);
    }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_37());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(36, xla);
    }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_38());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(37, xla);
    }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_39());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(38, xla);
    }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_40());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(39, xla);
    }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_41());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(40, xla);
    }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_42());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(41, xla);
    }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_43());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(42, xla);
    }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_44());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(43, xla);
    }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_45());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(44, xla);
    }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_46());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(45, xla);
    }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_47());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(46, xla);
    }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_48());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(47, xla);
    }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_49());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(48, xla);
    }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_50());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(49, xla);
    }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_51());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(50, xla);
    }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_52());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(51, xla);
    }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_53());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(52, xla);
    }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_54());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(53, xla);
    }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_55());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(54, xla);
    }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_56());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(55, xla);
    }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_57());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(56, xla);
    }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_58());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(57, xla);
    }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_59());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(58, xla);
    }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_60());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(59, xla);
    }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_61());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(60, xla);
    }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_62());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(61, xla);
    }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_63());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(62, xla);
    }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_64());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(63, xla);
    }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_65());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(64, xla);
    }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_66());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(65, xla);
    }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_67());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(66, xla);
    }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_68());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(67, xla);
    }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_69());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(68, xla);
    }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_70());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(69, xla);
    }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_71());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(70, xla);
    }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_72());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(71, xla);
    }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_73());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(72, xla);
    }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_74());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(73, xla);
    }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_75());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(74, xla);
    }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_76());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(75, xla);
    }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_77());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(76, xla);
    }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_78());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(77, xla);
    }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_79());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(78, xla);
    }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_80());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(79, xla);
    }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_81());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(80, xla);
    }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_82());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(81, xla);
    }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_83());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(82, xla);
    }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_84());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(83, xla);
    }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_85());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(84, xla);
    }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_86());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(85, xla);
    }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_87());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(86, xla);
    }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_88());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(87, xla);
    }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_89());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(88, xla);
    }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_90());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(89, xla);
    }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_91());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(90, xla);
    }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_92());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(91, xla);
    }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_93());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(92, xla);
    }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_94());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(93, xla);
    }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_95());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(94, xla);
    }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_96());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(95, xla);
    }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_97());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(96, xla);
    }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_98());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(97, xla);
    }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_99());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(98, xla);
    }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_100());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(99, xla);
    }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_101());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(100, xla);
    }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_102());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(101, xla);
    }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_103());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(102, xla);
    }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_104());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(103, xla);
    }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_105());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(104, xla);
    }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_106());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(105, xla);
    }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_107());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(106, xla);
    }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_108());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(107, xla);
    }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_109());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(108, xla);
    }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_110());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(109, xla);
    }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_111());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(110, xla);
    }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_112());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(111, xla);
    }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_113());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(112, xla);
    }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_114());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(113, xla);
    }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_115());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(114, xla);
    }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_116());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(115, xla);
    }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_117());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(116, xla);
    }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_118());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(117, xla);
    }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_119());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(118, xla);
    }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_120());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(119, xla);
    }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_121());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(120, xla);
    }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_122());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(121, xla);
    }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_123());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(122, xla);
    }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_124());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(123, xla);
    }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_125());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(124, xla);
    }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_126());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(125, xla);
    }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_127());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(126, xla);
    }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_128());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(127, xla);
    }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_129());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(128, xla);
    }
  }

  private boolean jj_2_130(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_130());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(129, xla);
    }
  }

  private boolean jj_2_131(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_131());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(130, xla);
    }
  }

  private boolean jj_2_132(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_132());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(131, xla);
    }
  }

  private boolean jj_2_133(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_133());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(132, xla);
    }
  }

  private boolean jj_2_134(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_134());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(133, xla);
    }
  }

  private boolean jj_2_135(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_135());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(134, xla);
    }
  }

  private boolean jj_2_136(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_136());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(135, xla);
    }
  }

  private boolean jj_2_137(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_137());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(136, xla);
    }
  }

  private boolean jj_2_138(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_138());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(137, xla);
    }
  }

  private boolean jj_2_139(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_139());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(138, xla);
    }
  }

  private boolean jj_2_140(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_140());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(139, xla);
    }
  }

  private boolean jj_2_141(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_141());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(140, xla);
    }
  }

  private boolean jj_2_142(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_142());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(141, xla);
    }
  }

  private boolean jj_2_143(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_143());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(142, xla);
    }
  }

  private boolean jj_2_144(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_144());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(143, xla);
    }
  }

  private boolean jj_2_145(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_145());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(144, xla);
    }
  }

  private boolean jj_2_146(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_146());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(145, xla);
    }
  }

  private boolean jj_2_147(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_147());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(146, xla);
    }
  }

  private boolean jj_2_148(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_148());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(147, xla);
    }
  }

  private boolean jj_2_149(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_149());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(148, xla);
    }
  }

  private boolean jj_2_150(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_150());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(149, xla);
    }
  }

  private boolean jj_2_151(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_151());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(150, xla);
    }
  }

  private boolean jj_2_152(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_152());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(151, xla);
    }
  }

  private boolean jj_2_153(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_153());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(152, xla);
    }
  }

  private boolean jj_2_154(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_154());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(153, xla);
    }
  }

  private boolean jj_2_155(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_155());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(154, xla);
    }
  }

  private boolean jj_2_156(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_156());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(155, xla);
    }
  }

  private boolean jj_2_157(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_157());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(156, xla);
    }
  }

  private boolean jj_2_158(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_158());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(157, xla);
    }
  }

  private boolean jj_2_159(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_159());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(158, xla);
    }
  }

  private boolean jj_2_160(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_160());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(159, xla);
    }
  }

  private boolean jj_2_161(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_161());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(160, xla);
    }
  }

  private boolean jj_2_162(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_162());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(161, xla);
    }
  }

  private boolean jj_2_163(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_163());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(162, xla);
    }
  }

  private boolean jj_2_164(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_164());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(163, xla);
    }
  }

  private boolean jj_2_165(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_165());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(164, xla);
    }
  }

  private boolean jj_2_166(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_166());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(165, xla);
    }
  }

  private boolean jj_2_167(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_167());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(166, xla);
    }
  }

  private boolean jj_2_168(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_168());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(167, xla);
    }
  }

  private boolean jj_3_138() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3R_ContainsAllCondition_3055_5_202() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(CONTAINSALL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_141()) {
      jj_scanpos = xsp;
      if (jj_3R_ContainsAllCondition_3062_17_378()) return true;
    }
    return false;
  }

  private boolean jj_3R_NotInCondition_3046_13_373() {
    if (jj_3R_MathExpression_2293_5_172()) return true;
    return false;
  }

  private boolean jj_3R_NotInCondition_3038_18_210() {
    if (jj_3R_SelectWithoutTargetStatement_1115_5_306()) return true;
    return false;
  }

  private boolean jj_3_140() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_InputParameter_1865_5_159()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_NotInCondition_3036_18_209() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3_139() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NotInCondition_3036_18_209()) {
      jj_scanpos = xsp;
      if (jj_3R_NotInCondition_3038_18_210()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_135() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3R_NotInCondition_3030_5_197() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_InOperator_2994_5_371()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_139()) {
      jj_scanpos = xsp;
      if (jj_3_140()) {
        jj_scanpos = xsp;
        if (jj_3R_NotInCondition_3046_13_373()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_InCondition_3012_18_208() {
    if (jj_3R_SelectWithoutTargetStatement_1115_5_306()) return true;
    return false;
  }

  private boolean jj_3_137() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_InputParameter_1865_5_159()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_InCondition_3020_9_372() {
    if (jj_3R_MathExpression_2293_5_172()) return true;
    return false;
  }

  private boolean jj_3R_InCondition_3010_18_207() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3_136() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InCondition_3010_18_207()) {
      jj_scanpos = xsp;
      if (jj_3R_InCondition_3012_18_208()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_134() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_InCondition_3003_1_196() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_3R_InOperator_2994_5_371()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_136()) {
      jj_scanpos = xsp;
      if (jj_3_137()) {
        jj_scanpos = xsp;
        if (jj_3R_InCondition_3020_9_372()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_InOperator_2994_5_371() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_ContainsCondition_2984_13_375() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3_133() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ContainsCondition_2978_5_200() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(CONTAINS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_133()) {
      jj_scanpos = xsp;
      if (jj_3R_ContainsCondition_2984_13_375()) return true;
    }
    return false;
  }

  private boolean jj_3R_IsNotDefinedCondition_2970_1_194() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(DEFINED)) return true;
    return false;
  }

  private boolean jj_3R_IsDefinedCondition_2962_1_195() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(DEFINED)) return true;
    return false;
  }

  private boolean jj_3R_IsNotNullCondition_2954_1_192() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_IsNullCondition_2945_5_193() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_InstanceofCondition_2926_20_386() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_InstanceofCondition_2924_20_385() {
    if (jj_3R_String_567_5_498()) return true;
    return false;
  }

  private boolean jj_3R_InstanceofCondition_2922_20_384() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_BetweenCondition_2935_1_199() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3_132() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_InstanceofCondition_2920_5_206() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(INSTANCEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InstanceofCondition_2922_20_384()) {
      jj_scanpos = xsp;
      if (jj_3R_InstanceofCondition_2924_20_385()) {
        jj_scanpos = xsp;
        if (jj_3R_InstanceofCondition_2926_20_386()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_ContainsValueCondition_2909_9_377() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3_131() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ContainsValueCondition_2902_1_201() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_3R_ContainsValueOperator_2855_1_376()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_131()) {
      jj_scanpos = xsp;
      if (jj_3R_ContainsValueCondition_2909_9_377()) return true;
    }
    return false;
  }

  private boolean jj_3R_BinaryCondition_2892_1_198() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_3R_CompareOperator_2735_1_374()) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_RightBinaryCondition_2881_12_456() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_RightBinaryCondition_2880_8_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RightBinaryCondition_2881_12_456()) jj_scanpos = xsp;
    if (jj_3R_InOperator_2994_5_371()) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_RightBinaryCondition_2875_8_325() {
    if (jj_3R_CompareOperator_2735_1_374()) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_RightBinaryCondition_2874_3_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RightBinaryCondition_2875_8_325()) {
      jj_scanpos = xsp;
      if (jj_3R_RightBinaryCondition_2880_8_326()) return true;
    }
    return false;
  }

  private boolean jj_3R_EqualsCompareOperator_2866_9_776() {
    if (jj_scan_token(EQEQ)) return true;
    return false;
  }

  private boolean jj_3R_EqualsCompareOperator_2864_9_775() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_EqualsCompareOperator_2863_1_576() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EqualsCompareOperator_2864_9_775()) {
      jj_scanpos = xsp;
      if (jj_3R_EqualsCompareOperator_2866_9_776()) return true;
    }
    return false;
  }

  private boolean jj_3R_ContainsValueOperator_2855_1_376() {
    if (jj_scan_token(CONTAINSVALUE)) return true;
    return false;
  }

  private boolean jj_3R_ContainsKeyOperator_2847_1_584() {
    if (jj_scan_token(CONTAINSKEY)) return true;
    return false;
  }

  private boolean jj_3R_ScAndOperator_2839_1_588() {
    if (jj_scan_token(SC_AND)) return true;
    return false;
  }

  private boolean jj_3R_WithinOperator_2831_1_587() {
    if (jj_scan_token(WITHIN)) return true;
    return false;
  }

  private boolean jj_3R_NearOperator_2823_1_586() {
    if (jj_scan_token(NEAR)) return true;
    return false;
  }

  private boolean jj_3R_LuceneOperator_2813_1_585() {
    if (jj_scan_token(LUCENE)) return true;
    return false;
  }

  private boolean jj_3R_LikeOperator_2805_1_583() {
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3R_LeOperator_2797_1_582() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_GeOperator_2789_1_581() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_NeqOperator_2781_1_580() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_NeOperator_2773_1_579() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_GtOperator_2765_1_578() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_LtOperator_2757_1_577() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2748_9_497() {
    if (jj_3R_ScAndOperator_2839_1_588()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2747_9_496() {
    if (jj_3R_WithinOperator_2831_1_587()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2746_9_495() {
    if (jj_3R_NearOperator_2823_1_586()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2745_9_494() {
    if (jj_3R_LuceneOperator_2813_1_585()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2736_17_485() {
    if (jj_3R_EqualsCompareOperator_2863_1_576()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2744_9_493() {
    if (jj_3R_ContainsKeyOperator_2847_1_584()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2743_9_492() {
    if (jj_3R_LikeOperator_2805_1_583()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2742_9_491() {
    if (jj_3R_LeOperator_2797_1_582()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2741_9_490() {
    if (jj_3R_GeOperator_2789_1_581()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2740_9_489() {
    if (jj_3R_NeqOperator_2781_1_580()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2739_9_488() {
    if (jj_3R_NeOperator_2773_1_579()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2738_9_487() {
    if (jj_3R_GtOperator_2765_1_578()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2737_9_486() {
    if (jj_3R_LtOperator_2757_1_577()) return true;
    return false;
  }

  private boolean jj_3_130() {
    if (jj_3R_InstanceofCondition_2920_5_206()) return true;
    return false;
  }

  private boolean jj_3_129() {
    if (jj_3R_MatchesCondition_3098_5_205()) return true;
    return false;
  }

  private boolean jj_3R_CompareOperator_2735_1_374() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CompareOperator_2736_17_485()) {
      jj_scanpos = xsp;
      if (jj_3R_CompareOperator_2737_9_486()) {
        jj_scanpos = xsp;
        if (jj_3R_CompareOperator_2738_9_487()) {
          jj_scanpos = xsp;
          if (jj_3R_CompareOperator_2739_9_488()) {
            jj_scanpos = xsp;
            if (jj_3R_CompareOperator_2740_9_489()) {
              jj_scanpos = xsp;
              if (jj_3R_CompareOperator_2741_9_490()) {
                jj_scanpos = xsp;
                if (jj_3R_CompareOperator_2742_9_491()) {
                  jj_scanpos = xsp;
                  if (jj_3R_CompareOperator_2743_9_492()) {
                    jj_scanpos = xsp;
                    if (jj_3R_CompareOperator_2744_9_493()) {
                      jj_scanpos = xsp;
                      if (jj_3R_CompareOperator_2745_9_494()) {
                        jj_scanpos = xsp;
                        if (jj_3R_CompareOperator_2746_9_495()) {
                          jj_scanpos = xsp;
                          if (jj_3R_CompareOperator_2747_9_496()) {
                            jj_scanpos = xsp;
                            if (jj_3R_CompareOperator_2748_9_497()) return true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3_128() {
    if (jj_3R_ContainsTextCondition_3089_5_204()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2728_5_370() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2723_9_368() {
    if (jj_3R_InstanceofCondition_2920_5_206()) return true;
    return false;
  }

  private boolean jj_3_126() {
    if (jj_3R_ContainsAllCondition_3055_5_202()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2726_5_369() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_127() {
    if (jj_3R_ContainsAnyCondition_3072_5_203()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2720_9_367() {
    if (jj_3R_MatchesCondition_3098_5_205()) return true;
    return false;
  }

  private boolean jj_3_125() {
    if (jj_3R_ContainsValueCondition_2902_1_201()) return true;
    return false;
  }

  private boolean jj_3_124() {
    if (jj_3R_ContainsCondition_2978_5_200()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2717_5_366() {
    if (jj_3R_ContainsTextCondition_3089_5_204()) return true;
    return false;
  }

  private boolean jj_3_123() {
    if (jj_3R_BetweenCondition_2935_1_199()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2711_9_364() {
    if (jj_3R_ContainsAllCondition_3055_5_202()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2714_5_365() {
    if (jj_3R_ContainsAnyCondition_3072_5_203()) return true;
    return false;
  }

  private boolean jj_3_122() {
    if (jj_3R_BinaryCondition_2892_1_198()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2708_9_363() {
    if (jj_3R_ContainsValueCondition_2902_1_201()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2705_9_362() {
    if (jj_3R_ContainsCondition_2978_5_200()) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_3R_InCondition_3003_1_196()) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_3R_NotInCondition_3030_5_197()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2702_9_361() {
    if (jj_3R_BetweenCondition_2935_1_199()) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_3R_IsDefinedCondition_2962_1_195()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2699_9_360() {
    if (jj_3R_BinaryCondition_2892_1_198()) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_3R_IsNotDefinedCondition_2970_1_194()) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_3R_IsNullCondition_2945_5_193()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2693_9_358() {
    if (jj_3R_InCondition_3003_1_196()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2696_5_359() {
    if (jj_3R_NotInCondition_3030_5_197()) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_3R_IsNotNullCondition_2954_1_192()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2690_9_357() {
    if (jj_3R_IsDefinedCondition_2962_1_195()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2687_9_356() {
    if (jj_3R_IsNotDefinedCondition_2970_1_194()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2684_9_355() {
    if (jj_3R_IsNullCondition_2945_5_193()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2681_9_354() {
    if (jj_3R_IsNotNullCondition_2954_1_192()) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_3R_ParenthesisBlock_2671_5_191()) return true;
    return false;
  }

  private boolean jj_3R_ConditionBlock_2680_1_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConditionBlock_2681_9_354()) {
      jj_scanpos = xsp;
      if (jj_3R_ConditionBlock_2684_9_355()) {
        jj_scanpos = xsp;
        if (jj_3R_ConditionBlock_2687_9_356()) {
          jj_scanpos = xsp;
          if (jj_3R_ConditionBlock_2690_9_357()) {
            jj_scanpos = xsp;
            if (jj_3R_ConditionBlock_2693_9_358()) {
              jj_scanpos = xsp;
              if (jj_3R_ConditionBlock_2696_5_359()) {
                jj_scanpos = xsp;
                if (jj_3R_ConditionBlock_2699_9_360()) {
                  jj_scanpos = xsp;
                  if (jj_3R_ConditionBlock_2702_9_361()) {
                    jj_scanpos = xsp;
                    if (jj_3R_ConditionBlock_2705_9_362()) {
                      jj_scanpos = xsp;
                      if (jj_3R_ConditionBlock_2708_9_363()) {
                        jj_scanpos = xsp;
                        if (jj_3R_ConditionBlock_2711_9_364()) {
                          jj_scanpos = xsp;
                          if (jj_3R_ConditionBlock_2714_5_365()) {
                            jj_scanpos = xsp;
                            if (jj_3R_ConditionBlock_2717_5_366()) {
                              jj_scanpos = xsp;
                              if (jj_3R_ConditionBlock_2720_9_367()) {
                                jj_scanpos = xsp;
                                if (jj_3R_ConditionBlock_2723_9_368()) {
                                  jj_scanpos = xsp;
                                  if (jj_3R_ConditionBlock_2726_5_369()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_ConditionBlock_2728_5_370()) return true;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3_114() {
    if (jj_3R_ConditionBlock_2680_1_190()) return true;
    return false;
  }

  private boolean jj_3_113() {
    if (jj_3R_ParenthesisBlock_2671_5_191()) return true;
    return false;
  }

  private boolean jj_3R_ParenthesisBlock_2671_5_191() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_112() {
    if (jj_3R_ConditionBlock_2680_1_190()) return true;
    return false;
  }

  private boolean jj_3R_NotBlock_2662_9_762() {
    if (jj_3R_ParenthesisBlock_2671_5_191()) return true;
    return false;
  }

  private boolean jj_3R_NotBlock_2659_9_761() {
    if (jj_3R_ConditionBlock_2680_1_190()) return true;
    return false;
  }

  private boolean jj_3R_NotBlock_2653_13_760() {
    if (jj_3R_ParenthesisBlock_2671_5_191()) return true;
    return false;
  }

  private boolean jj_3R_NotBlock_2658_5_562() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NotBlock_2659_9_761()) {
      jj_scanpos = xsp;
      if (jj_3R_NotBlock_2662_9_762()) return true;
    }
    return false;
  }

  private boolean jj_3R_NotBlock_2650_13_759() {
    if (jj_3R_ConditionBlock_2680_1_190()) return true;
    return false;
  }

  private boolean jj_3R_NotBlock_2647_5_561() {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NotBlock_2650_13_759()) {
      jj_scanpos = xsp;
      if (jj_3R_NotBlock_2653_13_760()) return true;
    }
    return false;
  }

  private boolean jj_3R_NotBlock_2646_1_460() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NotBlock_2647_5_561()) {
      jj_scanpos = xsp;
      if (jj_3R_NotBlock_2658_5_562()) return true;
    }
    return false;
  }

  private boolean jj_3R_AndBlock_2639_7_461() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_NotBlock_2646_1_460()) return true;
    return false;
  }

  private boolean jj_3R_OrBlock_2629_11_331() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_AndBlock_2637_1_330()) return true;
    return false;
  }

  private boolean jj_3R_AndBlock_2637_1_330() {
    if (jj_3R_NotBlock_2646_1_460()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AndBlock_2639_7_461()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_OrBlock_2627_5_167() {
    if (jj_3R_AndBlock_2637_1_330()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_OrBlock_2629_11_331()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_WhereClause_2620_9_410() {
    if (jj_3R_OrBlock_2627_5_167()) return true;
    return false;
  }

  private boolean jj_3R_IndexIdentifier_2607_17_443() {
    if (jj_scan_token(INDEXVALUESDESC_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_IndexIdentifier_2605_17_442() {
    if (jj_scan_token(INDEXVALUESASC_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_IndexIdentifier_2603_17_441() {
    if (jj_scan_token(INDEXVALUES_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_IndexIdentifier_2601_9_304() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IndexIdentifier_2603_17_441()) {
      jj_scanpos = xsp;
      if (jj_3R_IndexIdentifier_2605_17_442()) {
        jj_scanpos = xsp;
        if (jj_3R_IndexIdentifier_2607_17_443()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_IndexIdentifier_2596_9_303() {
    if (jj_scan_token(INDEX_COLON)) return true;
    if (jj_3R_IndexName_2570_5_440()) return true;
    return false;
  }

  private boolean jj_3R_IndexIdentifier_2595_5_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IndexIdentifier_2596_9_303()) {
      jj_scanpos = xsp;
      if (jj_3R_IndexIdentifier_2601_9_304()) return true;
    }
    return false;
  }

  private boolean jj_3R_IndexName_2578_13_754() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_IndexName_2576_13_753() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_IndexName_2575_9_549() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IndexName_2576_13_753()) {
      jj_scanpos = xsp;
      if (jj_3R_IndexName_2578_13_754()) return true;
    }
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_IndexName_2571_9_548() {
    if (jj_scan_token(273)) return true;
    return false;
  }

  private boolean jj_3R_IndexName_2570_5_440() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IndexName_2571_9_548()) jj_scanpos = xsp;
    if (jj_3R_Identifier_582_1_154()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_IndexName_2575_9_549()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_ClusterList_2547_19_1005() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_ClusterList_2546_17_898() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ClusterList_2547_19_1005()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_MetadataIdentifier_2557_5_705() {
    if (jj_scan_token(METADATA_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_ClusterList_2543_5_704() {
    if (jj_scan_token(CLUSTER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClusterList_2546_17_898()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_Cluster_2534_13_308() {
    if (jj_scan_token(CLUSTER_NUMBER_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_Cluster_2532_13_307() {
    if (jj_scan_token(CLUSTER_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_Cluster_2531_5_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Cluster_2532_13_307()) {
      jj_scanpos = xsp;
      if (jj_3R_Cluster_2534_13_308()) return true;
    }
    return false;
  }

  private boolean jj_3R_EmptyList_2522_9_189() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2510_17_708() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2502_17_707() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2507_9_520() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FromItem_2510_17_708()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_FromItem_2491_17_706() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3_111() {
    if (jj_3R_FunctionCall_2109_5_160()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FromItem_2502_17_707()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_FromItem_2496_9_519() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_3R_IndexIdentifier_2595_5_150()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2488_9_518() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_QueryStatement_1097_5_188()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FromItem_2491_17_706()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_FromItem_2486_9_517() {
    if (jj_3R_MetadataIdentifier_2557_5_705()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2483_9_516() {
    if (jj_3R_IndexIdentifier_2595_5_150()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2475_17_897() {
    if (jj_3R_NamedParameter_1890_5_453()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2481_9_515() {
    if (jj_3R_ClusterList_2543_5_704()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2472_17_703() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FromItem_2472_17_896()) {
      jj_scanpos = xsp;
      if (jj_3R_FromItem_2475_17_897()) return true;
    }
    return false;
  }

  private boolean jj_3R_FromItem_2472_17_896() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PositionalParameter_1876_9_452()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2479_9_514() {
    if (jj_3R_Cluster_2531_5_156()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2469_17_702() {
    if (jj_3R_NamedParameter_1890_5_453()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2467_17_701() {
    if (jj_3R_PositionalParameter_1876_9_452()) return true;
    return false;
  }

  private boolean jj_3R_LetClause_2414_69_531() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_LetItem_2422_5_530()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2460_17_700() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2464_9_513() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FromItem_2467_17_701()) {
      jj_scanpos = xsp;
      if (jj_3R_FromItem_2469_17_702()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FromItem_2472_17_703()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Rid_492_5_158()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FromItem_2460_17_700()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_3R_EmptyList_2522_9_189()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2451_9_512() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_FromItem_2450_5_404() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FromItem_2451_9_512()) {
      jj_scanpos = xsp;
      if (jj_3_108()) {
        jj_scanpos = xsp;
        if (jj_3_109()) {
          jj_scanpos = xsp;
          if (jj_3R_FromItem_2464_9_513()) {
            jj_scanpos = xsp;
            if (jj_3R_FromItem_2479_9_514()) {
              jj_scanpos = xsp;
              if (jj_3R_FromItem_2481_9_515()) {
                jj_scanpos = xsp;
                if (jj_3R_FromItem_2483_9_516()) {
                  jj_scanpos = xsp;
                  if (jj_3R_FromItem_2486_9_517()) {
                    jj_scanpos = xsp;
                    if (jj_3R_FromItem_2488_9_518()) {
                      jj_scanpos = xsp;
                      if (jj_3R_FromItem_2496_9_519()) {
                        jj_scanpos = xsp;
                        if (jj_3_111()) {
                          jj_scanpos = xsp;
                          if (jj_3R_FromItem_2507_9_520()) return true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3_104() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_LetItem_2428_13_731() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_QueryStatement_1097_5_188()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_LetItem_2425_13_730() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_LetItem_2422_5_530() {
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LetItem_2425_13_730()) {
      jj_scanpos = xsp;
      if (jj_3R_LetItem_2428_13_731()) return true;
    }
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_LetClause_2413_5_424() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_LetItem_2422_5_530()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_LetClause_2414_69_531()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_FromClause_2404_9_242() {
    if (jj_3R_FromItem_2450_5_404()) return true;
    return false;
  }

  private boolean jj_3R_BaseExpression_2390_17_482() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_BaseExpression_2387_17_481() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_BaseExpression_2385_17_480() {
    if (jj_3R_String_567_5_498()) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_BaseExpression_2378_17_479() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_BaseExpression_2383_9_348() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BaseExpression_2385_17_480()) {
      jj_scanpos = xsp;
      if (jj_3R_BaseExpression_2387_17_481()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_BaseExpression_2390_17_482()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_BaseExpression_2370_17_478() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_BaseExpression_2375_9_347() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BaseExpression_2378_17_479()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_BaseExpression_2367_9_346() {
    if (jj_3R_BaseIdentifier_2174_5_477()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BaseExpression_2370_17_478()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_BaseExpression_2365_9_345() {
    if (jj_3R_Number_848_5_476()) return true;
    return false;
  }

  private boolean jj_3R_ParenthesisExpression_2352_17_343() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_BaseExpression_2364_5_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BaseExpression_2365_9_345()) {
      jj_scanpos = xsp;
      if (jj_3R_BaseExpression_2367_9_346()) {
        jj_scanpos = xsp;
        if (jj_3R_BaseExpression_2375_9_347()) {
          jj_scanpos = xsp;
          if (jj_3R_BaseExpression_2383_9_348()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_ParenthesisExpression_2354_13_344() {
    if (jj_3R_InsertStatement_1638_1_250()) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_3R_QueryStatement_1097_5_188()) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_BaseExpression_2364_5_187()) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_ParenthesisExpression_2346_5_186()) return true;
    return false;
  }

  private boolean jj_3R_ParenthesisExpression_2346_5_186() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
      jj_scanpos = xsp;
      if (jj_3R_ParenthesisExpression_2352_17_343()) {
        jj_scanpos = xsp;
        if (jj_3R_ParenthesisExpression_2354_13_344()) return true;
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_FirstLevelExpression_2337_9_342() {
    if (jj_3R_BaseExpression_2364_5_187()) return true;
    return false;
  }

  private boolean jj_3R_FirstLevelExpression_2334_9_341() {
    if (jj_3R_ParenthesisExpression_2346_5_186()) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2320_21_184() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2318_21_183() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_FirstLevelExpression_2333_5_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FirstLevelExpression_2334_9_341()) {
      jj_scanpos = xsp;
      if (jj_3R_FirstLevelExpression_2337_9_342()) return true;
    }
    return false;
  }

  private boolean jj_3R_MathExpression_2316_21_182() {
    if (jj_scan_token(NULL_COALESCING)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2314_21_181() {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2312_21_180() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2310_21_179() {
    if (jj_scan_token(RSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2308_21_178() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2306_21_177() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2304_21_176() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2302_17_175() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2300_17_174() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2298_17_173() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MathExpression_2298_17_173()) {
      jj_scanpos = xsp;
      if (jj_3R_MathExpression_2300_17_174()) {
        jj_scanpos = xsp;
        if (jj_3R_MathExpression_2302_17_175()) {
          jj_scanpos = xsp;
          if (jj_3R_MathExpression_2304_21_176()) {
            jj_scanpos = xsp;
            if (jj_3R_MathExpression_2306_21_177()) {
              jj_scanpos = xsp;
              if (jj_3R_MathExpression_2308_21_178()) {
                jj_scanpos = xsp;
                if (jj_3R_MathExpression_2310_21_179()) {
                  jj_scanpos = xsp;
                  if (jj_3R_MathExpression_2312_21_180()) {
                    jj_scanpos = xsp;
                    if (jj_3R_MathExpression_2314_21_181()) {
                      jj_scanpos = xsp;
                      if (jj_3R_MathExpression_2316_21_182()) {
                        jj_scanpos = xsp;
                        if (jj_3R_MathExpression_2318_21_183()) {
                          jj_scanpos = xsp;
                          if (jj_3R_MathExpression_2320_21_184()) return true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (jj_3R_FirstLevelExpression_2333_5_185()) return true;
    return false;
  }

  private boolean jj_3R_CreateDatabaseStatement_5369_3_76() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(DATABASE)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_MathExpression_2293_5_172()) return true;
    return false;
  }

  private boolean jj_3R_MathExpression_2293_5_172() {
    if (jj_3R_FirstLevelExpression_2333_5_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_97()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_95() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_ArrayConcatExpressionElement_2281_9_475() {
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_ArrayConcatExpressionElement_2278_9_474() {
    if (jj_3R_MathExpression_2293_5_172()) return true;
    return false;
  }

  private boolean jj_3R_ArrayConcatExpressionElement_2275_9_473() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_ArrayConcatExpressionElement_2273_9_472() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_ArrayConcatExpressionElement_2271_9_471() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_ArrayConcatExpressionElement_2269_9_470() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_ArrayConcatExpressionElement_2268_5_339() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayConcatExpressionElement_2269_9_470()) {
      jj_scanpos = xsp;
      if (jj_3R_ArrayConcatExpressionElement_2271_9_471()) {
        jj_scanpos = xsp;
        if (jj_3R_ArrayConcatExpressionElement_2273_9_472()) {
          jj_scanpos = xsp;
          if (jj_3R_ArrayConcatExpressionElement_2275_9_473()) {
            jj_scanpos = xsp;
            if (jj_3R_ArrayConcatExpressionElement_2278_9_474()) {
              jj_scanpos = xsp;
              if (jj_3R_ArrayConcatExpressionElement_2281_9_475()) return true;
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_ArrayConcatExpression_2256_13_340() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_ArrayConcatExpressionElement_2268_5_339()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_MathExpression_2293_5_172()) return true;
    return false;
  }

  private boolean jj_3R_ArrayConcatExpression_2253_5_171() {
    if (jj_3R_ArrayConcatExpressionElement_2268_5_339()) return true;
    Token xsp;
    if (jj_3R_ArrayConcatExpression_2256_13_340()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArrayConcatExpression_2256_13_340()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5309_15_1045() {
    if (jj_scan_token(EXECUTE)) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5307_15_1044() {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3R_Expression_2241_9_284() {
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5305_15_1043() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5303_15_1042() {
    if (jj_scan_token(BEFORE)) return true;
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  private boolean jj_3R_Expression_2238_9_283() {
    if (jj_3R_MathExpression_2293_5_172()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_ArrayConcatExpression_2253_5_171()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5301_15_1041() {
    if (jj_scan_token(READ)) return true;
    return false;
  }

  private boolean jj_3R_Expression_2235_9_282() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5299_15_1040() {
    if (jj_scan_token(CREATE)) return true;
    return false;
  }

  private boolean jj_3R_Expression_2233_9_281() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_Expression_2231_9_280() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_Expression_2229_9_279() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5297_11_992() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterSecurityPolicyStatement_5299_15_1040()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterSecurityPolicyStatement_5301_15_1041()) {
        jj_scanpos = xsp;
        if (jj_3R_AlterSecurityPolicyStatement_5303_15_1042()) {
          jj_scanpos = xsp;
          if (jj_3R_AlterSecurityPolicyStatement_5305_15_1043()) {
            jj_scanpos = xsp;
            if (jj_3R_AlterSecurityPolicyStatement_5307_15_1044()) {
              jj_scanpos = xsp;
              if (jj_3R_AlterSecurityPolicyStatement_5309_15_1045()) return true;
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_Expression_2226_9_278() {
    if (jj_3R_ArrayConcatExpression_2253_5_171()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5294_11_991() {
    if (jj_scan_token(EXECUTE)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_ArraySingleValuesSelector_2039_5_168()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5292_11_990() {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_MethodCall_2130_5_169()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5290_11_989() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_OrBlock_2627_5_167()) return true;
    return false;
  }

  private boolean jj_3R_Expression_2225_5_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Expression_2226_9_278()) {
      jj_scanpos = xsp;
      if (jj_3R_Expression_2229_9_279()) {
        jj_scanpos = xsp;
        if (jj_3R_Expression_2231_9_280()) {
          jj_scanpos = xsp;
          if (jj_3R_Expression_2233_9_281()) {
            jj_scanpos = xsp;
            if (jj_3R_Expression_2235_9_282()) {
              jj_scanpos = xsp;
              if (jj_3R_Expression_2238_9_283()) {
                jj_scanpos = xsp;
                if (jj_3R_Expression_2241_9_284()) return true;
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5288_11_988() {
    if (jj_scan_token(BEFORE)) return true;
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  private boolean jj_3R_Modifier_2214_13_338() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_ArrayRangeSelector_2049_5_166()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5286_11_987() {
    if (jj_scan_token(READ)) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5284_11_986() {
    if (jj_scan_token(CREATE)) return true;
    return false;
  }

  private boolean jj_3R_Modifier_2211_13_337() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_SuffixIdentifier_2158_5_164()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_RightBinaryCondition_2874_3_165()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5276_18_1039() {
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Modifier_2201_21_469() {
    if (jj_3R_ArraySingleValuesSelector_2039_5_168()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5274_18_1038() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Modifier_2208_13_336() {
    if (jj_3R_MethodCall_2130_5_169()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5272_18_1037() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Modifier_2198_21_468() {
    if (jj_3R_OrBlock_2627_5_167()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5270_18_1036() {
    if (jj_scan_token(BEFORE)) return true;
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5281_7_814() {
    if (jj_scan_token(REMOVE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterSecurityPolicyStatement_5284_11_986()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterSecurityPolicyStatement_5286_11_987()) {
        jj_scanpos = xsp;
        if (jj_3R_AlterSecurityPolicyStatement_5288_11_988()) {
          jj_scanpos = xsp;
          if (jj_3R_AlterSecurityPolicyStatement_5290_11_989()) {
            jj_scanpos = xsp;
            if (jj_3R_AlterSecurityPolicyStatement_5292_11_990()) {
              jj_scanpos = xsp;
              if (jj_3R_AlterSecurityPolicyStatement_5294_11_991()) return true;
            }
          }
        }
      }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AlterSecurityPolicyStatement_5297_11_992()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_Modifier_2195_21_467() {
    if (jj_3R_ArrayRangeSelector_2049_5_166()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5268_18_1035() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5266_18_1034() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Modifier_2192_21_466() {
    if (jj_3R_RightBinaryCondition_2874_3_165()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5264_11_985() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterSecurityPolicyStatement_5266_18_1034()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterSecurityPolicyStatement_5268_18_1035()) {
        jj_scanpos = xsp;
        if (jj_3R_AlterSecurityPolicyStatement_5270_18_1036()) {
          jj_scanpos = xsp;
          if (jj_3R_AlterSecurityPolicyStatement_5272_18_1037()) {
            jj_scanpos = xsp;
            if (jj_3R_AlterSecurityPolicyStatement_5274_18_1038()) {
              jj_scanpos = xsp;
              if (jj_3R_AlterSecurityPolicyStatement_5276_18_1039()) return true;
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5262_13_984() {
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5260_13_983() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Modifier_2189_13_335() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Modifier_2192_21_466()) {
      jj_scanpos = xsp;
      if (jj_3R_Modifier_2195_21_467()) {
        jj_scanpos = xsp;
        if (jj_3R_Modifier_2198_21_468()) {
          jj_scanpos = xsp;
          if (jj_3R_Modifier_2201_21_469()) return true;
        }
      }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5258_13_982() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_FunctionCall_2118_81_454() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5256_13_981() {
    if (jj_scan_token(BEFORE)) return true;
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_SuffixIdentifier_2158_5_164()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5254_13_980() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_LevelZeroIdentifier_2143_5_163()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5252_13_979() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Modifier_2187_5_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Modifier_2189_13_335()) {
      jj_scanpos = xsp;
      if (jj_3R_Modifier_2208_13_336()) {
        jj_scanpos = xsp;
        if (jj_3R_Modifier_2211_13_337()) return true;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_Modifier_2214_13_338()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_BaseIdentifier_2178_9_573() {
    if (jj_3R_SuffixIdentifier_2158_5_164()) return true;
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5249_7_628() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterSecurityPolicyStatement_5249_7_813()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterSecurityPolicyStatement_5281_7_814()) return true;
    }
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5249_7_813() {
    if (jj_scan_token(SET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterSecurityPolicyStatement_5252_13_979()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterSecurityPolicyStatement_5254_13_980()) {
        jj_scanpos = xsp;
        if (jj_3R_AlterSecurityPolicyStatement_5256_13_981()) {
          jj_scanpos = xsp;
          if (jj_3R_AlterSecurityPolicyStatement_5258_13_982()) {
            jj_scanpos = xsp;
            if (jj_3R_AlterSecurityPolicyStatement_5260_13_983()) {
              jj_scanpos = xsp;
              if (jj_3R_AlterSecurityPolicyStatement_5262_13_984()) return true;
            }
          }
        }
      }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AlterSecurityPolicyStatement_5264_11_985()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_BaseIdentifier_2175_9_572() {
    if (jj_3R_LevelZeroIdentifier_2143_5_163()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_RecordAttribute_2098_5_162()) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_BaseIdentifier_2174_5_477() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BaseIdentifier_2175_9_572()) {
      jj_scanpos = xsp;
      if (jj_3R_BaseIdentifier_2178_9_573()) return true;
    }
    return false;
  }

  private boolean jj_3R_AlterSecurityPolicyStatement_5245_3_95() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(SECURITY)) return true;
    if (jj_scan_token(POLICY)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    if (jj_3R_AlterSecurityPolicyStatement_5249_7_628()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AlterSecurityPolicyStatement_5249_7_628()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5232_14_978() {
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_SuffixIdentifier_2165_9_324() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5230_14_977() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5228_14_976() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_SuffixIdentifier_2162_9_323() {
    if (jj_3R_RecordAttribute_2098_5_162()) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5226_14_975() {
    if (jj_scan_token(BEFORE)) return true;
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_Collection_3347_5_161()) return true;
    return false;
  }

  private boolean jj_3R_SuffixIdentifier_2159_9_322() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5224_14_974() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5222_14_973() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_FunctionCall_2109_5_160()) return true;
    return false;
  }

  private boolean jj_3R_SuffixIdentifier_2158_5_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SuffixIdentifier_2159_9_322()) {
      jj_scanpos = xsp;
      if (jj_3R_SuffixIdentifier_2162_9_323()) {
        jj_scanpos = xsp;
        if (jj_3R_SuffixIdentifier_2165_9_324()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_LevelZeroIdentifier_2149_9_321() {
    if (jj_3R_Collection_3347_5_161()) return true;
    return false;
  }

  private boolean jj_3R_LevelZeroIdentifier_2147_9_320() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5218_9_811() {
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5220_7_812() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateSecurityPolicyStatement_5222_14_973()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateSecurityPolicyStatement_5224_14_974()) {
        jj_scanpos = xsp;
        if (jj_3R_CreateSecurityPolicyStatement_5226_14_975()) {
          jj_scanpos = xsp;
          if (jj_3R_CreateSecurityPolicyStatement_5228_14_976()) {
            jj_scanpos = xsp;
            if (jj_3R_CreateSecurityPolicyStatement_5230_14_977()) {
              jj_scanpos = xsp;
              if (jj_3R_CreateSecurityPolicyStatement_5232_14_978()) return true;
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5216_9_810() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_LevelZeroIdentifier_2144_9_319() {
    if (jj_3R_FunctionCall_2109_5_160()) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5214_9_809() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5212_9_808() {
    if (jj_scan_token(BEFORE)) return true;
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_MethodCall_2134_15_465() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_LevelZeroIdentifier_2143_5_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LevelZeroIdentifier_2144_9_319()) {
      jj_scanpos = xsp;
      if (jj_3R_LevelZeroIdentifier_2147_9_320()) {
        jj_scanpos = xsp;
        if (jj_3R_LevelZeroIdentifier_2149_9_321()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5210_9_807() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_MethodCall_2133_13_334() {
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MethodCall_2134_15_465()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5208_9_806() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5206_5_627() {
    if (jj_scan_token(SET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateSecurityPolicyStatement_5208_9_806()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateSecurityPolicyStatement_5210_9_807()) {
        jj_scanpos = xsp;
        if (jj_3R_CreateSecurityPolicyStatement_5212_9_808()) {
          jj_scanpos = xsp;
          if (jj_3R_CreateSecurityPolicyStatement_5214_9_809()) {
            jj_scanpos = xsp;
            if (jj_3R_CreateSecurityPolicyStatement_5216_9_810()) {
              jj_scanpos = xsp;
              if (jj_3R_CreateSecurityPolicyStatement_5218_9_811()) return true;
            }
          }
        }
      }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateSecurityPolicyStatement_5220_7_812()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_MethodCall_2130_5_169() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MethodCall_2133_13_334()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_CreateSecurityPolicyStatement_5202_3_94() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(SECURITY)) return true;
    if (jj_scan_token(POLICY)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateSecurityPolicyStatement_5206_5_627()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_FunctionCall_2118_13_317() {
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FunctionCall_2118_81_454()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5191_11_879() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_SecurityResourceSegment_5156_5_693()) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5188_13_878() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5186_13_877() {
    if (jj_scan_token(CONTAINSVALUE)) return true;
    return false;
  }

  private boolean jj_3R_FunctionCall_2113_13_316() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5184_13_876() {
    if (jj_scan_token(CONTAINSKEY)) return true;
    return false;
  }

  private boolean jj_3R_FunctionCall_2111_13_315() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5182_13_875() {
    if (jj_scan_token(CONTAINSANY)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5180_13_874() {
    if (jj_scan_token(CONTAINSALL)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5178_13_873() {
    if (jj_scan_token(CONTAINS)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5176_13_872() {
    if (jj_scan_token(EDGE)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5174_13_871() {
    if (jj_scan_token(VERTEX)) return true;
    return false;
  }

  private boolean jj_3R_FunctionCall_2109_5_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FunctionCall_2111_13_315()) {
      jj_scanpos = xsp;
      if (jj_3R_FunctionCall_2113_13_316()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_FunctionCall_2118_13_317()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5172_13_870() {
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5170_13_869() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5168_13_868() {
    if (jj_scan_token(INSERT)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5166_13_867() {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5164_13_866() {
    if (jj_scan_token(CREATE)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5162_13_865() {
    if (jj_scan_token(CLUSTER)) return true;
    return false;
  }

  private boolean jj_3R_RecordAttribute_2098_5_162() {
    if (jj_scan_token(RECORD_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5160_13_864() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_Alias_2091_9_451() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5158_13_863() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_ArrayRangeSelector_2079_15_459() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_ArrayRangeSelector_2077_15_458() {
    if (jj_scan_token(RANGE)) return true;
    return false;
  }

  private boolean jj_3R_SecurityResourceSegment_5156_5_693() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SecurityResourceSegment_5158_13_863()) {
      jj_scanpos = xsp;
      if (jj_3R_SecurityResourceSegment_5160_13_864()) {
        jj_scanpos = xsp;
        if (jj_3R_SecurityResourceSegment_5162_13_865()) {
          jj_scanpos = xsp;
          if (jj_3R_SecurityResourceSegment_5164_13_866()) {
            jj_scanpos = xsp;
            if (jj_3R_SecurityResourceSegment_5166_13_867()) {
              jj_scanpos = xsp;
              if (jj_3R_SecurityResourceSegment_5168_13_868()) {
                jj_scanpos = xsp;
                if (jj_3R_SecurityResourceSegment_5170_13_869()) {
                  jj_scanpos = xsp;
                  if (jj_3R_SecurityResourceSegment_5172_13_870()) {
                    jj_scanpos = xsp;
                    if (jj_3R_SecurityResourceSegment_5174_13_871()) {
                      jj_scanpos = xsp;
                      if (jj_3R_SecurityResourceSegment_5176_13_872()) {
                        jj_scanpos = xsp;
                        if (jj_3R_SecurityResourceSegment_5178_13_873()) {
                          jj_scanpos = xsp;
                          if (jj_3R_SecurityResourceSegment_5180_13_874()) {
                            jj_scanpos = xsp;
                            if (jj_3R_SecurityResourceSegment_5182_13_875()) {
                              jj_scanpos = xsp;
                              if (jj_3R_SecurityResourceSegment_5184_13_876()) {
                                jj_scanpos = xsp;
                                if (jj_3R_SecurityResourceSegment_5186_13_877()) {
                                  jj_scanpos = xsp;
                                  if (jj_3R_SecurityResourceSegment_5188_13_878()) return true;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_SecurityResourceSegment_5191_11_879()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_168() {
    if (jj_3R_StatementSemicolon_895_5_74()) return true;
    return false;
  }

  private boolean jj_3R_ArrayRangeSelector_2074_9_329() {
    if (jj_3R_ArrayNumberSelector_2020_5_457()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayRangeSelector_2077_15_458()) {
      jj_scanpos = xsp;
      if (jj_3R_ArrayRangeSelector_2079_15_459()) return true;
    }
    if (jj_3R_ArrayNumberSelector_2020_5_457()) return true;
    return false;
  }

  private boolean jj_3R_WhileBlock_5144_9_1062() {
    if (jj_3R_WhileBlock_5132_5_1003()) return true;
    return false;
  }

  private boolean jj_3R_WhileBlock_5142_9_1061() {
    if (jj_3R_ForEachBlock_5104_5_1004()) return true;
    return false;
  }

  private boolean jj_3R_WhileBlock_5140_9_1060() {
    if (jj_3R_IfStatement_4862_5_262()) return true;
    return false;
  }

  private boolean jj_3R_WhileBlock_5137_9_1059() {
    if (jj_3R_StatementSemicolon_895_5_74()) return true;
    return false;
  }

  private boolean jj_3R_WhileBlock_5137_9_1050() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_WhileBlock_5137_9_1059()) {
      jj_scanpos = xsp;
      if (jj_3R_WhileBlock_5140_9_1060()) {
        jj_scanpos = xsp;
        if (jj_3R_WhileBlock_5142_9_1061()) {
          jj_scanpos = xsp;
          if (jj_3R_WhileBlock_5144_9_1062()) {
            jj_scanpos = xsp;
            if (jj_scan_token(199)) return true;
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_ArrayRangeSelector_2062_9_328() {
    if (jj_scan_token(ELLIPSIS_INTEGER_RANGE)) return true;
    return false;
  }

  private boolean jj_3R_WhileBlock_5132_5_1003() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_WhileBlock_5137_9_1050()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_ArrayRangeSelector_2051_9_327() {
    if (jj_scan_token(INTEGER_RANGE)) return true;
    return false;
  }

  private boolean jj_3_167() {
    if (jj_3R_StatementSemicolon_895_5_74()) return true;
    return false;
  }

  private boolean jj_3R_ForEachBlock_5118_9_1066() {
    if (jj_3R_WhileBlock_5132_5_1003()) return true;
    return false;
  }

  private boolean jj_3R_ForEachBlock_5116_9_1065() {
    if (jj_3R_ForEachBlock_5104_5_1004()) return true;
    return false;
  }

  private boolean jj_3R_ArrayRangeSelector_2049_5_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayRangeSelector_2051_9_327()) {
      jj_scanpos = xsp;
      if (jj_3R_ArrayRangeSelector_2062_9_328()) {
        jj_scanpos = xsp;
        if (jj_3R_ArrayRangeSelector_2074_9_329()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_ForEachBlock_5114_9_1064() {
    if (jj_3R_IfStatement_4862_5_262()) return true;
    return false;
  }

  private boolean jj_3R_ArraySingleValuesSelector_2041_11_333() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ArraySelector_2004_5_332()) return true;
    return false;
  }

  private boolean jj_3R_ForEachBlock_5111_9_1063() {
    if (jj_3R_StatementSemicolon_895_5_74()) return true;
    return false;
  }

  private boolean jj_3R_ForEachBlock_5111_9_1051() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForEachBlock_5111_9_1063()) {
      jj_scanpos = xsp;
      if (jj_3R_ForEachBlock_5114_9_1064()) {
        jj_scanpos = xsp;
        if (jj_3R_ForEachBlock_5116_9_1065()) {
          jj_scanpos = xsp;
          if (jj_3R_ForEachBlock_5118_9_1066()) {
            jj_scanpos = xsp;
            if (jj_scan_token(199)) return true;
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_ArraySingleValuesSelector_2039_5_168() {
    if (jj_3R_ArraySelector_2004_5_332()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArraySingleValuesSelector_2041_11_333()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_ForEachBlock_5104_5_1004() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ForEachBlock_5111_9_1051()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_ArrayNumberSelector_2024_9_560() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_ArrayNumberSelector_2021_9_559() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_ArrayNumberSelector_2020_5_457() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayNumberSelector_2021_9_559()) {
      jj_scanpos = xsp;
      if (jj_3R_ArrayNumberSelector_2024_9_560()) return true;
    }
    return false;
  }

  private boolean jj_3R_HaSetStatement_5089_5_122() {
    if (jj_scan_token(HA)) return true;
    if (jj_scan_token(SET)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_ArraySelector_2011_9_464() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_HaSyncClusterStatement_5076_13_895() {
    if (jj_scan_token(285)) return true;
    return false;
  }

  private boolean jj_3R_ArraySelector_2008_9_463() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_ArraySelector_2005_9_462() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_HaSyncClusterStatement_5072_13_697() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_HaSyncClusterStatement_5072_13_894()) {
      jj_scanpos = xsp;
      if (jj_3R_HaSyncClusterStatement_5076_13_895()) return true;
    }
    return false;
  }

  private boolean jj_3R_HaSyncClusterStatement_5072_13_894() {
    if (jj_scan_token(284)) return true;
    return false;
  }

  private boolean jj_3R_ArraySelector_2004_5_332() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArraySelector_2005_9_462()) {
      jj_scanpos = xsp;
      if (jj_3R_ArraySelector_2008_9_463()) {
        jj_scanpos = xsp;
        if (jj_3R_ArraySelector_2011_9_464()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_HaSyncClusterStatement_5068_5_121() {
    if (jj_scan_token(HA)) return true;
    if (jj_scan_token(SYNC)) return true;
    if (jj_scan_token(CLUSTER)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_HaSyncClusterStatement_5072_13_697()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_NestedProjectionItem_1995_6_758() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_NestedProjectionItem_1991_10_935() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_NestedProjectionItem_1994_6_757() {
    if (jj_3R_NestedProjection_1950_3_450()) return true;
    return false;
  }

  private boolean jj_3R_NestedProjectionItem_1989_10_934() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_HaSyncDatabaseStatement_5059_11_893() {
    if (jj_scan_token(283)) return true;
    return false;
  }

  private boolean jj_3R_HaSyncDatabaseStatement_5057_11_696() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_HaSyncDatabaseStatement_5057_11_892()) {
      jj_scanpos = xsp;
      if (jj_3R_HaSyncDatabaseStatement_5059_11_893()) return true;
    }
    return false;
  }

  private boolean jj_3R_HaSyncDatabaseStatement_5057_11_892() {
    if (jj_scan_token(282)) return true;
    return false;
  }

  private boolean jj_3R_NestedProjectionItem_1988_7_756() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NestedProjectionItem_1989_10_934()) jj_scanpos = xsp;
    if (jj_3R_Expression_2225_5_144()) return true;
    xsp = jj_scanpos;
    if (jj_3R_NestedProjectionItem_1991_10_935()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Projection_1924_70_699() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ProjectionItem_1937_1_157()) return true;
    return false;
  }

  private boolean jj_3R_NestedProjectionItem_1985_7_755() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_HaSyncDatabaseStatement_5054_5_120() {
    if (jj_scan_token(HA)) return true;
    if (jj_scan_token(SYNC)) return true;
    if (jj_scan_token(DATABASE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_HaSyncDatabaseStatement_5057_11_696()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_NestedProjectionItem_1983_3_553() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NestedProjectionItem_1985_7_755()) {
      jj_scanpos = xsp;
      if (jj_3R_NestedProjectionItem_1988_7_756()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_NestedProjectionItem_1994_6_757()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_NestedProjectionItem_1995_6_758()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Projection_1918_66_698() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ProjectionItem_1937_1_157()) return true;
    return false;
  }

  private boolean jj_3R_HaRemoveServerStatement_5044_5_118() {
    if (jj_scan_token(HA)) return true;
    if (jj_scan_token(REMOVE)) return true;
    if (jj_scan_token(SERVER)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5035_13_891() {
    if (jj_scan_token(281)) return true;
    return false;
  }

  private boolean jj_3R_NestedProjection_1962_7_554() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NestedProjectionItem_1983_3_553()) return true;
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5027_13_890() {
    if (jj_scan_token(280)) return true;
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5025_13_889() {
    if (jj_scan_token(279)) return true;
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5023_13_888() {
    if (jj_scan_token(278)) return true;
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5021_13_887() {
    if (jj_scan_token(277)) return true;
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5019_13_886() {
    if (jj_scan_token(276)) return true;
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5017_13_695() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_HaStatusStatement_5017_13_885()) {
      jj_scanpos = xsp;
      if (jj_3R_HaStatusStatement_5019_13_886()) {
        jj_scanpos = xsp;
        if (jj_3R_HaStatusStatement_5021_13_887()) {
          jj_scanpos = xsp;
          if (jj_3R_HaStatusStatement_5023_13_888()) {
            jj_scanpos = xsp;
            if (jj_3R_HaStatusStatement_5025_13_889()) {
              jj_scanpos = xsp;
              if (jj_3R_HaStatusStatement_5027_13_890()) {
                jj_scanpos = xsp;
                if (jj_3R_HaStatusStatement_5035_13_891()) return true;
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5017_13_885() {
    if (jj_scan_token(275)) return true;
    return false;
  }

  private boolean jj_3R_NestedProjection_1950_3_450() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_NestedProjectionItem_1983_3_553()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_NestedProjection_1962_7_554()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_ProjectionItem_1941_7_311() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_Alias_2091_9_451()) return true;
    return false;
  }

  private boolean jj_3R_HaStatusStatement_5014_5_119() {
    if (jj_scan_token(HA)) return true;
    if (jj_scan_token(STATUS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_HaStatusStatement_5017_13_695()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_ProjectionItem_1940_7_310() {
    if (jj_3R_NestedProjection_1950_3_450()) return true;
    return false;
  }

  private boolean jj_3R_ProjectionItem_1938_6_309() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_DropSequenceStatement_5003_11_673() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_ProjectionItem_1937_1_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ProjectionItem_1938_6_309()) jj_scanpos = xsp;
    if (jj_3R_Expression_2225_5_144()) return true;
    xsp = jj_scanpos;
    if (jj_3R_ProjectionItem_1940_7_310()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ProjectionItem_1941_7_311()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_ProjectionItem_1937_1_157()) return true;
    return false;
  }

  private boolean jj_3R_DropSequenceStatement_5000_5_109() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(SEQUENCE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DropSequenceStatement_5003_11_673()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Projection_1921_9_511() {
    if (jj_scan_token(DISTINCT)) return true;
    if (jj_3R_ProjectionItem_1937_1_157()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Projection_1924_70_699()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4988_13_840() {
    if (jj_scan_token(NOLIMIT)) return true;
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4986_13_839() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4976_21_997() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4984_13_838() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3R_Projection_1916_9_510() {
    if (jj_3R_ProjectionItem_1937_1_157()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Projection_1918_66_698()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4982_13_837() {
    if (jj_scan_token(CACHE)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4972_21_996() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_Projection_1915_5_403() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Projection_1916_9_510()) {
      jj_scanpos = xsp;
      if (jj_3R_Projection_1921_9_511()) return true;
    }
    return false;
  }

  private boolean jj_3R_NamedParameter_1895_17_556() {
    if (jj_scan_token(SKIP2)) return true;
    return false;
  }

  private boolean jj_3R_NamedParameter_1899_13_558() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4969_13_836() {
    if (jj_scan_token(CYCLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterSequenceStatement_4972_21_996()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterSequenceStatement_4976_21_997()) return true;
    }
    return false;
  }

  private boolean jj_3R_NamedParameter_1893_17_555() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_NamedParameter_1897_13_557() {
    if (jj_scan_token(LIMIT)) return true;
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4967_13_835() {
    if (jj_scan_token(LIMIT)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4965_13_834() {
    if (jj_scan_token(INCREMENT)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4963_13_657() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterSequenceStatement_4963_13_833()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterSequenceStatement_4965_13_834()) {
        jj_scanpos = xsp;
        if (jj_3R_AlterSequenceStatement_4967_13_835()) {
          jj_scanpos = xsp;
          if (jj_3R_AlterSequenceStatement_4969_13_836()) {
            jj_scanpos = xsp;
            if (jj_3R_AlterSequenceStatement_4982_13_837()) {
              jj_scanpos = xsp;
              if (jj_3R_AlterSequenceStatement_4984_13_838()) {
                jj_scanpos = xsp;
                if (jj_3R_AlterSequenceStatement_4986_13_839()) {
                  jj_scanpos = xsp;
                  if (jj_3R_AlterSequenceStatement_4988_13_840()) return true;
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4963_13_833() {
    if (jj_scan_token(START)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_NamedParameter_1890_5_453() {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NamedParameter_1893_17_555()) {
      jj_scanpos = xsp;
      if (jj_3R_NamedParameter_1895_17_556()) {
        jj_scanpos = xsp;
        if (jj_3R_NamedParameter_1897_13_557()) {
          jj_scanpos = xsp;
          if (jj_3R_NamedParameter_1899_13_558()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_AlterSequenceStatement_4959_5_107() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(SEQUENCE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AlterSequenceStatement_4963_13_657()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CreateEdgeStatement_1844_47_822() {
    if (jj_scan_token(CLUSTER)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4948_13_821() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4938_21_994() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4946_13_820() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4944_13_819() {
    if (jj_scan_token(CACHE)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_PositionalParameter_1876_9_452() {
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4934_21_993() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_InputParameter_1868_13_314() {
    if (jj_3R_NamedParameter_1890_5_453()) return true;
    return false;
  }

  private boolean jj_3R_InputParameter_1866_13_313() {
    if (jj_3R_PositionalParameter_1876_9_452()) return true;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4931_13_818() {
    if (jj_scan_token(CYCLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateSequenceStatement_4934_21_993()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateSequenceStatement_4938_21_994()) return true;
    }
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4929_13_817() {
    if (jj_scan_token(LIMIT)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_InputParameter_1865_5_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InputParameter_1866_13_313()) {
      jj_scanpos = xsp;
      if (jj_3R_InputParameter_1868_13_314()) return true;
    }
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4927_13_816() {
    if (jj_scan_token(INCREMENT)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4925_13_630() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateSequenceStatement_4925_13_815()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateSequenceStatement_4927_13_816()) {
        jj_scanpos = xsp;
        if (jj_3R_CreateSequenceStatement_4929_13_817()) {
          jj_scanpos = xsp;
          if (jj_3R_CreateSequenceStatement_4931_13_818()) {
            jj_scanpos = xsp;
            if (jj_3R_CreateSequenceStatement_4944_13_819()) {
              jj_scanpos = xsp;
              if (jj_3R_CreateSequenceStatement_4946_13_820()) {
                jj_scanpos = xsp;
                if (jj_3R_CreateSequenceStatement_4948_13_821()) return true;
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4925_13_815() {
    if (jj_scan_token(START)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_CreateEdgeStatement_1857_7_636() {
    if (jj_3R_Batch_3289_5_439()) return true;
    return false;
  }

  private boolean jj_3R_CreateEdgeStatement_1856_7_635() {
    if (jj_3R_Wait_3320_5_824()) return true;
    return false;
  }

  private boolean jj_3R_CreateEdgeStatement_1855_7_634() {
    if (jj_3R_Retry_3330_5_823()) return true;
    return false;
  }

  private boolean jj_3R_CreateEdgeStatement_1854_7_633() {
    if (jj_3R_InsertBody_1690_5_151()) return true;
    return false;
  }

  private boolean jj_3R_CreateEdgeStatement_1845_11_632() {
    if (jj_scan_token(UPSERT)) return true;
    return false;
  }

  private boolean jj_3R_CreateEdgeStatement_1844_11_631() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateEdgeStatement_1844_47_822()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4912_11_629() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_CreateSequenceStatement_4909_5_96() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(SEQUENCE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateSequenceStatement_4912_11_629()) jj_scanpos = xsp;
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateSequenceStatement_4925_13_630()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CreateEdgeStatement_1841_1_100() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(EDGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateEdgeStatement_1844_11_631()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateEdgeStatement_1845_11_632()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    xsp = jj_scanpos;
    if (jj_3R_CreateEdgeStatement_1854_7_633()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateEdgeStatement_1855_7_634()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateEdgeStatement_1856_7_635()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateEdgeStatement_1857_7_636()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MoveVertexStatement_1831_8_647() {
    if (jj_3R_Batch_3289_5_439()) return true;
    return false;
  }

  private boolean jj_3R_MoveVertexStatement_1830_8_646() {
    if (jj_3R_UpdateOperations_1533_5_405()) return true;
    return false;
  }

  private boolean jj_3R_MoveVertexStatement_1824_9_645() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CommitStatement_4826_76_1058() {
    if (jj_scan_token(FAIL)) return true;
    return false;
  }

  private boolean jj_3R_MoveVertexStatement_1822_9_644() {
    if (jj_3R_Cluster_2531_5_156()) return true;
    return false;
  }

  private boolean jj_3R_ConsoleStatement_4895_5_261() {
    if (jj_scan_token(CONSOLE)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_CommitStatement_4830_66_1049() {
    if (jj_scan_token(FAIL)) return true;
    return false;
  }

  private boolean jj_3R_MoveVertexStatement_1817_3_251() {
    if (jj_scan_token(MOVE)) return true;
    if (jj_scan_token(VERTEX)) return true;
    if (jj_3R_FromItem_2450_5_404()) return true;
    if (jj_scan_token(TO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MoveVertexStatement_1822_9_644()) {
      jj_scanpos = xsp;
      if (jj_3R_MoveVertexStatement_1824_9_645()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_MoveVertexStatement_1830_8_646()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_MoveVertexStatement_1831_8_647()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_InsertBody_1690_5_151()) return true;
    return false;
  }

  private boolean jj_3R_SleepStatement_4886_5_260() {
    if (jj_scan_token(SLEEP)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_Cluster_2531_5_156()) return true;
    return false;
  }

  private boolean jj_3_166() {
    if (jj_3R_StatementSemicolon_895_5_74()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_4874_13_884() {
    if (jj_3R_ForEachBlock_5104_5_1004()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_4872_13_883() {
    if (jj_3R_WhileBlock_5132_5_1003()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_4870_13_882() {
    if (jj_3R_IfStatement_4862_5_262()) return true;
    return false;
  }

  private boolean jj_3R_CreateVertexStatement_1790_21_402() {
    if (jj_scan_token(CLUSTER)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateVertexStatement_1799_11_241() {
    if (jj_3R_InsertBody_1690_5_151()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateVertexStatement_1798_11_240() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_Projection_1915_5_403()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_4867_13_694() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IfStatement_4867_13_881()) {
      jj_scanpos = xsp;
      if (jj_3R_IfStatement_4870_13_882()) {
        jj_scanpos = xsp;
        if (jj_3R_IfStatement_4872_13_883()) {
          jj_scanpos = xsp;
          if (jj_3R_IfStatement_4874_13_884()) {
            jj_scanpos = xsp;
            if (jj_scan_token(199)) return true;
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_IfStatement_4867_13_881() {
    if (jj_3R_StatementSemicolon_895_5_74()) return true;
    return false;
  }

  private boolean jj_3R_CreateVertexStatement_1795_13_239() {
    if (jj_3R_Cluster_2531_5_156()) return true;
    return false;
  }

  private boolean jj_3R_CreateVertexStatementNoTarget_1807_1_97() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(VERTEX)) return true;
    if (jj_3R_InsertBody_1690_5_151()) return true;
    return false;
  }

  private boolean jj_3R_CreateVertexStatement_1786_13_238() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateVertexStatement_1790_21_402()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_IfStatement_4862_5_262() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_IfStatement_4867_13_694()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_ReturnStatement_4853_13_423() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1760_29_551() {
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1762_25_552() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_CommitStatement_4826_29_1057() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_ReturnStatement_4850_5_259() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ReturnStatement_4853_13_423()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateVertexStatement_1782_1_98() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(VERTEX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateVertexStatement_1786_13_238()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateVertexStatement_1795_13_239()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_CreateVertexStatement_1798_11_240()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateVertexStatement_1799_11_241()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateVertexStatementEmptyNoTarget_1774_9_99() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(VERTEX)) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1758_25_449() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertBody_1760_29_551()) {
      jj_scanpos = xsp;
      if (jj_3R_InsertBody_1762_25_552()) return true;
    }
    return false;
  }

  private boolean jj_3R_CommitStatement_4830_19_1048() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_CommitStatement_4826_21_1047() {
    if (jj_scan_token(AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CommitStatement_4826_29_1057()) {
      jj_scanpos = xsp;
      if (jj_3R_CommitStatement_4826_76_1058()) return true;
    }
    return false;
  }

  private boolean jj_3R_CommitStatement_4830_17_1002() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CommitStatement_4830_19_1048()) {
      jj_scanpos = xsp;
      if (jj_3R_CommitStatement_4830_66_1049()) return true;
    }
    return false;
  }

  private boolean jj_3R_InsertBody_1755_21_448() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_RollbackStatement_4841_5_258() {
    if (jj_scan_token(ROLLBACK)) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1753_21_447() {
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_CommitStatement_4821_21_1046() {
    if (jj_3R_StatementInternal_910_5_80()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1751_13_305() {
    if (jj_scan_token(CONTENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertBody_1753_21_447()) {
      jj_scanpos = xsp;
      if (jj_3R_InsertBody_1755_21_448()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InsertBody_1758_25_449()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CommitStatement_4817_17_1001() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_CommitStatement_4821_21_1046()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CommitStatement_4821_21_1046()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_CommitStatement_4826_21_1047()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_InsertBody_1742_21_446() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_CommitStatement_4815_15_880() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CommitStatement_4817_17_1001()) {
      jj_scanpos = xsp;
      if (jj_3R_CommitStatement_4830_17_1002()) return true;
    }
    return false;
  }

  private boolean jj_3R_CommitStatement_4812_13_422() {
    if (jj_scan_token(RETRY)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CommitStatement_4815_15_880()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_InsertBody_1725_25_550() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(SET)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InsertBody_1742_21_446()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CommitStatement_4809_5_257() {
    if (jj_scan_token(COMMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CommitStatement_4812_13_422()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_165() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_BeginStatement_4801_11_421() {
    if (jj_scan_token(ISOLATION)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1717_21_445() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InsertBody_1725_25_550()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_164() {
    if (jj_3R_Statement_887_5_224()) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1712_21_444() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_BeginStatement_4799_5_256() {
    if (jj_scan_token(BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BeginStatement_4801_11_421()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_LetStatement_4789_13_509() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_LetStatement_4786_13_508() {
    if (jj_3R_StatementInternal_910_5_80()) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1700_21_155() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_LetStatement_4781_5_401() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LetStatement_4786_13_508()) {
      jj_scanpos = xsp;
      if (jj_3R_LetStatement_4789_13_509()) return true;
    }
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InsertBody_1700_21_155()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(VALUES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InsertBody_1712_21_444()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InsertBody_1717_21_445()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3R_InsertBody_1690_5_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
      jj_scanpos = xsp;
      if (jj_3_70()) {
        jj_scanpos = xsp;
        if (jj_3R_InsertBody_1751_13_305()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_InsertStatement_1645_49_763() {
    if (jj_scan_token(CLUSTER)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1669_21_153() {
    if (jj_3R_SelectWithoutTargetStatement_1115_5_306()) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1666_21_152() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3R_AlterSystemRoleStatement_4754_3_78() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(SYSTEM)) return true;
    if (jj_scan_token(ROLE)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1676_7_569() {
    if (jj_scan_token(UNSAFE)) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1659_18_950() {
    if (jj_3R_SelectWithoutTargetStatement_1115_5_306()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1666_21_152()) {
      jj_scanpos = xsp;
      if (jj_3R_InsertStatement_1669_21_153()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1656_18_949() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3R_AlterRoleStatement_4738_7_805() {
    if (jj_scan_token(REMOVE)) return true;
    if (jj_scan_token(POLICY)) return true;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_SecurityResourceSegment_5156_5_693()) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1655_14_765() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1656_18_949()) {
      jj_scanpos = xsp;
      if (jj_3R_InsertStatement_1659_18_950()) return true;
    }
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_InsertBody_1690_5_151()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_IndexIdentifier_2595_5_150()) return true;
    return false;
  }

  private boolean jj_3R_AlterRoleStatement_4729_7_626() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterRoleStatement_4729_7_804()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterRoleStatement_4738_7_805()) return true;
    }
    return false;
  }

  private boolean jj_3R_AlterRoleStatement_4729_7_804() {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(POLICY)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_SecurityResourceSegment_5156_5_693()) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1653_11_764() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_UpdateRemoveItem_1621_43_906() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1653_9_568() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1653_11_764()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1655_14_765()) {
      jj_scanpos = xsp;
      if (jj_3_68()) return true;
    }
    return false;
  }

  private boolean jj_3R_InsertStatement_1647_13_565() {
    if (jj_3R_Cluster_2531_5_156()) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1645_13_564() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1645_49_763()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_InsertStatement_1651_7_567() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_Projection_1915_5_403()) return true;
    return false;
  }

  private boolean jj_3R_InsertStatement_1650_7_566() {
    if (jj_3R_InsertBody_1690_5_151()) return true;
    return false;
  }

  private boolean jj_3R_AlterRoleStatement_4725_3_93() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(ROLE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    if (jj_3R_AlterRoleStatement_4729_7_626()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AlterRoleStatement_4729_7_626()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_InsertStatement_1642_13_563() {
    if (jj_3R_IndexIdentifier_2595_5_150()) return true;
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4696_21_1033() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_DropUserStatement_4712_5_92() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(USER)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4694_18_972() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateUserStatement_4696_21_1033()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_InsertStatement_1638_1_250() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1642_13_563()) {
      jj_scanpos = xsp;
      if (jj_3R_InsertStatement_1645_13_564()) {
        jj_scanpos = xsp;
        if (jj_3R_InsertStatement_1647_13_565()) return true;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1650_7_566()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1651_7_567()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1653_9_568()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_InsertStatement_1676_7_569()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_UpdatePutItem_1629_5_711() {
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4691_13_803() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateUserStatement_4694_18_972()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4684_13_802() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_UpdateRemoveItem_1620_5_719() {
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateRemoveItem_1621_43_906()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_UpdateIncrementItem_1610_15_905() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4682_11_625() {
    if (jj_scan_token(ROLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateUserStatement_4684_13_802()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateUserStatement_4691_13_803()) return true;
    }
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4679_13_624() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4677_13_623() {
    if (jj_3R_String_567_5_498()) return true;
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4675_13_622() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_UpdateIncrementItem_1608_5_717() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateIncrementItem_1610_15_905()) jj_scanpos = xsp;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_UpdateItem_1599_9_904() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_UpdateItem_1593_13_901() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_UpdateItem_1597_9_903() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_UpdateItem_1591_13_900() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_UpdateItem_1595_9_902() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_CreateUserStatement_4670_5_91() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(USER)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(IDENTIFIED)) return true;
    if (jj_scan_token(BY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateUserStatement_4675_13_622()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateUserStatement_4677_13_623()) {
        jj_scanpos = xsp;
        if (jj_3R_CreateUserStatement_4679_13_624()) return true;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_CreateUserStatement_4682_11_625()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1502_101_408() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  private boolean jj_3R_UpdateItem_1589_11_899() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1575_17_720() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_UpdateRemoveItem_1620_5_719()) return true;
    return false;
  }

  private boolean jj_3R_UpdateItem_1587_1_709() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateItem_1589_11_899()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateItem_1591_13_900()) {
      jj_scanpos = xsp;
      if (jj_3R_UpdateItem_1593_13_901()) {
        jj_scanpos = xsp;
        if (jj_3R_UpdateItem_1595_9_902()) {
          jj_scanpos = xsp;
          if (jj_3R_UpdateItem_1597_9_903()) {
            jj_scanpos = xsp;
            if (jj_3R_UpdateItem_1599_9_904()) return true;
          }
        }
      }
    }
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_ExistsSystemUserStatement_4652_5_79() {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(SYSTEM)) return true;
    if (jj_scan_token(USER)) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1567_17_718() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_UpdateIncrementItem_1608_5_717()) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1571_10_525() {
    if (jj_scan_token(REMOVE)) return true;
    if (jj_3R_UpdateRemoveItem_1620_5_719()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_UpdateOperations_1575_17_720()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_UpdateOperations_1563_17_716() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1561_17_715() {
    if (jj_scan_token(INCREMENT)) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1554_17_714() {
    if (jj_scan_token(CONTENT)) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1552_17_713() {
    if (jj_scan_token(MERGE)) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1559_9_524() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateOperations_1561_17_715()) {
      jj_scanpos = xsp;
      if (jj_3R_UpdateOperations_1563_17_716()) return true;
    }
    if (jj_3R_UpdateIncrementItem_1608_5_717()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_UpdateOperations_1567_17_718()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_UpdateOperations_1546_17_712() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_UpdatePutItem_1629_5_711()) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1502_59_407() {
    if (jj_scan_token(AFTER)) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1550_9_523() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateOperations_1552_17_713()) {
      jj_scanpos = xsp;
      if (jj_3R_UpdateOperations_1554_17_714()) return true;
    }
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1538_17_710() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_UpdateItem_1587_1_709()) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1542_9_522() {
    if (jj_scan_token(PUT)) return true;
    if (jj_3R_UpdatePutItem_1629_5_711()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_UpdateOperations_1546_17_712()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CreateSystemUserStatement_4612_5_77() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(SYSTEM)) return true;
    if (jj_scan_token(USER)) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1534_9_521() {
    if (jj_scan_token(SET)) return true;
    if (jj_3R_UpdateItem_1587_1_709()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_UpdateOperations_1538_17_710()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CreateFunctionStatement_4598_13_621() {
    if (jj_scan_token(LANGUAGE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateFunctionStatement_4594_17_801() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_UpdateOperations_1533_5_405() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateOperations_1534_9_521()) {
      jj_scanpos = xsp;
      if (jj_3R_UpdateOperations_1542_9_522()) {
        jj_scanpos = xsp;
        if (jj_3R_UpdateOperations_1550_9_523()) {
          jj_scanpos = xsp;
          if (jj_3R_UpdateOperations_1559_9_524()) {
            jj_scanpos = xsp;
            if (jj_3R_UpdateOperations_1571_10_525()) return true;
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_CreateFunctionStatement_4592_17_800() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1516_17_414() {
    if (jj_scan_token(DEFAULT_)) return true;
    return false;
  }

  private boolean jj_3R_CreateFunctionStatement_4590_13_620() {
    if (jj_scan_token(IDEMPOTENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateFunctionStatement_4592_17_800()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateFunctionStatement_4594_17_801()) return true;
    }
    return false;
  }

  private boolean jj_3R_UpdateStatement_1520_11_249() {
    if (jj_3R_Timeout_3303_5_416()) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1514_17_413() {
    if (jj_scan_token(SHARED)) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1468_63_826() {
    if (jj_scan_token(AFTER)) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1519_11_248() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_CreateFunctionStatement_4584_17_799() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1512_17_412() {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1510_17_411() {
    if (jj_scan_token(RECORD)) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1504_17_409() {
    if (jj_3R_Projection_1915_5_403()) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1508_11_247() {
    if (jj_scan_token(LOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1510_17_411()) {
      jj_scanpos = xsp;
      if (jj_3R_UpdateStatement_1512_17_412()) {
        jj_scanpos = xsp;
        if (jj_3R_UpdateStatement_1514_17_413()) {
          jj_scanpos = xsp;
          if (jj_3R_UpdateStatement_1516_17_414()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_CreateFunctionStatement_4577_13_619() {
    if (jj_scan_token(PARAMETERS)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateFunctionStatement_4584_17_799()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1507_11_246() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1502_15_406() {
    if (jj_scan_token(BEFORE)) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1501_13_245() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1502_15_406()) {
      jj_scanpos = xsp;
      if (jj_3R_UpdateStatement_1502_59_407()) {
        jj_scanpos = xsp;
        if (jj_3R_UpdateStatement_1502_101_408()) return true;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1504_17_409()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1499_11_244() {
    if (jj_scan_token(UPSERT)) return true;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1498_11_243() {
    if (jj_3R_UpdateOperations_1533_5_405()) return true;
    return false;
  }

  private boolean jj_3R_CreateFunctionStatement_4569_5_90() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_3R_String_567_5_498()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateFunctionStatement_4577_13_619()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateFunctionStatement_4590_13_620()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateFunctionStatement_4598_13_621()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_UpdateStatement_1495_5_102() {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_3R_FromClause_2404_9_242()) return true;
    Token xsp;
    if (jj_3R_UpdateStatement_1498_11_243()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_UpdateStatement_1498_11_243()) {
        jj_scanpos = xsp;
        break;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1499_11_244()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1501_13_245()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1507_11_246()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1508_11_247()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1519_11_248()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateStatement_1520_11_249()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1486_11_643() {
    if (jj_3R_Timeout_3303_5_416()) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1485_11_642() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1470_25_827() {
    if (jj_3R_Projection_1915_5_403()) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1482_13_831() {
    if (jj_scan_token(DEFAULT_)) return true;
    return false;
  }

  private boolean jj_3R_RevokeStatement_4553_13_420() {
    if (jj_3R_Permission_4505_5_529()) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1480_13_830() {
    if (jj_scan_token(SHARED)) return true;
    return false;
  }

  private boolean jj_3R_RevokeStatement_4551_13_419() {
    if (jj_scan_token(POLICY)) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1478_13_829() {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1476_13_828() {
    if (jj_scan_token(RECORD)) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1468_19_825() {
    if (jj_scan_token(BEFORE)) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1474_11_641() {
    if (jj_scan_token(LOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1476_13_828()) {
      jj_scanpos = xsp;
      if (jj_3R_UpdateEdgeStatement_1478_13_829()) {
        jj_scanpos = xsp;
        if (jj_3R_UpdateEdgeStatement_1480_13_830()) {
          jj_scanpos = xsp;
          if (jj_3R_UpdateEdgeStatement_1482_13_831()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1467_17_639() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1468_19_825()) {
      jj_scanpos = xsp;
      if (jj_3R_UpdateEdgeStatement_1468_63_826()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1470_25_827()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1473_11_640() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_RevokeStatement_4548_5_255() {
    if (jj_scan_token(REVOKE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RevokeStatement_4551_13_419()) {
      jj_scanpos = xsp;
      if (jj_3R_RevokeStatement_4553_13_420()) return true;
    }
    if (jj_scan_token(ON)) return true;
    if (jj_3R_SecurityResourceSegment_5156_5_693()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_GrantStatement_4535_13_418() {
    if (jj_3R_Permission_4505_5_529()) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1465_11_638() {
    if (jj_scan_token(UPSERT)) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1464_11_637() {
    if (jj_3R_UpdateOperations_1533_5_405()) return true;
    return false;
  }

  private boolean jj_3R_GrantStatement_4530_13_417() {
    if (jj_scan_token(POLICY)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_UpdateEdgeStatement_1460_3_101() {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(EDGE)) return true;
    if (jj_3R_FromClause_2404_9_242()) return true;
    Token xsp;
    if (jj_3R_UpdateEdgeStatement_1464_11_637()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_UpdateEdgeStatement_1464_11_637()) {
        jj_scanpos = xsp;
        break;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1465_11_638()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1467_17_639()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1473_11_640()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1474_11_641()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1485_11_642()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_UpdateEdgeStatement_1486_11_643()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DeleteEdgeWhereStatement_1451_11_302() {
    if (jj_3R_Batch_3289_5_439()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeWhereStatement_1450_11_301() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_GrantStatement_4527_5_254() {
    if (jj_scan_token(GRANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GrantStatement_4530_13_417()) {
      jj_scanpos = xsp;
      if (jj_3R_GrantStatement_4535_13_418()) return true;
    }
    if (jj_scan_token(ON)) return true;
    if (jj_3R_SecurityResourceSegment_5156_5_693()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeWhereStatement_1449_11_300() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeWhereStatement_1447_11_299() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_Permission_4518_9_729() {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  private boolean jj_3R_Permission_4516_9_728() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_Permission_4514_9_727() {
    if (jj_scan_token(EXECUTE)) return true;
    return false;
  }

  private boolean jj_3R_Permission_4512_9_726() {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeWhereStatement_1443_5_149() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EDGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeWhereStatement_1447_11_299()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeWhereStatement_1449_11_300()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeWhereStatement_1450_11_301()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeWhereStatement_1451_11_302()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Permission_4510_9_725() {
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  private boolean jj_3R_Permission_4508_9_724() {
    if (jj_scan_token(READ)) return true;
    return false;
  }

  private boolean jj_3R_Permission_4506_9_723() {
    if (jj_scan_token(CREATE)) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeVToStatement_1432_11_295() {
    if (jj_3R_Batch_3289_5_439()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeVToStatement_1431_11_294() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeVToStatement_1430_11_293() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_Permission_4505_5_529() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Permission_4506_9_723()) {
      jj_scanpos = xsp;
      if (jj_3R_Permission_4508_9_724()) {
        jj_scanpos = xsp;
        if (jj_3R_Permission_4510_9_725()) {
          jj_scanpos = xsp;
          if (jj_3R_Permission_4512_9_726()) {
            jj_scanpos = xsp;
            if (jj_3R_Permission_4514_9_727()) {
              jj_scanpos = xsp;
              if (jj_3R_Permission_4516_9_728()) {
                jj_scanpos = xsp;
                if (jj_3R_Permission_4518_9_729()) return true;
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_ProfileStatement_4495_5_141() {
    if (jj_scan_token(PROFILE)) return true;
    if (jj_3R_StatementInternal_910_5_80()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeVToStatement_1422_5_147() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EDGE)) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeVToStatement_1430_11_293()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeVToStatement_1431_11_294()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeVToStatement_1432_11_295()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DeleteEdgeToStatement_1411_11_298() {
    if (jj_3R_Batch_3289_5_439()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeToStatement_1410_11_297() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeToStatement_1409_11_296() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_ExplainStatement_4485_5_400() {
    if (jj_scan_token(EXPLAIN)) return true;
    if (jj_3R_StatementInternal_910_5_80()) return true;
    return false;
  }

  private boolean jj_3R_CreateLinkStatement_4475_13_617() {
    if (jj_3R_RecordAttribute_2098_5_162()) return true;
    return false;
  }

  private boolean jj_3R_CreateLinkStatement_4477_11_618() {
    if (jj_scan_token(INVERSE)) return true;
    return false;
  }

  private boolean jj_3R_CreateLinkStatement_4473_13_616() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateLinkStatement_4467_13_615() {
    if (jj_3R_RecordAttribute_2098_5_162()) return true;
    return false;
  }

  private boolean jj_3R_CreateLinkStatement_4465_13_614() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeToStatement_1399_5_148() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EDGE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeToStatement_1409_11_296()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeToStatement_1410_11_297()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeToStatement_1411_11_298()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DeleteEdgeFromToStatement_1388_7_292() {
    if (jj_3R_Batch_3289_5_439()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeFromToStatement_1387_7_291() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeFromToStatement_1386_7_290() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeFromToStatement_1380_13_289() {
    if (jj_scan_token(TO)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_CreateLinkStatement_4456_5_89() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(LINK)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateLinkStatement_4465_13_614()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateLinkStatement_4467_13_615()) return true;
    }
    if (jj_scan_token(TO)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(DOT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_CreateLinkStatement_4473_13_616()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateLinkStatement_4475_13_617()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_CreateLinkStatement_4477_11_618()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OptimizeDatabaseStatement_4447_13_692() {
    if (jj_3R_CommandLineOption_4435_5_862()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeFromToStatement_1374_11_288() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_OptimizeDatabaseStatement_4444_5_253() {
    if (jj_scan_token(OPTIMIZE)) return true;
    if (jj_scan_token(DATABASE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_OptimizeDatabaseStatement_4447_13_692()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_DeleteEdgeByRidStatement_1351_21_545() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeFromToStatement_1370_1_146() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EDGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeFromToStatement_1374_11_288()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeFromToStatement_1380_13_289()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeFromToStatement_1386_7_290()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeFromToStatement_1387_7_291()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeFromToStatement_1388_7_292()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CommandLineOption_4435_5_862() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeByRidStatement_1357_11_287() {
    if (jj_3R_Batch_3289_5_439()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeByRidStatement_1346_17_438() {
    if (jj_3R_Rid_492_5_158()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_DeleteEdgeByRidStatement_1351_21_545()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_AlterDatabaseStatement_4424_9_691() {
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeByRidStatement_1342_13_286() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeByRidStatement_1346_17_438()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_163() {
    if (jj_scan_token(CUSTOM)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeByRidStatement_1340_13_285() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_AlterDatabaseStatement_4414_9_117() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(DATABASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_163()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterDatabaseStatement_4424_9_691()) return true;
    }
    return false;
  }

  private boolean jj_3R_DropClusterStatement_4405_17_689() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_DropClusterStatement_4403_17_688() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_DropClusterStatement_4407_11_690() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_DeleteEdgeWhereStatement_1443_5_149()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_DeleteEdgeToStatement_1399_5_148()) return true;
    return false;
  }

  private boolean jj_3R_DropClusterStatement_4401_9_116() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(CLUSTER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DropClusterStatement_4403_17_688()) {
      jj_scanpos = xsp;
      if (jj_3R_DropClusterStatement_4405_17_689()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_DropClusterStatement_4407_11_690()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_DeleteEdgeVToStatement_1422_5_147()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeByRidStatement_1336_1_145() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(EDGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeByRidStatement_1340_13_285()) {
      jj_scanpos = xsp;
      if (jj_3R_DeleteEdgeByRidStatement_1342_13_286()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeByRidStatement_1357_11_287()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_DeleteEdgeFromToStatement_1370_1_146()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeStatement_1324_9_236() {
    if (jj_3R_DeleteEdgeWhereStatement_1443_5_149()) return true;
    return false;
  }

  private boolean jj_3R_AlterClusterStatement_4392_11_687() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_DeleteEdgeByRidStatement_1336_1_145()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeStatement_1321_9_235() {
    if (jj_3R_DeleteEdgeToStatement_1399_5_148()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeStatement_1318_9_234() {
    if (jj_3R_DeleteEdgeVToStatement_1422_5_147()) return true;
    return false;
  }

  private boolean jj_3R_AlterClusterStatement_4388_9_115() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(CLUSTER)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClusterStatement_4392_11_687()) jj_scanpos = xsp;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeStatement_1315_9_233() {
    if (jj_3R_DeleteEdgeFromToStatement_1370_1_146()) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeStatement_1312_9_232() {
    if (jj_3R_DeleteEdgeByRidStatement_1336_1_145()) return true;
    return false;
  }

  private boolean jj_3R_CreateClusterStatement_4380_11_613() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_CreateClusterStatement_4379_11_612() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_CreateClusterStatement_4376_13_237() {
    if (jj_scan_token(BLOB)) return true;
    if (jj_scan_token(CLUSTER)) return true;
    return false;
  }

  private boolean jj_3R_DeleteEdgeStatement_1311_5_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteEdgeStatement_1312_9_232()) {
      jj_scanpos = xsp;
      if (jj_3R_DeleteEdgeStatement_1315_9_233()) {
        jj_scanpos = xsp;
        if (jj_3R_DeleteEdgeStatement_1318_9_234()) {
          jj_scanpos = xsp;
          if (jj_3R_DeleteEdgeStatement_1321_9_235()) {
            jj_scanpos = xsp;
            if (jj_3R_DeleteEdgeStatement_1324_9_236()) return true;
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_DeleteVertexStatement_1302_11_597() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_DeleteVertexStatement_1301_11_596() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(BEFORE)) return true;
    return false;
  }

  private boolean jj_3R_DeleteVertexStatement_1304_7_599() {
    if (jj_3R_Batch_3289_5_439()) return true;
    return false;
  }

  private boolean jj_3R_DeleteVertexStatement_1299_11_595() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_DeleteVertexStatement_1303_7_598() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_CreateClusterStatement_4371_5_88() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(260)) {
      jj_scanpos = xsp;
      if (jj_3R_CreateClusterStatement_4376_13_237()) return true;
    }
    if (jj_3R_Identifier_582_1_154()) return true;
    xsp = jj_scanpos;
    if (jj_3R_CreateClusterStatement_4379_11_612()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateClusterStatement_4380_11_613()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DropIndexStatement_4360_13_685() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_DropIndexStatement_4362_11_686() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_DeleteStatement_1289_11_594() {
    if (jj_scan_token(UNSAFE)) return true;
    return false;
  }

  private boolean jj_3R_DropIndexStatement_4358_13_684() {
    if (jj_3R_IndexName_2570_5_440()) return true;
    return false;
  }

  private boolean jj_3R_DeleteStatement_1288_11_593() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_DeleteStatement_1287_11_592() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_DeleteVertexStatement_1296_1_82() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(VERTEX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteVertexStatement_1299_11_595()) jj_scanpos = xsp;
    if (jj_3R_FromClause_2404_9_242()) return true;
    xsp = jj_scanpos;
    if (jj_3R_DeleteVertexStatement_1301_11_596()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteVertexStatement_1302_11_597()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteVertexStatement_1303_7_598()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteVertexStatement_1304_7_599()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DeleteStatement_1286_11_591() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(BEFORE)) return true;
    return false;
  }

  private boolean jj_3R_DropIndexStatement_4355_5_114() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(INDEX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DropIndexStatement_4358_13_684()) {
      jj_scanpos = xsp;
      if (jj_3R_DropIndexStatement_4360_13_685()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_DropIndexStatement_4362_11_686()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_RebuildIndexStatement_4346_13_683() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1275_11_948() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_RebuildIndexStatement_4344_13_682() {
    if (jj_3R_IndexName_2570_5_440()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1274_11_947() {
    if (jj_3R_Skip_3265_5_537()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1273_11_946() {
    if (jj_3R_Unwind_3238_1_427()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1272_11_945() {
    if (jj_3R_OrderBy_3125_1_426()) return true;
    return false;
  }

  private boolean jj_3R_DeleteStatement_1282_1_81() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_FromClause_2404_9_242()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteStatement_1286_11_591()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteStatement_1287_11_592()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteStatement_1288_11_593()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DeleteStatement_1289_11_594()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MatchStatement_1271_11_944() {
    if (jj_3R_GroupBy_3226_1_425()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4329_23_1032() {
    if (jj_scan_token(METADATA)) return true;
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4327_25_1031() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1263_15_1024() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1262_15_1023() {
    if (jj_3R_NestedProjection_1950_3_450()) return true;
    return false;
  }

  private boolean jj_3R_RebuildIndexStatement_4341_5_252() {
    if (jj_scan_token(REBUILD)) return true;
    if (jj_scan_token(INDEX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RebuildIndexStatement_4344_13_682()) {
      jj_scanpos = xsp;
      if (jj_3R_RebuildIndexStatement_4346_13_683()) return true;
    }
    return false;
  }

  private boolean jj_3R_MatchStatement_1260_13_943() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1262_15_1023()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1263_15_1024()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4324_17_971() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateIndexStatement_4327_25_1031()) {
        jj_scanpos = xsp;
        break;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4329_23_1032()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1249_17_1022() {
    if (jj_3R_NestedProjection_1950_3_450()) return true;
    return false;
  }

  private boolean jj_3_161() {
    if (jj_scan_token(METADATA)) return true;
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4319_17_798() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_161()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4324_17_971()) return true;
    }
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4312_23_1030() {
    if (jj_scan_token(METADATA)) return true;
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4310_25_1029() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1252_11_942() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1243_17_1021() {
    if (jj_3R_NestedProjection_1950_3_450()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1246_11_941() {
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1249_17_1022()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4317_9_611() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4319_17_798()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4307_17_970() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateIndexStatement_4310_25_1029()) {
        jj_scanpos = xsp;
        break;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4312_23_1030()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(DISTINCT)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1243_17_1021()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MatchStatement_1232_16_1020() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_MatchExpression_3475_5_575()) return true;
    return false;
  }

  private boolean jj_3_160() {
    if (jj_scan_token(METADATA)) return true;
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4302_17_797() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_160()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4307_17_970()) return true;
    }
    return false;
  }

  private boolean jj_3R_MatchStatement_1230_16_1019() {
    if (jj_3R_MatchExpression_3475_5_575()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1228_13_940() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1230_16_1019()) {
      jj_scanpos = xsp;
      if (jj_3R_MatchStatement_1232_16_1020()) return true;
    }
    return false;
  }

  private boolean jj_3_162() {
    if (jj_scan_token(ENGINE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4302_17_797()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4293_12_796() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_158() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EXISTS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4275_25_1028() {
    if (jj_scan_token(VALUE)) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4279_21_969() {
    if (jj_scan_token(COLLATE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_MatchStatement_1224_5_484() {
    if (jj_scan_token(MATCH)) return true;
    if (jj_3R_MatchExpression_3475_5_575()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MatchStatement_1228_13_940()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RETURN)) return true;
    xsp = jj_scanpos;
    if (jj_3_57()) {
      jj_scanpos = xsp;
      if (jj_3R_MatchStatement_1246_11_941()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1252_11_942()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MatchStatement_1260_13_943()) {
        jj_scanpos = xsp;
        break;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1271_11_944()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1272_11_945()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1273_11_946()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1274_11_947()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchStatement_1275_11_948()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4273_25_1027() {
    if (jj_scan_token(KEY)) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4289_9_610() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_158()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4293_12_796()) return true;
    }
    return false;
  }

  private boolean jj_3R_TraverseStatement_1209_17_1017() {
    if (jj_scan_token(BREADTH_FIRST)) return true;
    return false;
  }

  private boolean jj_3R_TraverseStatement_1207_17_1016() {
    if (jj_scan_token(DEPTH_FIRST)) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4271_21_968() {
    if (jj_scan_token(BY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4273_25_1027()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4275_25_1028()) return true;
    }
    return false;
  }

  private boolean jj_3R_TraverseStatement_1205_11_939() {
    if (jj_scan_token(STRATEGY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TraverseStatement_1207_17_1016()) {
      jj_scanpos = xsp;
      if (jj_3R_TraverseStatement_1209_17_1017()) return true;
    }
    return false;
  }

  private boolean jj_3R_TraverseStatement_1204_11_938() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4264_21_967() {
    if (jj_3R_RecordAttribute_2098_5_162()) return true;
    return false;
  }

  private boolean jj_3R_TraverseStatement_1203_11_937() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_TraverseStatement_1198_15_1015() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TraverseProjectionItem_3421_5_766()) return true;
    return false;
  }

  private boolean jj_3R_TraverseStatement_1202_11_936() {
    if (jj_scan_token(MAXDEPTH)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_TraverseStatement_1197_13_574() {
    if (jj_3R_TraverseProjectionItem_3421_5_766()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TraverseStatement_1198_15_1015()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_SelectStatement_1166_43_539() {
    if (jj_3R_Skip_3265_5_537()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4258_21_966() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1164_41_538() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4256_17_795() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4258_21_966()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4264_21_967()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4271_21_968()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4279_21_969()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_TraverseStatement_1194_5_483() {
    if (jj_scan_token(TRAVERSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TraverseStatement_1197_13_574()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_FromClause_2404_9_242()) return true;
    xsp = jj_scanpos;
    if (jj_3R_TraverseStatement_1202_11_936()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_TraverseStatement_1203_11_937()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_TraverseStatement_1204_11_938()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_TraverseStatement_1205_11_939()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4248_21_965() {
    if (jj_scan_token(VALUE)) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4252_17_794() {
    if (jj_scan_token(COLLATE)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4246_21_964() {
    if (jj_scan_token(KEY)) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1179_17_434() {
    if (jj_scan_token(DEFAULT_)) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1183_11_274() {
    if (jj_scan_token(NOCACHE)) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1177_17_433() {
    if (jj_scan_token(SHARED)) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1182_11_273() {
    if (jj_scan_token(PARALLEL)) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1175_17_432() {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1173_17_431() {
    if (jj_scan_token(RECORD)) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4244_17_793() {
    if (jj_scan_token(BY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4246_21_964()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4248_21_965()) return true;
    }
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1124_59_1026() {
    if (jj_3R_Skip_3265_5_537()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1166_17_429() {
    if (jj_3R_Limit_3251_5_415()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1166_43_539()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4237_17_222() {
    if (jj_3R_RecordAttribute_2098_5_162()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1171_11_272() {
    if (jj_scan_token(LOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1173_17_431()) {
      jj_scanpos = xsp;
      if (jj_3R_SelectStatement_1175_17_432()) {
        jj_scanpos = xsp;
        if (jj_3R_SelectStatement_1177_17_433()) {
          jj_scanpos = xsp;
          if (jj_3R_SelectStatement_1179_17_434()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_SelectStatement_1170_11_271() {
    if (jj_3R_Timeout_3303_5_416()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1164_17_269() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1164_17_428()) {
      jj_scanpos = xsp;
      if (jj_3R_SelectStatement_1166_17_429()) return true;
    }
    return false;
  }

  private boolean jj_3R_SelectStatement_1164_17_428() {
    if (jj_3R_Skip_3265_5_537()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1164_41_538()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_SelectStatement_1169_11_270() {
    if (jj_3R_FetchPlan_3367_5_430()) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1122_57_1025() {
    if (jj_3R_Limit_3251_5_415()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4231_17_221() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1161_11_268() {
    if (jj_3R_Unwind_3238_1_427()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1160_11_267() {
    if (jj_3R_OrderBy_3125_1_426()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1159_11_266() {
    if (jj_3R_GroupBy_3226_1_425()) return true;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4226_15_220() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1158_11_265() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1157_11_264() {
    if (jj_3R_LetClause_2413_5_424()) return true;
    return false;
  }

  private boolean jj_3R_SelectStatement_1154_11_263() {
    if (jj_3R_Projection_1915_5_403()) return true;
    return false;
  }

  private boolean jj_3_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4226_15_220()) jj_scanpos = xsp;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4231_17_221()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4237_17_222()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4244_17_793()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateIndexStatement_4252_17_794()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateIndexStatement_4256_17_795()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1124_33_952() {
    if (jj_3R_Limit_3251_5_415()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1124_59_1026()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_SelectStatement_1152_5_142() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1154_11_263()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_FromClause_2404_9_242()) return true;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1157_11_264()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1158_11_265()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1159_11_266()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1160_11_267()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1161_11_268()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1164_17_269()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1169_11_270()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1170_11_271()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1171_11_272()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1182_11_273()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectStatement_1183_11_274()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CreateIndexStatement_4219_9_87() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(INDEX)) return true;
    if (jj_3R_IndexName_2570_5_440()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_159()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4289_9_610()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_162()) {
      jj_scanpos = xsp;
      if (jj_3R_CreateIndexStatement_4317_9_611()) return true;
    }
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1122_33_951() {
    if (jj_3R_Skip_3265_5_537()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1122_57_1025()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1122_33_769() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1122_33_951()) {
      jj_scanpos = xsp;
      if (jj_3R_SelectWithoutTargetStatement_1124_33_952()) return true;
    }
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1137_17_956() {
    if (jj_scan_token(DEFAULT_)) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1135_17_955() {
    if (jj_scan_token(SHARED)) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1141_11_774() {
    if (jj_scan_token(NOCACHE)) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1140_11_773() {
    if (jj_scan_token(PARALLEL)) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1133_17_954() {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1131_17_953() {
    if (jj_scan_token(RECORD)) return true;
    return false;
  }

  private boolean jj_3R_DropPropertyStatement_4208_11_681() {
    if (jj_scan_token(FORCE)) return true;
    return false;
  }

  private boolean jj_3R_DropPropertyStatement_4207_11_680() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_DropPropertyStatement_4203_9_113() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(PROPERTY)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DropPropertyStatement_4207_11_680()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DropPropertyStatement_4208_11_681()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_AlterPropertyStatement_4191_21_679() {
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1129_11_772() {
    if (jj_scan_token(LOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1131_17_953()) {
      jj_scanpos = xsp;
      if (jj_3R_SelectWithoutTargetStatement_1133_17_954()) {
        jj_scanpos = xsp;
        if (jj_3R_SelectWithoutTargetStatement_1135_17_955()) {
          jj_scanpos = xsp;
          if (jj_3R_SelectWithoutTargetStatement_1137_17_956()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1128_11_771() {
    if (jj_3R_Timeout_3303_5_416()) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1127_11_770() {
    if (jj_3R_FetchPlan_3367_5_430()) return true;
    return false;
  }

  private boolean jj_3_157() {
    if (jj_scan_token(CUSTOM)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1119_11_768() {
    if (jj_3R_Unwind_3238_1_427()) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1118_11_767() {
    if (jj_3R_LetClause_2413_5_424()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_FindReferencesStatement_3866_5_143()) return true;
    return false;
  }

  private boolean jj_3R_SelectWithoutTargetStatement_1115_5_306() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_Projection_1915_5_403()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1118_11_767()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1119_11_768()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1122_33_769()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1127_11_770()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1128_11_771()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1129_11_772()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1140_11_773()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectWithoutTargetStatement_1141_11_774()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3R_QueryStatement_1107_9_353() {
    if (jj_3R_FindReferencesStatement_3866_5_143()) return true;
    return false;
  }

  private boolean jj_3R_AlterPropertyStatement_4177_9_112() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(PROPERTY)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_157()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterPropertyStatement_4191_21_679()) return true;
    }
    return false;
  }

  private boolean jj_3R_QueryStatement_1105_9_352() {
    if (jj_3R_MatchStatement_1224_5_484()) return true;
    return false;
  }

  private boolean jj_3R_QueryStatement_1103_9_351() {
    if (jj_3R_TraverseStatement_1194_5_483()) return true;
    return false;
  }

  private boolean jj_3R_QueryStatement_1101_9_350() {
    if (jj_3R_SelectWithoutTargetStatement_1115_5_306()) return true;
    return false;
  }

  private boolean jj_3R_CreatePropertyAttributeStatement_4165_14_963() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_QueryStatement_1098_9_349() {
    if (jj_3R_SelectStatement_1152_5_142()) return true;
    return false;
  }

  private boolean jj_3R_QueryStatement_1097_5_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_QueryStatement_1098_9_349()) {
      jj_scanpos = xsp;
      if (jj_3R_QueryStatement_1101_9_350()) {
        jj_scanpos = xsp;
        if (jj_3R_QueryStatement_1103_9_351()) {
          jj_scanpos = xsp;
          if (jj_3R_QueryStatement_1105_9_352()) {
            jj_scanpos = xsp;
            if (jj_3R_QueryStatement_1107_9_353()) return true;
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_CreatePropertyStatement_4153_19_609() {
    if (jj_scan_token(UNSAFE)) return true;
    return false;
  }

  private boolean jj_3R_CreatePropertyStatement_4150_22_792() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_CreatePropertyAttributeStatement_4162_5_791()) return true;
    return false;
  }

  private boolean jj_3R_CreatePropertyStatement_4145_25_607() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_CreatePropertyStatement_4148_21_608() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_CreatePropertyAttributeStatement_4162_5_791()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreatePropertyStatement_4150_22_792()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_CreatePropertyAttributeStatement_4162_5_791() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreatePropertyAttributeStatement_4165_14_963()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_156() {
    if (jj_3R_IfNotExists_4128_5_219()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_ProfileStatement_4495_5_141()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionStatement_1086_5_399() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1075_9_231() {
    if (jj_3R_LetStatement_4781_5_401()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_HaSetStatement_5089_5_122()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1072_9_230() {
    if (jj_3R_ProfileStatement_4495_5_141()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1070_9_229() {
    if (jj_3R_ExplainStatement_4485_5_400()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_HaSyncClusterStatement_5068_5_121()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_HaSyncDatabaseStatement_5054_5_120()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_HaStatusStatement_5014_5_119()) return true;
    return false;
  }

  private boolean jj_3R_CreatePropertyStatement_4135_9_86() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(PROPERTY)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_156()) jj_scanpos = xsp;
    if (jj_3R_Identifier_582_1_154()) return true;
    xsp = jj_scanpos;
    if (jj_3R_CreatePropertyStatement_4145_25_607()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreatePropertyStatement_4148_21_608()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreatePropertyStatement_4153_19_609()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_HaRemoveServerStatement_5044_5_118()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1051_17_140() {
    if (jj_3R_IfStatement_4862_5_262()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1049_17_139() {
    if (jj_3R_ConsoleStatement_4895_5_261()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1047_17_138() {
    if (jj_3R_SleepStatement_4886_5_260()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1045_17_137() {
    if (jj_3R_ReturnStatement_4850_5_259()) return true;
    return false;
  }

  private boolean jj_3R_IfNotExists_4128_5_219() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_DropViewStatement_4121_11_678() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1043_17_136() {
    if (jj_3R_RollbackStatement_4841_5_258()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1041_17_135() {
    if (jj_3R_CommitStatement_4809_5_257()) return true;
    return false;
  }

  private boolean jj_3R_DropViewStatement_4119_9_111() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(VIEW)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DropViewStatement_4121_11_678()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_StatementInternal_1039_17_134() {
    if (jj_3R_BeginStatement_4799_5_256()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1037_17_133() {
    if (jj_3R_RevokeStatement_4548_5_255()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1035_17_132() {
    if (jj_3R_GrantStatement_4527_5_254()) return true;
    return false;
  }

  private boolean jj_3R_DropClassStatement_4112_11_677() {
    if (jj_scan_token(UNSAFE)) return true;
    return false;
  }

  private boolean jj_3R_DropClassStatement_4111_11_676() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1033_17_131() {
    if (jj_3R_OptimizeDatabaseStatement_4444_5_253()) return true;
    return false;
  }

  private boolean jj_3R_DropClassStatement_4109_11_675() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_AlterDatabaseStatement_4414_9_117()) return true;
    return false;
  }

  private boolean jj_3R_DropClassStatement_4107_11_674() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_DropClusterStatement_4401_9_116()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4082_33_859() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_DropClassStatement_4105_9_110() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(CLASS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DropClassStatement_4107_11_674()) {
      jj_scanpos = xsp;
      if (jj_3R_DropClassStatement_4109_11_675()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_DropClassStatement_4111_11_676()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_DropClassStatement_4112_11_677()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_AlterClusterStatement_4388_9_115()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4093_17_861() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_DropIndexStatement_4355_5_114()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4097_11_672() {
    if (jj_scan_token(UNSAFE)) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4091_17_860() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_1019_17_130() {
    if (jj_3R_RebuildIndexStatement_4341_5_252()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4073_33_858() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_DropPropertyStatement_4203_9_113()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_AlterPropertyStatement_4177_9_112()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4066_33_857() {
    if (jj_3R_String_567_5_498()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_DropViewStatement_4119_9_111()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4088_9_671() {
    if (jj_scan_token(DEFAULTCLUSTER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4091_17_860()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_4093_17_861()) return true;
    }
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4064_33_856() {
    if (jj_scan_token(274)) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4079_17_670() {
    if (jj_scan_token(ENCRYPTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4082_33_859()) {
      jj_scanpos = xsp;
      if (jj_scan_token(38)) return true;
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_DropClassStatement_4105_9_110()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4062_33_855() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_DropSequenceStatement_5000_5_109()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_AlterClassStatement_3949_9_108()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4070_17_669() {
    if (jj_scan_token(DESCRIPTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4073_33_858()) {
      jj_scanpos = xsp;
      if (jj_scan_token(38)) return true;
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_AlterSequenceStatement_4959_5_107()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4053_33_854() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_TruncateRecordStatement_3843_9_106()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4049_33_853() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_TruncateClusterStatement_3830_9_105()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_UpdateStatement_1495_5_102()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_TruncateClassStatement_3820_9_104()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4059_17_668() {
    if (jj_scan_token(CLUSTERSELECTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4062_33_855()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_4064_33_856()) {
        jj_scanpos = xsp;
        if (jj_3R_AlterClassStatement_4066_33_857()) return true;
      }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_ProfileStorageStatement_3808_9_103()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_984_17_129() {
    if (jj_3R_MoveVertexStatement_1817_3_251()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_CreateVertexStatementEmptyNoTarget_1774_9_99()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_981_17_128() {
    if (jj_3R_UpdateStatement_1495_5_102()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4035_33_852() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_CreateVertexStatement_1782_1_98()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_UpdateEdgeStatement_1460_3_101()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4033_33_851() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_CreateVertexStatementNoTarget_1807_1_97()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_CreateEdgeStatement_1841_1_100()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4046_17_667() {
    if (jj_scan_token(ABSTRACT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4049_33_853()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_4053_33_854()) return true;
    }
    return false;
  }

  private boolean jj_3R_StatementInternal_972_17_127() {
    if (jj_3R_CreateVertexStatementEmptyNoTarget_1774_9_99()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4026_33_850() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_969_17_126() {
    if (jj_3R_CreateVertexStatement_1782_1_98()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4024_33_849() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4039_17_666() {
    if (jj_scan_token(CUSTOM)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_966_17_125() {
    if (jj_3R_CreateVertexStatementNoTarget_1807_1_97()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_CreateSequenceStatement_4909_5_96()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_AlterSecurityPolicyStatement_5245_3_95()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4015_33_848() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4030_17_665() {
    if (jj_scan_token(REMOVECLUSTER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4033_33_851()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_4035_33_852()) return true;
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_CreateSecurityPolicyStatement_5202_3_94()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4011_33_847() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3994_49_1000() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_AlterRoleStatement_4725_3_93()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_DropUserStatement_4712_5_92()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4021_17_664() {
    if (jj_scan_token(ADDCLUSTER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4024_33_849()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_4026_33_850()) return true;
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_CreateUserStatement_4670_5_91()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_CreateFunctionStatement_4569_5_90()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3999_33_846() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_CreateLinkStatement_4456_5_89()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_CreateClusterStatement_4371_5_88()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4008_17_663() {
    if (jj_scan_token(STRICTMODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4011_33_847()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_4015_33_848()) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_CreateIndexStatement_4219_9_87()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3991_33_845() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AlterClassStatement_3994_49_1000()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_CreatePropertyStatement_4135_9_86()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_4003_17_662() {
    if (jj_scan_token(OVERSIZE)) return true;
    if (jj_3R_Number_848_5_476()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_CreateViewStatement_3929_9_85()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_CreateClassStatement_3902_9_84()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3981_33_844() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_925_17_124() {
    if (jj_3R_InsertStatement_1638_1_250()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3979_33_843() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_DeleteEdgeStatement_1311_5_83()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3974_33_999() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_DeleteVertexStatement_1296_1_82()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_DeleteStatement_1282_1_81()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3970_33_998() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3970_33_842() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_3970_33_998()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_3974_33_999()) return true;
    }
    return false;
  }

  private boolean jj_3R_StatementInternal_914_17_123() {
    if (jj_3R_QueryStatement_1097_5_188()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3985_17_661() {
    if (jj_scan_token(SUPERCLASSES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_3991_33_845()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_3999_33_846()) return true;
    }
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3961_33_841() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StatementInternal_914_17_123()) {
      jj_scanpos = xsp;
      if (jj_3_11()) {
        jj_scanpos = xsp;
        if (jj_3_12()) {
          jj_scanpos = xsp;
          if (jj_3_13()) {
            jj_scanpos = xsp;
            if (jj_3R_StatementInternal_925_17_124()) {
              jj_scanpos = xsp;
              if (jj_3_14()) {
                jj_scanpos = xsp;
                if (jj_3_15()) {
                  jj_scanpos = xsp;
                  if (jj_3_16()) {
                    jj_scanpos = xsp;
                    if (jj_3_17()) {
                      jj_scanpos = xsp;
                      if (jj_3_18()) {
                        jj_scanpos = xsp;
                        if (jj_3_19()) {
                          jj_scanpos = xsp;
                          if (jj_3_20()) {
                            jj_scanpos = xsp;
                            if (jj_3_21()) {
                              jj_scanpos = xsp;
                              if (jj_3_22()) {
                                jj_scanpos = xsp;
                                if (jj_3_23()) {
                                  jj_scanpos = xsp;
                                  if (jj_3_24()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_25()) {
                                      jj_scanpos = xsp;
                                      if (jj_3_26()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_StatementInternal_966_17_125()) {
                                          jj_scanpos = xsp;
                                          if (jj_3R_StatementInternal_969_17_126()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_StatementInternal_972_17_127()) {
                                              jj_scanpos = xsp;
                                              if (jj_3_30()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_31()) {
                                                  jj_scanpos = xsp;
                                                  if (jj_3R_StatementInternal_981_17_128()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_StatementInternal_984_17_129()) {
                                                      jj_scanpos = xsp;
                                                      if (jj_3_33()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3_34()) {
                                                          jj_scanpos = xsp;
                                                          if (jj_3_35()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3_36()) {
                                                              jj_scanpos = xsp;
                                                              if (jj_3_37()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3_38()) {
                                                                  jj_scanpos = xsp;
                                                                  if (jj_3_39()) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3_40()) {
                                                                      jj_scanpos = xsp;
                                                                      if (jj_3_41()) {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_3_42()) {
                                                                          jj_scanpos = xsp;
                                                                          if (jj_3_43()) {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_3R_StatementInternal_1019_17_130()) {
                                                                              jj_scanpos = xsp;
                                                                              if (jj_3_44()) {
                                                                                jj_scanpos = xsp;
                                                                                if (jj_3_45()) {
                                                                                  jj_scanpos = xsp;
                                                                                  if (jj_3_46()) {
                                                                                    jj_scanpos =
                                                                                        xsp;
                                                                                    if (jj_3_47()) {
                                                                                      jj_scanpos =
                                                                                          xsp;
                                                                                      if (jj_3R_StatementInternal_1033_17_131()) {
                                                                                        jj_scanpos =
                                                                                            xsp;
                                                                                        if (jj_3R_StatementInternal_1035_17_132()) {
                                                                                          jj_scanpos =
                                                                                              xsp;
                                                                                          if (jj_3R_StatementInternal_1037_17_133()) {
                                                                                            jj_scanpos =
                                                                                                xsp;
                                                                                            if (jj_3R_StatementInternal_1039_17_134()) {
                                                                                              jj_scanpos =
                                                                                                  xsp;
                                                                                              if (jj_3R_StatementInternal_1041_17_135()) {
                                                                                                jj_scanpos =
                                                                                                    xsp;
                                                                                                if (jj_3R_StatementInternal_1043_17_136()) {
                                                                                                  jj_scanpos =
                                                                                                      xsp;
                                                                                                  if (jj_3R_StatementInternal_1045_17_137()) {
                                                                                                    jj_scanpos =
                                                                                                        xsp;
                                                                                                    if (jj_3R_StatementInternal_1047_17_138()) {
                                                                                                      jj_scanpos =
                                                                                                          xsp;
                                                                                                      if (jj_3R_StatementInternal_1049_17_139()) {
                                                                                                        jj_scanpos =
                                                                                                            xsp;
                                                                                                        if (jj_3R_StatementInternal_1051_17_140()) {
                                                                                                          jj_scanpos =
                                                                                                              xsp;
                                                                                                          if (jj_3_48()) {
                                                                                                            jj_scanpos =
                                                                                                                xsp;
                                                                                                            if (jj_3_49()) {
                                                                                                              jj_scanpos =
                                                                                                                  xsp;
                                                                                                              if (jj_3_50()) {
                                                                                                                jj_scanpos =
                                                                                                                    xsp;
                                                                                                                if (jj_3_51()) {
                                                                                                                  jj_scanpos =
                                                                                                                      xsp;
                                                                                                                  if (jj_3_52())
                                                                                                                    return true;
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_StatementInternal_910_5_80()) return true;
    return false;
  }

  private boolean jj_3R_StatementInternal_910_5_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
      jj_scanpos = xsp;
      if (jj_3R_StatementInternal_1070_9_229()) {
        jj_scanpos = xsp;
        if (jj_3R_StatementInternal_1072_9_230()) {
          jj_scanpos = xsp;
          if (jj_3R_StatementInternal_1075_9_231()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3967_17_660() {
    if (jj_scan_token(SUPERCLASS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_3970_33_842()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_3979_33_843()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_3981_33_844()) return true;
    }
    return false;
  }

  private boolean jj_3R_StatementSemicolon_899_9_227() {
    if (jj_3R_ExpressionStatement_1086_5_399()) return true;
    return false;
  }

  private boolean jj_3R_StatementSemicolon_896_9_226() {
    if (jj_3R_StatementInternal_910_5_80()) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3958_17_659() {
    if (jj_scan_token(SHORTNAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_3961_33_841()) {
      jj_scanpos = xsp;
      if (jj_scan_token(38)) return true;
    }
    return false;
  }

  private boolean jj_3R_StatementSemicolon_895_5_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StatementSemicolon_896_9_226()) {
      jj_scanpos = xsp;
      if (jj_3R_StatementSemicolon_899_9_227()) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3953_17_658() {
    if (jj_scan_token(NAME)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_Statement_887_5_224() {
    if (jj_3R_StatementInternal_910_5_80()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(199)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_AlterClassStatement_3949_9_108() {
    if (jj_scan_token(ALTER)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_3953_17_658()) {
      jj_scanpos = xsp;
      if (jj_3R_AlterClassStatement_3958_17_659()) {
        jj_scanpos = xsp;
        if (jj_3R_AlterClassStatement_3967_17_660()) {
          jj_scanpos = xsp;
          if (jj_3R_AlterClassStatement_3985_17_661()) {
            jj_scanpos = xsp;
            if (jj_3R_AlterClassStatement_4003_17_662()) {
              jj_scanpos = xsp;
              if (jj_3R_AlterClassStatement_4008_17_663()) {
                jj_scanpos = xsp;
                if (jj_3R_AlterClassStatement_4021_17_664()) {
                  jj_scanpos = xsp;
                  if (jj_3R_AlterClassStatement_4030_17_665()) {
                    jj_scanpos = xsp;
                    if (jj_3R_AlterClassStatement_4039_17_666()) {
                      jj_scanpos = xsp;
                      if (jj_3R_AlterClassStatement_4046_17_667()) {
                        jj_scanpos = xsp;
                        if (jj_3R_AlterClassStatement_4059_17_668()) {
                          jj_scanpos = xsp;
                          if (jj_3R_AlterClassStatement_4070_17_669()) {
                            jj_scanpos = xsp;
                            if (jj_3R_AlterClassStatement_4079_17_670()) {
                              jj_scanpos = xsp;
                              if (jj_3R_AlterClassStatement_4088_9_671()) return true;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_AlterClassStatement_4097_11_672()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_ExistsSystemUserStatement_4652_5_79()) return true;
    return false;
  }

  private boolean jj_3R_CreateViewStatement_3934_19_606() {
    if (jj_scan_token(METADATA)) return true;
    if (jj_3R_Json_3434_5_223()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_AlterSystemRoleStatement_4754_3_78()) return true;
    return false;
  }

  private boolean jj_3R_CreateViewStatement_3932_19_605() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_CreateSystemUserStatement_4612_5_77()) return true;
    return false;
  }

  private boolean jj_3R_CreateClassStatement_3916_33_790() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_CreateDatabaseStatement_5369_3_76()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_FloatingPoint_839_5_75()) return true;
    return false;
  }

  private boolean jj_3R_CreateClassStatement_3909_33_789() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_CreateClassStatement_3921_19_604() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_CreateClassStatement_3914_25_602() {
    if (jj_scan_token(CLUSTER)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateClassStatement_3916_33_790()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_CreateClassStatement_3920_19_603() {
    if (jj_scan_token(CLUSTERS)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_CreateViewStatement_3929_9_85() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(VIEW)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateViewStatement_3932_19_605()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_QueryStatement_1097_5_188()) return true;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_CreateViewStatement_3934_19_606()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Number_852_9_571() {
    if (jj_3R_FloatingPoint_839_5_75()) return true;
    return false;
  }

  private boolean jj_3R_CreateClassStatement_3907_25_601() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CreateClassStatement_3909_33_789()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_Number_849_9_570() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_Number_848_5_476() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Number_849_9_570()) {
      jj_scanpos = xsp;
      if (jj_3R_Number_852_9_571()) return true;
    }
    return false;
  }

  private boolean jj_3R_CreateClassStatement_3905_19_600() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_FloatingPoint_840_11_228() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3888_33_543() {
    if (jj_3R_Cluster_2531_5_156()) return true;
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3886_33_542() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_FloatingPoint_839_5_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FloatingPoint_840_11_228()) jj_scanpos = xsp;
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_CreateClassStatement_3902_9_84() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateClassStatement_3905_19_600()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateClassStatement_3907_25_601()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateClassStatement_3914_25_602()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateClassStatement_3920_19_603()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_CreateClassStatement_3921_19_604()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Integer_825_7_225() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3884_17_437() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FindReferencesStatement_3886_33_542()) {
      jj_scanpos = xsp;
      if (jj_3R_FindReferencesStatement_3888_33_543()) return true;
    }
    return false;
  }

  private boolean jj_3R_Integer_824_1_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Integer_825_7_225()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3881_13_436() {
    if (jj_3R_Cluster_2531_5_156()) return true;
    return false;
  }

  private boolean jj_3R_TruncateRecordStatement_3852_41_995() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3879_13_435() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3877_9_277() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FindReferencesStatement_3879_13_435()) {
      jj_scanpos = xsp;
      if (jj_3R_FindReferencesStatement_3881_13_436()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FindReferencesStatement_3884_17_437()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_TruncateRecordStatement_3850_33_832() {
    if (jj_3R_Rid_492_5_158()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TruncateRecordStatement_3852_41_995()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3870_9_276() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_StatementInternal_910_5_80()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3868_9_275() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_FindReferencesStatement_3866_5_143() {
    if (jj_scan_token(FIND)) return true;
    if (jj_scan_token(REFERENCES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FindReferencesStatement_3868_9_275()) {
      jj_scanpos = xsp;
      if (jj_3R_FindReferencesStatement_3870_9_276()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_FindReferencesStatement_3877_9_277()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_TruncateRecordStatement_3847_17_656() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TruncateRecordStatement_3850_33_832()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_TruncateRecordStatement_3845_17_655() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_TruncateRecordStatement_3843_9_106() {
    if (jj_scan_token(TRUNCATE)) return true;
    if (jj_scan_token(RECORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TruncateRecordStatement_3845_17_655()) {
      jj_scanpos = xsp;
      if (jj_3R_TruncateRecordStatement_3847_17_656()) return true;
    }
    return false;
  }

  private boolean jj_3R_TruncateClusterStatement_3834_17_653() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_TruncateClusterStatement_3832_17_652() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_TruncateClusterStatement_3836_11_654() {
    if (jj_scan_token(UNSAFE)) return true;
    return false;
  }

  private boolean jj_3R_TruncateClusterStatement_3830_9_105() {
    if (jj_scan_token(TRUNCATE)) return true;
    if (jj_scan_token(CLUSTER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TruncateClusterStatement_3832_17_652()) {
      jj_scanpos = xsp;
      if (jj_3R_TruncateClusterStatement_3834_17_653()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_TruncateClusterStatement_3836_11_654()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_TruncateClassStatement_3823_11_651() {
    if (jj_scan_token(UNSAFE)) return true;
    return false;
  }

  private boolean jj_3R_TruncateClassStatement_3822_11_650() {
    if (jj_scan_token(POLYMORPHIC)) return true;
    return false;
  }

  private boolean jj_3R_TruncateClassStatement_3820_9_104() {
    if (jj_scan_token(TRUNCATE)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TruncateClassStatement_3822_11_650()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_TruncateClassStatement_3823_11_651()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ProfileStorageStatement_3812_17_649() {
    if (jj_scan_token(OFF)) return true;
    return false;
  }

  private boolean jj_3R_ProfileStorageStatement_3810_17_648() {
    if (jj_scan_token(ON)) return true;
    return false;
  }

  private boolean jj_3R_ProfileStorageStatement_3808_9_103() {
    if (jj_scan_token(PROFILE)) return true;
    if (jj_scan_token(STORAGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ProfileStorageStatement_3810_17_648()) {
      jj_scanpos = xsp;
      if (jj_3R_ProfileStorageStatement_3812_17_649()) return true;
    }
    return false;
  }

  private boolean jj_3R_BothPathItemOpt_3791_18_507() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_BothPathItemOpt_3797_10_398() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_BothPathItemOpt_3789_13_397() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BothPathItemOpt_3791_18_507()) jj_scanpos = xsp;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_BothPathItemOpt_3787_9_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BothPathItemOpt_3789_13_397()) {
      jj_scanpos = xsp;
      if (jj_scan_token(220)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_BothPathItemOpt_3797_10_398()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_InPathItemOpt_3770_18_506() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_InPathItemOpt_3776_10_396() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_InPathItemOpt_3768_13_395() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InPathItemOpt_3770_18_506()) jj_scanpos = xsp;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_InPathItemOpt_3765_9_217() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InPathItemOpt_3768_13_395()) {
      jj_scanpos = xsp;
      if (jj_scan_token(220)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_InPathItemOpt_3776_10_396()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OutPathItemOpt_3747_18_505() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_OutPathItemOpt_3754_10_394() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_OutPathItemOpt_3745_13_393() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OutPathItemOpt_3747_18_505()) jj_scanpos = xsp;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_OutPathItemOpt_3743_9_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OutPathItemOpt_3745_13_393()) {
      jj_scanpos = xsp;
      if (jj_scan_token(220)) return true;
    }
    if (jj_scan_token(GT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_OutPathItemOpt_3754_10_394()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_BothPathItem_3725_18_504() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_BothPathItem_3723_13_391() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BothPathItem_3725_18_504()) jj_scanpos = xsp;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_BothPathItem_3721_9_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BothPathItem_3723_13_391()) {
      jj_scanpos = xsp;
      if (jj_scan_token(220)) return true;
    }
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_InPathItem_3704_18_1075() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_InPathItem_3702_13_1072() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InPathItem_3704_18_1075()) jj_scanpos = xsp;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_InPathItem_3699_9_1067() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InPathItem_3702_13_1072()) {
      jj_scanpos = xsp;
      if (jj_scan_token(220)) return true;
    }
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_OutPathItem_3681_18_502() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_OutPathItem_3679_13_389() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OutPathItem_3681_18_502()) jj_scanpos = xsp;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_OutPathItem_3677_9_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OutPathItem_3679_13_389()) {
      jj_scanpos = xsp;
      if (jj_scan_token(220)) return true;
    }
    if (jj_scan_token(GT)) return true;
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3659_17_962() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3667_9_788() {
    if (jj_scan_token(PATH_ALIAS)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3657_17_961() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3663_9_787() {
    if (jj_scan_token(DEPTH_ALIAS)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3654_9_786() {
    if (jj_scan_token(OPTIONAL)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchFilterItem_3657_17_961()) {
      jj_scanpos = xsp;
      if (jj_3R_MatchFilterItem_3659_17_962()) return true;
    }
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3650_9_785() {
    if (jj_scan_token(MAXDEPTH)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_Identifier_582_1_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(261)) {
      jj_scanpos = xsp;
      if (jj_scan_token(247)) {
        jj_scanpos = xsp;
        if (jj_scan_token(29)) {
          jj_scanpos = xsp;
          if (jj_scan_token(31)) {
            jj_scanpos = xsp;
            if (jj_scan_token(30)) {
              jj_scanpos = xsp;
              if (jj_scan_token(34)) {
                jj_scanpos = xsp;
                if (jj_scan_token(32)) {
                  jj_scanpos = xsp;
                  if (jj_scan_token(33)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(40)) {
                      jj_scanpos = xsp;
                      if (jj_scan_token(258)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(46)) {
                          jj_scanpos = xsp;
                          if (jj_scan_token(41)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(27)) {
                              jj_scanpos = xsp;
                              if (jj_scan_token(28)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(56)) {
                                  jj_scanpos = xsp;
                                  if (jj_scan_token(23)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(70)) {
                                      jj_scanpos = xsp;
                                      if (jj_scan_token(76)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(78)) {
                                          jj_scanpos = xsp;
                                          if (jj_scan_token(80)) {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(81)) {
                                              jj_scanpos = xsp;
                                              if (jj_scan_token(75)) {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(71)) {
                                                  jj_scanpos = xsp;
                                                  if (jj_scan_token(72)) {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(82)) {
                                                      jj_scanpos = xsp;
                                                      if (jj_scan_token(83)) {
                                                        jj_scanpos = xsp;
                                                        if (jj_scan_token(84)) {
                                                          jj_scanpos = xsp;
                                                          if (jj_scan_token(85)) {
                                                            jj_scanpos = xsp;
                                                            if (jj_scan_token(86)) {
                                                              jj_scanpos = xsp;
                                                              if (jj_scan_token(87)) {
                                                                jj_scanpos = xsp;
                                                                if (jj_scan_token(89)) {
                                                                  jj_scanpos = xsp;
                                                                  if (jj_scan_token(90)) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_scan_token(91)) {
                                                                      jj_scanpos = xsp;
                                                                      if (jj_scan_token(92)) {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_scan_token(93)) {
                                                                          jj_scanpos = xsp;
                                                                          if (jj_scan_token(94)) {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_scan_token(95)) {
                                                                              jj_scanpos = xsp;
                                                                              if (jj_scan_token(
                                                                                  96)) {
                                                                                jj_scanpos = xsp;
                                                                                if (jj_scan_token(
                                                                                    77)) {
                                                                                  jj_scanpos = xsp;
                                                                                  if (jj_scan_token(
                                                                                      79)) {
                                                                                    jj_scanpos =
                                                                                        xsp;
                                                                                    if (jj_scan_token(
                                                                                        97)) {
                                                                                      jj_scanpos =
                                                                                          xsp;
                                                                                      if (jj_scan_token(
                                                                                          98)) {
                                                                                        jj_scanpos =
                                                                                            xsp;
                                                                                        if (jj_scan_token(
                                                                                            99)) {
                                                                                          jj_scanpos =
                                                                                              xsp;
                                                                                          if (jj_scan_token(
                                                                                              100)) {
                                                                                            jj_scanpos =
                                                                                                xsp;
                                                                                            if (jj_scan_token(
                                                                                                101)) {
                                                                                              jj_scanpos =
                                                                                                  xsp;
                                                                                              if (jj_scan_token(
                                                                                                  102)) {
                                                                                                jj_scanpos =
                                                                                                    xsp;
                                                                                                if (jj_scan_token(
                                                                                                    103)) {
                                                                                                  jj_scanpos =
                                                                                                      xsp;
                                                                                                  if (jj_scan_token(
                                                                                                      104)) {
                                                                                                    jj_scanpos =
                                                                                                        xsp;
                                                                                                    if (jj_scan_token(
                                                                                                        105)) {
                                                                                                      jj_scanpos =
                                                                                                          xsp;
                                                                                                      if (jj_scan_token(
                                                                                                          106)) {
                                                                                                        jj_scanpos =
                                                                                                            xsp;
                                                                                                        if (jj_scan_token(
                                                                                                            107)) {
                                                                                                          jj_scanpos =
                                                                                                              xsp;
                                                                                                          if (jj_scan_token(
                                                                                                              108)) {
                                                                                                            jj_scanpos =
                                                                                                                xsp;
                                                                                                            if (jj_scan_token(
                                                                                                                110)) {
                                                                                                              jj_scanpos =
                                                                                                                  xsp;
                                                                                                              if (jj_scan_token(
                                                                                                                  109)) {
                                                                                                                jj_scanpos =
                                                                                                                    xsp;
                                                                                                                if (jj_scan_token(
                                                                                                                    111)) {
                                                                                                                  jj_scanpos =
                                                                                                                      xsp;
                                                                                                                  if (jj_scan_token(
                                                                                                                      112)) {
                                                                                                                    jj_scanpos =
                                                                                                                        xsp;
                                                                                                                    if (jj_scan_token(
                                                                                                                        113)) {
                                                                                                                      jj_scanpos =
                                                                                                                          xsp;
                                                                                                                      if (jj_scan_token(
                                                                                                                          114)) {
                                                                                                                        jj_scanpos =
                                                                                                                            xsp;
                                                                                                                        if (jj_scan_token(
                                                                                                                            115)) {
                                                                                                                          jj_scanpos =
                                                                                                                              xsp;
                                                                                                                          if (jj_scan_token(
                                                                                                                              116)) {
                                                                                                                            jj_scanpos =
                                                                                                                                xsp;
                                                                                                                            if (jj_scan_token(
                                                                                                                                117)) {
                                                                                                                              jj_scanpos =
                                                                                                                                  xsp;
                                                                                                                              if (jj_scan_token(
                                                                                                                                  118)) {
                                                                                                                                jj_scanpos =
                                                                                                                                    xsp;
                                                                                                                                if (jj_scan_token(
                                                                                                                                    119)) {
                                                                                                                                  jj_scanpos =
                                                                                                                                      xsp;
                                                                                                                                  if (jj_scan_token(
                                                                                                                                      120)) {
                                                                                                                                    jj_scanpos =
                                                                                                                                        xsp;
                                                                                                                                    if (jj_scan_token(
                                                                                                                                        121)) {
                                                                                                                                      jj_scanpos =
                                                                                                                                          xsp;
                                                                                                                                      if (jj_scan_token(
                                                                                                                                          122)) {
                                                                                                                                        jj_scanpos =
                                                                                                                                            xsp;
                                                                                                                                        if (jj_scan_token(
                                                                                                                                            123)) {
                                                                                                                                          jj_scanpos =
                                                                                                                                              xsp;
                                                                                                                                          if (jj_scan_token(
                                                                                                                                              124)) {
                                                                                                                                            jj_scanpos =
                                                                                                                                                xsp;
                                                                                                                                            if (jj_scan_token(
                                                                                                                                                125)) {
                                                                                                                                              jj_scanpos =
                                                                                                                                                  xsp;
                                                                                                                                              if (jj_scan_token(
                                                                                                                                                  126)) {
                                                                                                                                                jj_scanpos =
                                                                                                                                                    xsp;
                                                                                                                                                if (jj_scan_token(
                                                                                                                                                    127)) {
                                                                                                                                                  jj_scanpos =
                                                                                                                                                      xsp;
                                                                                                                                                  if (jj_scan_token(
                                                                                                                                                      128)) {
                                                                                                                                                    jj_scanpos =
                                                                                                                                                        xsp;
                                                                                                                                                    if (jj_scan_token(
                                                                                                                                                        129)) {
                                                                                                                                                      jj_scanpos =
                                                                                                                                                          xsp;
                                                                                                                                                      if (jj_scan_token(
                                                                                                                                                          130)) {
                                                                                                                                                        jj_scanpos =
                                                                                                                                                            xsp;
                                                                                                                                                        if (jj_scan_token(
                                                                                                                                                            131)) {
                                                                                                                                                          jj_scanpos =
                                                                                                                                                              xsp;
                                                                                                                                                          if (jj_scan_token(
                                                                                                                                                              132)) {
                                                                                                                                                            jj_scanpos =
                                                                                                                                                                xsp;
                                                                                                                                                            if (jj_scan_token(
                                                                                                                                                                133)) {
                                                                                                                                                              jj_scanpos =
                                                                                                                                                                  xsp;
                                                                                                                                                              if (jj_scan_token(
                                                                                                                                                                  134)) {
                                                                                                                                                                jj_scanpos =
                                                                                                                                                                    xsp;
                                                                                                                                                                if (jj_scan_token(
                                                                                                                                                                    135)) {
                                                                                                                                                                  jj_scanpos =
                                                                                                                                                                      xsp;
                                                                                                                                                                  if (jj_scan_token(
                                                                                                                                                                      136)) {
                                                                                                                                                                    jj_scanpos =
                                                                                                                                                                        xsp;
                                                                                                                                                                    if (jj_scan_token(
                                                                                                                                                                        137)) {
                                                                                                                                                                      jj_scanpos =
                                                                                                                                                                          xsp;
                                                                                                                                                                      if (jj_scan_token(
                                                                                                                                                                          138)) {
                                                                                                                                                                        jj_scanpos =
                                                                                                                                                                            xsp;
                                                                                                                                                                        if (jj_scan_token(
                                                                                                                                                                            139)) {
                                                                                                                                                                          jj_scanpos =
                                                                                                                                                                              xsp;
                                                                                                                                                                          if (jj_scan_token(
                                                                                                                                                                              140)) {
                                                                                                                                                                            jj_scanpos =
                                                                                                                                                                                xsp;
                                                                                                                                                                            if (jj_scan_token(
                                                                                                                                                                                141)) {
                                                                                                                                                                              jj_scanpos =
                                                                                                                                                                                  xsp;
                                                                                                                                                                              if (jj_scan_token(
                                                                                                                                                                                  142)) {
                                                                                                                                                                                jj_scanpos =
                                                                                                                                                                                    xsp;
                                                                                                                                                                                if (jj_scan_token(
                                                                                                                                                                                    143)) {
                                                                                                                                                                                  jj_scanpos =
                                                                                                                                                                                      xsp;
                                                                                                                                                                                  if (jj_scan_token(
                                                                                                                                                                                      60)) {
                                                                                                                                                                                    jj_scanpos =
                                                                                                                                                                                        xsp;
                                                                                                                                                                                    if (jj_scan_token(
                                                                                                                                                                                        61)) {
                                                                                                                                                                                      jj_scanpos =
                                                                                                                                                                                          xsp;
                                                                                                                                                                                      if (jj_scan_token(
                                                                                                                                                                                          63)) {
                                                                                                                                                                                        jj_scanpos =
                                                                                                                                                                                            xsp;
                                                                                                                                                                                        if (jj_scan_token(
                                                                                                                                                                                            64)) {
                                                                                                                                                                                          jj_scanpos =
                                                                                                                                                                                              xsp;
                                                                                                                                                                                          if (jj_scan_token(
                                                                                                                                                                                              144)) {
                                                                                                                                                                                            jj_scanpos =
                                                                                                                                                                                                xsp;
                                                                                                                                                                                            if (jj_scan_token(
                                                                                                                                                                                                145)) {
                                                                                                                                                                                              jj_scanpos =
                                                                                                                                                                                                  xsp;
                                                                                                                                                                                              if (jj_scan_token(
                                                                                                                                                                                                  146)) {
                                                                                                                                                                                                jj_scanpos =
                                                                                                                                                                                                    xsp;
                                                                                                                                                                                                if (jj_scan_token(
                                                                                                                                                                                                    148)) {
                                                                                                                                                                                                  jj_scanpos =
                                                                                                                                                                                                      xsp;
                                                                                                                                                                                                  if (jj_scan_token(
                                                                                                                                                                                                      149)) {
                                                                                                                                                                                                    jj_scanpos =
                                                                                                                                                                                                        xsp;
                                                                                                                                                                                                    if (jj_scan_token(
                                                                                                                                                                                                        150)) {
                                                                                                                                                                                                      jj_scanpos =
                                                                                                                                                                                                          xsp;
                                                                                                                                                                                                      if (jj_scan_token(
                                                                                                                                                                                                          151)) {
                                                                                                                                                                                                        jj_scanpos =
                                                                                                                                                                                                            xsp;
                                                                                                                                                                                                        if (jj_scan_token(
                                                                                                                                                                                                            152)) {
                                                                                                                                                                                                          jj_scanpos =
                                                                                                                                                                                                              xsp;
                                                                                                                                                                                                          if (jj_scan_token(
                                                                                                                                                                                                              154)) {
                                                                                                                                                                                                            jj_scanpos =
                                                                                                                                                                                                                xsp;
                                                                                                                                                                                                            if (jj_scan_token(
                                                                                                                                                                                                                155)) {
                                                                                                                                                                                                              jj_scanpos =
                                                                                                                                                                                                                  xsp;
                                                                                                                                                                                                              if (jj_scan_token(
                                                                                                                                                                                                                  156)) {
                                                                                                                                                                                                                jj_scanpos =
                                                                                                                                                                                                                    xsp;
                                                                                                                                                                                                                if (jj_scan_token(
                                                                                                                                                                                                                    157)) {
                                                                                                                                                                                                                  jj_scanpos =
                                                                                                                                                                                                                      xsp;
                                                                                                                                                                                                                  if (jj_scan_token(
                                                                                                                                                                                                                      158)) {
                                                                                                                                                                                                                    jj_scanpos =
                                                                                                                                                                                                                        xsp;
                                                                                                                                                                                                                    if (jj_scan_token(
                                                                                                                                                                                                                        159)) {
                                                                                                                                                                                                                      jj_scanpos =
                                                                                                                                                                                                                          xsp;
                                                                                                                                                                                                                      if (jj_scan_token(
                                                                                                                                                                                                                          160)) {
                                                                                                                                                                                                                        jj_scanpos =
                                                                                                                                                                                                                            xsp;
                                                                                                                                                                                                                        if (jj_scan_token(
                                                                                                                                                                                                                            161)) {
                                                                                                                                                                                                                          jj_scanpos =
                                                                                                                                                                                                                              xsp;
                                                                                                                                                                                                                          if (jj_scan_token(
                                                                                                                                                                                                                              164)) {
                                                                                                                                                                                                                            jj_scanpos =
                                                                                                                                                                                                                                xsp;
                                                                                                                                                                                                                            if (jj_scan_token(
                                                                                                                                                                                                                                162)) {
                                                                                                                                                                                                                              jj_scanpos =
                                                                                                                                                                                                                                  xsp;
                                                                                                                                                                                                                              if (jj_scan_token(
                                                                                                                                                                                                                                  163)) {
                                                                                                                                                                                                                                jj_scanpos =
                                                                                                                                                                                                                                    xsp;
                                                                                                                                                                                                                                if (jj_scan_token(
                                                                                                                                                                                                                                    165)) {
                                                                                                                                                                                                                                  jj_scanpos =
                                                                                                                                                                                                                                      xsp;
                                                                                                                                                                                                                                  if (jj_scan_token(
                                                                                                                                                                                                                                      262))
                                                                                                                                                                                                                                    return true;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3642_9_784() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_String_567_5_498() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(190)) {
      jj_scanpos = xsp;
      if (jj_scan_token(169)) return true;
    }
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3634_9_783() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_WhereClause_2620_9_410()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3622_17_960() {
    if (jj_scan_token(CLUSTER_NUMBER_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3630_9_782() {
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3620_17_959() {
    if (jj_scan_token(CLUSTER_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3626_9_781() {
    if (jj_scan_token(RID)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3614_16_958() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3612_16_957() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_StatementSemicolon_895_5_74()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3618_9_780() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchFilterItem_3620_17_959()) {
      jj_scanpos = xsp;
      if (jj_3R_MatchFilterItem_3622_17_960()) return true;
    }
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3609_9_779() {
    if (jj_scan_token(CLUSTER)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchFilterItem_3612_16_957()) {
      jj_scanpos = xsp;
      if (jj_3R_MatchFilterItem_3614_16_958()) return true;
    }
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3605_9_778() {
    if (jj_scan_token(CLASSES)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilter_3589_21_590() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_MatchFilterItem_3600_5_589()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3601_9_777() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilterItem_3600_5_589() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchFilterItem_3601_9_777()) {
      jj_scanpos = xsp;
      if (jj_3R_MatchFilterItem_3605_9_778()) {
        jj_scanpos = xsp;
        if (jj_3R_MatchFilterItem_3609_9_779()) {
          jj_scanpos = xsp;
          if (jj_3R_MatchFilterItem_3618_9_780()) {
            jj_scanpos = xsp;
            if (jj_3R_MatchFilterItem_3626_9_781()) {
              jj_scanpos = xsp;
              if (jj_3R_MatchFilterItem_3630_9_782()) {
                jj_scanpos = xsp;
                if (jj_3R_MatchFilterItem_3634_9_783()) {
                  jj_scanpos = xsp;
                  if (jj_3R_MatchFilterItem_3642_9_784()) {
                    jj_scanpos = xsp;
                    if (jj_3R_MatchFilterItem_3650_9_785()) {
                      jj_scanpos = xsp;
                      if (jj_3R_MatchFilterItem_3654_9_786()) {
                        jj_scanpos = xsp;
                        if (jj_3R_MatchFilterItem_3663_9_787()) {
                          jj_scanpos = xsp;
                          if (jj_3R_MatchFilterItem_3667_9_788()) return true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_MatchFilter_3587_17_503() {
    if (jj_3R_MatchFilterItem_3600_5_589()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MatchFilter_3589_21_590()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_155() {
    if (jj_3R_BothPathItemOpt_3787_9_218()) return true;
    return false;
  }

  private boolean jj_3_154() {
    if (jj_3R_InPathItemOpt_3765_9_217()) return true;
    return false;
  }

  private boolean jj_3_153() {
    if (jj_3R_OutPathItemOpt_3743_9_216()) return true;
    return false;
  }

  private boolean jj_3R_MatchFilter_3584_5_390() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchFilter_3587_17_503()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItemArrows_3577_11_1069() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_Rid_505_10_312() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(168)) {
      jj_scanpos = xsp;
      if (jj_scan_token(169)) return true;
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItemArrows_3567_17_501() {
    if (jj_3R_BothPathItemOpt_3787_9_218()) return true;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItemArrows_3564_17_500() {
    if (jj_3R_InPathItemOpt_3765_9_217()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_Integer_824_1_73()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(272)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItemArrows_3561_17_499() {
    if (jj_3R_OutPathItemOpt_3743_9_216()) return true;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItemArrows_3560_13_387() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MultiMatchPathItemArrows_3561_17_499()) {
      jj_scanpos = xsp;
      if (jj_3R_MultiMatchPathItemArrows_3564_17_500()) {
        jj_scanpos = xsp;
        if (jj_3R_MultiMatchPathItemArrows_3567_17_501()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_Rid_492_5_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
      jj_scanpos = xsp;
      if (jj_3_2()) {
        jj_scanpos = xsp;
        if (jj_3R_Rid_505_10_312()) return true;
      }
    }
    return false;
  }

  private boolean jj_3_152() {
    if (jj_3R_MatchPathItem_3507_5_211()) return true;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItemArrows_3556_5_212() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    if (jj_3R_MultiMatchPathItemArrows_3560_13_387()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MultiMatchPathItemArrows_3560_13_387()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_MultiMatchPathItemArrows_3577_11_1069()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItem_3546_11_1071() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItem_3542_13_1070() {
    if (jj_3R_MatchPathItem_3507_5_211()) return true;
    return false;
  }

  private boolean jj_3R_MultiMatchPathItem_3535_5_213() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_MatchPathItemFirst_3526_5_388()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MultiMatchPathItem_3542_13_1070()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_MultiMatchPathItem_3546_11_1071()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MatchPathItemFirst_3528_11_1074() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_MatchPathItemFirst_3526_5_388() {
    if (jj_3R_FunctionCall_2109_5_160()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchPathItemFirst_3528_11_1074()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_FieldMatchPathItem_3519_11_1073() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3R_FieldMatchPathItem_3516_5_1068() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FieldMatchPathItem_3519_11_1073()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_151() {
    if (jj_3R_BothPathItem_3721_9_215()) return true;
    return false;
  }

  private boolean jj_3R_MatchPathItem_3509_11_392() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    return false;
  }

  private boolean jj_3_150() {
    if (jj_3R_OutPathItem_3677_9_214()) return true;
    return false;
  }

  private boolean jj_3R_MatchExpression_3496_17_1056() {
    if (jj_3R_FieldMatchPathItem_3516_5_1068()) return true;
    return false;
  }

  private boolean jj_3R_MatchPathItem_3507_5_211() {
    if (jj_3R_MethodCall_2130_5_169()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchPathItem_3509_11_392()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MatchExpression_3493_17_1055() {
    if (jj_3R_BothPathItem_3721_9_215()) return true;
    return false;
  }

  private boolean jj_3R_MatchExpression_3491_17_1054() {
    if (jj_3R_InPathItem_3699_9_1067()) return true;
    return false;
  }

  private boolean jj_3R_MatchExpression_3488_17_1053() {
    if (jj_3R_OutPathItem_3677_9_214()) return true;
    return false;
  }

  private boolean jj_3_149() {
    if (jj_3R_MultiMatchPathItem_3535_5_213()) return true;
    return false;
  }

  private boolean jj_3_148() {
    if (jj_3R_MultiMatchPathItemArrows_3556_5_212()) return true;
    return false;
  }

  private boolean jj_3_147() {
    if (jj_3R_MatchPathItem_3507_5_211()) return true;
    return false;
  }

  private boolean jj_3R_MatchExpression_3478_13_1018() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_147()) {
      jj_scanpos = xsp;
      if (jj_3_148()) {
        jj_scanpos = xsp;
        if (jj_3_149()) {
          jj_scanpos = xsp;
          if (jj_3R_MatchExpression_3488_17_1053()) {
            jj_scanpos = xsp;
            if (jj_3R_MatchExpression_3491_17_1054()) {
              jj_scanpos = xsp;
              if (jj_3R_MatchExpression_3493_17_1055()) {
                jj_scanpos = xsp;
                if (jj_3R_MatchExpression_3496_17_1056()) return true;
              }
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3401_80_1014() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_MatchExpression_3475_5_575() {
    if (jj_3R_MatchFilter_3584_5_390()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MatchExpression_3478_13_1018()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_Json_3459_21_933() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_Json_3457_21_932() {
    if (jj_3R_String_567_5_498()) return true;
    return false;
  }

  private boolean jj_3R_Json_3455_21_931() {
    if (jj_scan_token(RECORD_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_Json_3453_21_930() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_Json_3450_17_752() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Json_3453_21_930()) {
      jj_scanpos = xsp;
      if (jj_3R_Json_3455_21_931()) {
        jj_scanpos = xsp;
        if (jj_3R_Json_3457_21_932()) {
          jj_scanpos = xsp;
          if (jj_3R_Json_3459_21_933()) return true;
        }
      }
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_Json_3445_17_751() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3392_69_928() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_Json_3443_17_750() {
    if (jj_3R_String_567_5_498()) return true;
    return false;
  }

  private boolean jj_3R_Json_3441_17_749() {
    if (jj_scan_token(RECORD_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_Json_3439_17_748() {
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_Json_3437_13_544() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Json_3439_17_748()) {
      jj_scanpos = xsp;
      if (jj_3R_Json_3441_17_749()) {
        jj_scanpos = xsp;
        if (jj_3R_Json_3443_17_750()) {
          jj_scanpos = xsp;
          if (jj_3R_Json_3445_17_751()) return true;
        }
      }
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Json_3450_17_752()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_146() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_Json_3434_5_223() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Json_3437_13_544()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_TraverseProjectionItem_3423_11_1052() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_TraverseProjectionItem_3421_5_766() {
    if (jj_3R_BaseIdentifier_2174_5_477()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TraverseProjectionItem_3423_11_1052()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3401_17_929() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FetchPlanItem_3401_80_1014()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3388_21_1013() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3386_21_1012() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3384_17_927() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FetchPlanItem_3386_21_1012()) {
      jj_scanpos = xsp;
      if (jj_3R_FetchPlanItem_3388_21_1013()) return true;
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3383_13_747() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FetchPlanItem_3384_17_927()) jj_scanpos = xsp;
    if (jj_3R_Identifier_582_1_154()) return true;
    xsp = jj_scanpos;
    if (jj_3R_FetchPlanItem_3392_69_928()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FetchPlanItem_3401_17_929()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3381_13_746() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_FetchPlanItem_3379_5_540() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FetchPlanItem_3381_13_746()) {
      jj_scanpos = xsp;
      if (jj_3R_FetchPlanItem_3383_13_747()) return true;
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_FetchPlan_3369_11_541() {
    if (jj_3R_FetchPlanItem_3379_5_540()) return true;
    return false;
  }

  private boolean jj_3R_FetchPlan_3367_5_430() {
    if (jj_scan_token(FETCHPLAN)) return true;
    if (jj_3R_FetchPlanItem_3379_5_540()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FetchPlan_3369_11_541()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_Collection_3353_17_455() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_Collection_3351_13_318() {
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Collection_3353_17_455()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_Collection_3347_5_161() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Collection_3351_13_318()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_Retry_3330_5_823() {
    if (jj_scan_token(RETRY)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_Timeout_3310_17_722() {
    if (jj_scan_token(EXCEPTION)) return true;
    return false;
  }

  private boolean jj_3R_Timeout_3308_17_528() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Timeout_3308_17_721()) {
      jj_scanpos = xsp;
      if (jj_3R_Timeout_3310_17_722()) return true;
    }
    return false;
  }

  private boolean jj_3R_Timeout_3308_17_721() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_Wait_3320_5_824() {
    if (jj_scan_token(WAIT)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_Timeout_3303_5_416() {
    if (jj_scan_token(TIMEOUT)) return true;
    if (jj_3R_Integer_824_1_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Timeout_3308_17_528()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Batch_3294_13_547() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_Batch_3292_13_546() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_Skip_3280_17_926() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_Skip_3278_17_925() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_Batch_3289_5_439() {
    if (jj_scan_token(BATCH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Batch_3292_13_546()) {
      jj_scanpos = xsp;
      if (jj_3R_Batch_3294_13_547()) return true;
    }
    return false;
  }

  private boolean jj_3R_Skip_3271_17_924() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_Skip_3269_17_923() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_Skip_3275_9_745() {
    if (jj_scan_token(OFFSET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Skip_3278_17_925()) {
      jj_scanpos = xsp;
      if (jj_3R_Skip_3280_17_926()) return true;
    }
    return false;
  }

  private boolean jj_3R_OrderBy_3214_66_1011() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3R_Skip_3266_9_744() {
    if (jj_scan_token(SKIP2)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Skip_3269_17_923()) {
      jj_scanpos = xsp;
      if (jj_3R_Skip_3271_17_924()) return true;
    }
    return false;
  }

  private boolean jj_3R_Skip_3265_5_537() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Skip_3266_9_744()) {
      jj_scanpos = xsp;
      if (jj_3R_Skip_3275_9_745()) return true;
    }
    return false;
  }

  private boolean jj_3R_Limit_3256_13_527() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_Limit_3254_13_526() {
    if (jj_3R_Integer_824_1_73()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3192_66_1008() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3R_Limit_3251_5_415() {
    if (jj_scan_token(LIMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Limit_3254_13_526()) {
      jj_scanpos = xsp;
      if (jj_3R_Limit_3256_13_527()) return true;
    }
    return false;
  }

  private boolean jj_3R_Unwind_3241_13_536() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    return false;
  }

  private boolean jj_3R_GroupBy_3229_13_532() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_Unwind_3238_1_427() {
    if (jj_scan_token(UNWIND)) return true;
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Unwind_3241_13_536()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_OrderBy_3206_31_1009() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3211_25_920() {
    if (jj_scan_token(RECORD_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3209_25_919() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3215_19_922() {
    if (jj_scan_token(COLLATE)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3214_19_1010() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3214_19_921() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3214_19_1010()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3214_66_1011()) return true;
    }
    return false;
  }

  private boolean jj_3R_OrderBy_3167_62_912() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3204_25_918() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3206_31_1009()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_GroupBy_3226_1_425() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_GroupBy_3229_13_532()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_OrderBy_3184_31_1006() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3189_25_915() {
    if (jj_scan_token(RECORD_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3187_25_914() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3193_19_917() {
    if (jj_scan_token(COLLATE)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3192_19_1007() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3192_19_916() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3192_19_1007()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3192_66_1008()) return true;
    }
    return false;
  }

  private boolean jj_3R_OrderBy_3196_13_743() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3204_25_918()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3209_25_919()) {
        jj_scanpos = xsp;
        if (jj_3R_OrderBy_3211_25_920()) return true;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3214_19_921()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3215_19_922()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3145_62_909() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3182_25_913() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3184_31_1006()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OrderBy_3175_17_742() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3182_25_913()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3187_25_914()) {
        jj_scanpos = xsp;
        if (jj_3R_OrderBy_3189_25_915()) return true;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3192_19_916()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3193_19_917()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OrderBy_3173_13_535() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3175_17_742()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3196_13_743()) return true;
    }
    return false;
  }

  private boolean jj_3R_OrderBy_3159_27_910() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3164_21_739() {
    if (jj_scan_token(RECORD_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3162_21_738() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3168_15_741() {
    if (jj_scan_token(COLLATE)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3167_15_740() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3167_15_911()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3167_62_912()) return true;
    }
    return false;
  }

  private boolean jj_3R_OrderBy_3167_15_911() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3157_21_737() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3159_27_910()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OrderBy_3137_27_907() {
    if (jj_3R_Modifier_2187_5_170()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3142_21_734() {
    if (jj_scan_token(RECORD_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3140_21_733() {
    if (jj_3R_Rid_492_5_158()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3146_15_736() {
    if (jj_scan_token(COLLATE)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3145_15_735() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3145_15_908()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3145_62_909()) return true;
    }
    return false;
  }

  private boolean jj_3R_OrderBy_3145_15_908() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3149_9_534() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3157_21_737()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3162_21_738()) {
        jj_scanpos = xsp;
        if (jj_3R_OrderBy_3164_21_739()) return true;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3167_15_740()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3168_15_741()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_3135_21_732() {
    if (jj_3R_Identifier_582_1_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3137_27_907()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OrderBy_3128_9_533() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3135_21_732()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3140_21_733()) {
        jj_scanpos = xsp;
        if (jj_3R_OrderBy_3142_21_734()) return true;
      }
    }
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3145_15_735()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3146_15_736()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OrderBy_3125_1_426() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderBy_3128_9_533()) {
      jj_scanpos = xsp;
      if (jj_3R_OrderBy_3149_9_534()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_OrderBy_3173_13_535()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_145() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_MatchesCondition_3108_13_383() {
    if (jj_3R_InputParameter_1865_5_159()) return true;
    return false;
  }

  private boolean jj_3R_MatchesCondition_3106_13_382() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_MatchesCondition_3104_13_381() {
    if (jj_3R_String_567_5_498()) return true;
    return false;
  }

  private boolean jj_3R_MatchesCondition_3101_13_380() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3_144() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_MatchesCondition_3098_5_205() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(MATCHES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MatchesCondition_3101_13_380()) {
      jj_scanpos = xsp;
      if (jj_3R_MatchesCondition_3104_13_381()) {
        jj_scanpos = xsp;
        if (jj_3R_MatchesCondition_3106_13_382()) {
          jj_scanpos = xsp;
          if (jj_3R_MatchesCondition_3108_13_383()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_ContainsAnyCondition_3079_17_379() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_ContainsTextCondition_3089_5_204() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(CONTAINSTEXT)) return true;
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3_143() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_142() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_ContainsAllCondition_3062_17_378() {
    if (jj_3R_Expression_2225_5_144()) return true;
    return false;
  }

  private boolean jj_3R_ContainsAnyCondition_3072_5_203() {
    if (jj_3R_Expression_2225_5_144()) return true;
    if (jj_scan_token(CONTAINSANY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_143()) {
      jj_scanpos = xsp;
      if (jj_3R_ContainsAnyCondition_3079_17_379()) return true;
    }
    return false;
  }

  private boolean jj_3_141() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrBlock_2627_5_167()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public OrientSqlTokenManager token_source;

  /** Current token. */
  public Token token;

  /** Next token. */
  public Token jj_nt;

  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  private final int[] jj_la1 = new int[460];
  private static int[] jj_la1_0;
  private static int[] jj_la1_1;
  private static int[] jj_la1_2;
  private static int[] jj_la1_3;
  private static int[] jj_la1_4;
  private static int[] jj_la1_5;
  private static int[] jj_la1_6;
  private static int[] jj_la1_7;
  private static int[] jj_la1_8;

  static {
    jj_la1_init_0();
    jj_la1_init_1();
    jj_la1_init_2();
    jj_la1_init_3();
    jj_la1_init_4();
    jj_la1_init_5();
    jj_la1_init_6();
    jj_la1_init_7();
    jj_la1_init_8();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 =
        new int[] {
          0x0,
          0x0,
          0xfa93f000,
          0x2000000,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x7000,
          0x8000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x7000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x1000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x2000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x1000000,
          0x0,
          0x0,
          0x400000,
          0x0,
          0x1000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x800000,
          0x1000000,
          0x0,
          0x0,
          0x1000000,
          0x0,
          0x0,
          0x1000000,
          0x0,
          0x0,
          0xf8800000,
          0x1000000,
          0x0,
          0x0,
          0xe0000000,
          0x200000,
          0x0,
          0xf8800000,
          0x0,
          0x1000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0xe0000000,
          0x200000,
          0x0,
          0xf8800000,
          0x0,
          0x1000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x40000000,
          0x0,
          0x0,
          0xe0000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x400000,
          0x1000,
          0x1000,
          0x1000,
          0x401000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xe0000000,
          0x0,
          0x0,
          0xf8800000,
          0x200000,
          0x20000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8c00000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8808000,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x1000,
          0xf8800000,
          0x1000,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3000000,
          0xf8800000,
          0x0,
          0x0,
          0x3000000,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0xf8800000,
          0xf8800000,
          0xf8800000,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x8000000,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x8000000,
          0x0,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0x0,
          0xf8800000,
          0xf8800000,
          0xf8800000,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0x130000,
          0x130000,
          0x130000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0x20000000,
          0x20000000,
          0x20000000,
          0x20000000,
          0x0,
          0x13f000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0xfa93f000,
          0x2000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfa93f000,
          0x2000000,
          0xfa93f000,
          0x2000000,
          0xf8cf9000,
          0x0,
          0x30000,
          0x0,
          0x30000,
          0x20000000,
          0x30000,
          0x0,
          0x30000,
          0x30000,
          0x0,
          0x30000,
          0x20000000,
          0x20000000,
          0xf8800000,
          0xf8800000,
          0x0,
          0xf8800000,
          0xf8800000,
          0x0,
          0xf8800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0xf8800000,
          0x0,
        };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 =
        new int[] {
          0x0,
          0x0,
          0xb9104347,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004347,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100000,
          0x0,
          0x8000000,
          0x0,
          0x8000000,
          0x0,
          0x800,
          0x5000,
          0x5800,
          0x5800,
          0x80000,
          0x8000,
          0x1000000,
          0x800000,
          0x0,
          0x40000000,
          0xb1004347,
          0x8000000,
          0x0,
          0x200,
          0x100,
          0x0,
          0x800,
          0x5000,
          0x5800,
          0x5800,
          0x80000,
          0x8000,
          0x1000000,
          0x800000,
          0x0,
          0x40000000,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x800,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x20000,
          0x0,
          0x0,
          0x20000,
          0x200,
          0x100,
          0x0,
          0x5000,
          0x800,
          0x100000,
          0x0,
          0x800,
          0x0,
          0x0,
          0x100000,
          0x0,
          0x800,
          0x2000,
          0x0,
          0x0,
          0x0,
          0x2000,
          0xb1004307,
          0x0,
          0x0,
          0x800,
          0x2000,
          0x0,
          0x800,
          0x2000,
          0x0,
          0x800,
          0x2000,
          0xb1004307,
          0x0,
          0x800,
          0x2000,
          0xf,
          0x0,
          0x600000,
          0xb1004347,
          0x100000,
          0x0,
          0x1000000,
          0x800000,
          0x800,
          0x8000,
          0xf,
          0x0,
          0x600000,
          0xb1004347,
          0x100000,
          0x0,
          0x1000000,
          0x800000,
          0x800,
          0x8000,
          0x0,
          0x0,
          0x3,
          0x8,
          0x0,
          0x0,
          0xf,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x100000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x2,
          0x0,
          0x100000,
          0x0,
          0xf,
          0x2000,
          0x0,
          0xb1004307,
          0x0,
          0x2,
          0x4000000,
          0x2000000,
          0x2000,
          0x0,
          0xb1005b07,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x20000,
          0x0,
          0x0,
          0x0,
          0xb1004347,
          0x0,
          0x20000,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0xb1004347,
          0x0,
          0xb1004347,
          0x0,
          0x0,
          0x0,
          0x0,
          0x40,
          0x0,
          0x0,
          0x40,
          0x0,
          0x0,
          0xb1004347,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x20,
          0x10,
          0xb1004347,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0xb1004307,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0xb1004307,
          0x50000,
          0x50000,
          0x0,
          0x0,
          0xb1004307,
          0x50000,
          0x50000,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0xb1004307,
          0x50000,
          0x50000,
          0x0,
          0x0,
          0xb1004307,
          0x50000,
          0x50000,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x5000,
          0x0,
          0x100000,
          0x100000,
          0x0,
          0xb1004347,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x20000,
          0xb1004307,
          0x0,
          0x0,
          0x20000,
          0xb1004307,
          0x0,
          0xb1004307,
          0x0,
          0xb1004307,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004347,
          0x0,
          0x0,
          0xb1004347,
          0x0,
          0xb1004347,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0xb1004307,
          0xb1004347,
          0xb1004347,
          0xb1004307,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x400,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0x400,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0x0,
          0xb1004307,
          0xb1004307,
          0xb1004307,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0xb1004307,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0x4,
          0x4,
          0x4,
          0x4,
          0x0,
          0x8100000,
          0x0,
          0x10,
          0x0,
          0x0,
          0x0,
          0x4000000,
          0xb1004347,
          0xb9104347,
          0x0,
          0x0,
          0x30050808,
          0x0,
          0x30050808,
          0xb0050808,
          0x0,
          0xb0050808,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb9104347,
          0x0,
          0xb9104347,
          0x0,
          0xb1004307,
          0x0,
          0x600000,
          0x0,
          0x600000,
          0x0,
          0x600000,
          0x0,
          0x600000,
          0x600000,
          0x0,
          0x600000,
          0x4,
          0x4,
          0xb1004307,
          0xb1004307,
          0x0,
          0xb1004307,
          0xb1004307,
          0x0,
          0xb1004307,
          0x0,
          0x0,
          0x0,
          0x0,
          0xb1004307,
          0x0,
        };
  }

  private static void jj_la1_init_2() {
    jj_la1_2 =
        new int[] {
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x2000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x200,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x4,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x200,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x4,
          0x0,
          0x0,
          0xfefff9c1,
          0x400,
          0x0,
          0x0,
          0x30,
          0x8,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x200,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x2,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x2,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x1000,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x1c0,
          0x0,
          0x0,
          0x1c0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x40000,
          0x40000,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x5400,
          0xfefff9c1,
          0x0,
          0x0,
          0x5400,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x600000,
          0x1000000,
          0x2,
          0xfefff9c1,
          0x2,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x8000000,
          0x0,
          0x0,
          0x10000000,
          0x20000000,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0xfefff9c1,
          0xfefff9c1,
          0xa000a000,
          0x2,
          0xfefff9c1,
          0x0,
          0x2,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x2,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x42880000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0xfefff9c1,
          0x0,
          0xfefff9c1,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfefff9c1,
          0x0,
        };
  }

  private static void jj_la1_init_3() {
    jj_la1_3 =
        new int[] {
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x200,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x10000,
          0x3080000,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x20000000,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x20000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x20000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x20000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x4000,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x4000,
          0xffffffff,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x4000,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x4000,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x1000,
          0xffffffff,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0xffffffff,
          0xffffffff,
          0xffffffff,
          0xffffffff,
          0x1ff,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0x800,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x4000,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x4000,
          0xffffffff,
          0xffffffff,
          0x0,
          0x1000,
          0xffffffff,
          0xffffffff,
          0x0,
          0x1000,
          0xffffffff,
          0xffffffff,
          0xffffffff,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x20000,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0xffffffff,
          0x400000,
          0x3c000000,
          0x3c000000,
          0x3c000000,
          0x0,
          0x80000000,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3890200,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0xc000000,
          0x0,
          0xc000000,
          0x0,
          0xc000000,
          0x0,
          0xc000000,
          0xc000000,
          0x0,
          0xc000000,
          0x0,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0xffffffff,
          0xffffffff,
          0x0,
          0xffffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x0,
        };
  }

  private static void jj_la1_init_4() {
    jj_la1_4 =
        new int[] {
          0x0,
          0x0,
          0xffffffff,
          0x2000020,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0x4000000,
          0x0,
          0xc3c,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x6000,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x6000,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0x6000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x40000,
          0xfdffffff,
          0x0,
          0x0,
          0x6000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x80000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0x0,
          0xfdffffff,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0xfdffffff,
          0x0,
          0xfdffffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdffffff,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x18020000,
          0xfdf7ffff,
          0x0,
          0x0,
          0x18020000,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0x0,
          0x20,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x20,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0x20,
          0x0,
          0x20,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x20,
          0x0,
          0x20,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0xfdf7ffff,
          0xfdf7ffff,
          0x20,
          0x1000,
          0x20,
          0x0,
          0x0,
          0xfdf7ffff,
          0x20,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x1,
          0x2,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x40000000,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x40000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x200,
          0x4100c3c,
          0x180,
          0x0,
          0x180,
          0x180,
          0x40,
          0x0,
          0xfdffffff,
          0xffffffff,
          0x2000020,
          0x20,
          0x10000,
          0x0,
          0x10000,
          0x10000,
          0x0,
          0x10000,
          0x20,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xffffffff,
          0x2000020,
          0xffffffff,
          0x2000020,
          0xfdf7ffff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x0,
          0xfdf7ffff,
          0xfdf7ffff,
          0x40000000,
          0xfdf7ffff,
          0x20,
          0x0,
          0x0,
          0x0,
          0xfdf7ffff,
          0x20,
        };
  }

  private static void jj_la1_init_5() {
    jj_la1_5 =
        new int[] {
          0x300,
          0x0,
          0x611c02ff,
          0x0,
          0x40000200,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100000,
          0x100000,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x80100000,
          0x3f,
          0x0,
          0x611c02ff,
          0x0,
          0x611c02ff,
          0x40,
          0x0,
          0x0,
          0x0,
          0xc0000,
          0x0,
          0x0,
          0xc0000,
          0x0,
          0x0,
          0x611c02ff,
          0x60000200,
          0x611002ff,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100000,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0xc0000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x6000023f,
          0x0,
          0x611002ff,
          0x0,
          0x611002ff,
          0x60000200,
          0x0,
          0x1000bf,
          0x0,
          0x0,
          0x0,
          0x0,
          0x1000bf,
          0x0,
          0x0,
          0x0,
          0x1000bf,
          0x0,
          0x0,
          0x1000bf,
          0x0,
          0x0,
          0x0,
          0x0,
          0x1000bf,
          0x0,
          0x0,
          0x0,
          0x1000bf,
          0x0,
          0x0,
          0x100000,
          0x100000,
          0x100000,
          0x0,
          0x100000,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0x3f,
          0x100000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x600002bf,
          0x0,
          0x600002bf,
          0x600002bf,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x2,
          0x10003f,
          0x0,
          0xc0000,
          0x2,
          0x3f,
          0x0,
          0x3f,
          0x0,
          0x3f,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10003f,
          0x0,
          0x0,
          0x100000,
          0x100000,
          0x100000,
          0x3f,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x3f,
          0xc0000,
          0x10003f,
          0x10003f,
          0xc0000,
          0x4000023f,
          0x3f,
          0x3f,
          0x10003f,
          0x10,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0xbf,
          0x0,
          0x0,
          0x0,
          0x0,
          0xbf,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x3f,
          0x0,
          0x0,
          0x3f,
          0x3f,
          0x0,
          0x0,
          0x3f,
          0x3f,
          0x3f,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10003f,
          0x0,
          0x3f,
          0x0,
          0xbf,
          0xbf,
          0x0,
          0x0,
          0x8,
          0x8,
          0x0,
          0x0,
          0xc0000,
          0x0,
          0x0,
          0x4000023f,
          0x0,
          0x3f,
          0x3f,
          0x0,
          0x3f,
          0x4000023f,
          0x0,
          0x3f,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0x611c02ff,
          0x0,
          0x0,
          0x0,
          0xc0000,
          0x0,
          0x0,
          0xc0000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x611c02ff,
          0x0,
          0x611c02ff,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3f,
          0x4000023f,
          0x0,
          0x3f,
          0x3f,
          0x0,
          0x3f,
          0x0,
          0x0,
          0x1,
          0x0,
          0x3f,
          0x0,
        };
  }

  private static void jj_la1_init_6() {
    jj_la1_6 =
        new int[] {
          0x0,
          0x8,
          0xc01800aa,
          0x80,
          0x0,
          0x0,
          0x40000000,
          0x40000000,
          0x0,
          0x80,
          0xc018002a,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xc01a002a,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100,
          0x80000020,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100,
          0x8,
          0x100000,
          0x100000,
          0x0,
          0x100,
          0x100000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100,
          0x40000008,
          0x40000028,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xc01a002a,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xc01a002a,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100,
          0x100,
          0x0,
          0x0,
          0x100,
          0x100,
          0x0,
          0x220,
          0x2000,
          0x220,
          0x2000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x2,
          0x0,
          0x100,
          0x100,
          0x100,
          0x100,
          0x100,
          0x180008,
          0x100,
          0x180008,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x2,
          0x0,
          0x0,
          0x0,
          0x180000,
          0x0,
          0x100,
          0x100,
          0x0,
          0x20000,
          0x100000,
          0x0,
          0x100,
          0x20000,
          0x80000000,
          0xc01a002a,
          0x100000,
          0x0,
          0x100,
          0x0,
          0x180001,
          0x0,
          0x100,
          0xc018002a,
          0x100,
          0xc018002a,
          0x0,
          0x80000000,
          0x20,
          0x200,
          0x0,
          0x8,
          0x2000000,
          0x0,
          0x8,
          0xe0000000,
          0xc018002a,
          0x0,
          0xc0180020,
          0x100,
          0x2,
          0x100,
          0x180000,
          0x100100,
          0x100100,
          0x40000008,
          0x20,
          0x180002,
          0x0,
          0x0,
          0x100,
          0x0,
          0x0,
          0x40000200,
          0x40000200,
          0x0,
          0x0,
          0x0,
          0x0,
          0xc018002a,
          0x0,
          0x5e1e000,
          0x6000,
          0x0,
          0x5e1e000,
          0x0,
          0x0,
          0xc0180022,
          0x0,
          0xc0180022,
          0x180000,
          0x220,
          0x40000008,
          0x0,
          0x0,
          0x0,
          0x220,
          0x40000008,
          0x0,
          0x0,
          0x0,
          0x4000000a,
          0x100,
          0x220,
          0x40000008,
          0x0,
          0x0,
          0x0,
          0x220,
          0x40000008,
          0x0,
          0x0,
          0x0,
          0x4000000a,
          0x100,
          0x100,
          0x40180000,
          0x40180000,
          0x40180000,
          0x0,
          0x40180000,
          0x0,
          0x0,
          0x100,
          0xc018002a,
          0x80000020,
          0xc0000000,
          0x20,
          0x80000000,
          0x200,
          0x80000000,
          0x80000020,
          0x0,
          0x100,
          0x0,
          0x0,
          0x50008200,
          0x8000,
          0x200,
          0x8,
          0x8,
          0x8,
          0x8,
          0x50008000,
          0x8,
          0x100,
          0x0,
          0x40000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x50000000,
          0x0,
          0x50000000,
          0x0,
          0x50000000,
          0x0,
          0x50000000,
          0x8,
          0x0,
          0x50000000,
          0x8,
          0x0,
          0x50000000,
          0x8,
          0x0,
          0x0,
          0x0,
          0x40000000,
          0x0,
          0x100,
          0x40000008,
          0x40000028,
          0x4000000a,
          0x0,
          0x100,
          0x0,
          0x20,
          0x0,
          0x100,
          0x0,
          0x100,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x60000000,
          0x60000000,
          0x0,
          0x100,
          0x0,
          0x0,
          0x40000000,
          0x40000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x40000000,
          0x0,
          0x0,
          0x180000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100,
          0x2,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100,
          0x0,
          0x0,
          0x0,
          0x100,
          0x0,
          0x0,
          0x0,
          0x80000000,
          0x80000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x80000000,
          0x40000000,
          0x0,
          0x0,
          0x40000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x100,
          0x0,
          0x0,
          0x0,
          0x0,
          0x180000,
          0x100,
          0x0,
          0x20,
          0x0,
          0x180000,
          0x180000,
          0x100,
          0x0,
          0x20,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x8,
          0x0,
          0x0,
          0xc018002a,
          0xc01800aa,
          0x80,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xc01800aa,
          0x80,
          0xc01800aa,
          0x80,
          0x80000000,
          0x200,
          0x0,
          0x100,
          0x0,
          0x0,
          0x0,
          0x100,
          0x0,
          0x0,
          0x100,
          0x0,
          0x0,
          0x0,
          0x180000,
          0x180000,
          0x100,
          0x0,
          0x20,
          0x0,
          0x180000,
          0x0,
          0x100,
          0x0,
          0x8,
          0x180000,
          0x0,
        };
  }

  private static void jj_la1_init_7() {
    jj_la1_7 =
        new int[] {
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x400000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x780,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x300000,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xc007f,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0xc00000,
          0x0,
          0x41000000,
          0x0,
          0x400000,
          0x41c00000,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x800000,
          0x800000,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x800000,
          0x800000,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0xf9800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x800000,
          0x800000,
          0x0,
          0x800000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x800000,
          0x0,
        };
  }

  private static void jj_la1_init_8() {
    jj_la1_8 =
        new int[] {
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10000,
          0x10000,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10,
          0x1864,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10,
          0x0,
          0x1800,
          0x0,
          0x0,
          0x10,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x10064,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10000,
          0x1810,
          0x2000,
          0x64,
          0x1800,
          0x0,
          0x64,
          0x20000,
          0x0,
          0x0,
          0x700,
          0x780,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x64,
          0x0,
          0x64,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x64,
          0x0,
          0x64,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x1810,
          0x64,
          0x1800,
          0x0,
          0x1810,
          0x64,
          0x0,
          0x64,
          0x0,
          0x64,
          0x0,
          0x64,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x10000,
          0x10000,
          0x10000,
          0x1864,
          0x0,
          0x1864,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x64,
          0x0,
          0x64,
          0x0,
          0x64,
          0x64,
          0x0,
          0x40064,
          0x64,
          0x64,
          0x64,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x64,
          0x4,
          0x0,
          0x0,
          0x0,
          0x64,
          0x4,
          0x0,
          0x0,
          0x64,
          0x64,
          0x0,
          0x0,
          0x64,
          0x64,
          0x0,
          0x0,
          0x64,
          0x64,
          0x20064,
          0x20064,
          0x0,
          0x10,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x64,
          0x0,
          0x64,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
          0x64,
          0x64,
          0x0,
          0x64,
          0x64,
          0x0,
          0x64,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x10064,
          0x10064,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x3f80000,
          0x3f80000,
          0xc000000,
          0xc000000,
          0x30000000,
          0x30000000,
          0x10064,
          0x0,
          0x10064,
          0x0,
          0x74,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x64,
          0x0,
          0x64,
          0x64,
          0x0,
          0x64,
          0x0,
          0x0,
          0x0,
          0x0,
          0x64,
          0x0,
        };
  }

  private final JJCalls[] jj_2_rtns = new JJCalls[168];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public OrientSql(CharStream stream) {
    token_source = new OrientSqlTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 460; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 460; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public OrientSql(OrientSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 460; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(OrientSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 460; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  private static final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }

  private static final LookaheadSuccess jj_ls = new LookaheadSuccess();

  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0;
      Token tok = token;
      while (tok != null && tok != jj_scanpos) {
        i++;
        tok = tok.next;
      }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  /** Get the next Token. */
  public final Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  public final Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
      return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }
          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[286];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 460; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
          if ((jj_la1_2[i] & (1 << j)) != 0) {
            la1tokens[64 + j] = true;
          }
          if ((jj_la1_3[i] & (1 << j)) != 0) {
            la1tokens[96 + j] = true;
          }
          if ((jj_la1_4[i] & (1 << j)) != 0) {
            la1tokens[128 + j] = true;
          }
          if ((jj_la1_5[i] & (1 << j)) != 0) {
            la1tokens[160 + j] = true;
          }
          if ((jj_la1_6[i] & (1 << j)) != 0) {
            la1tokens[192 + j] = true;
          }
          if ((jj_la1_7[i] & (1 << j)) != 0) {
            la1tokens[224 + j] = true;
          }
          if ((jj_la1_8[i] & (1 << j)) != 0) {
            la1tokens[256 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 286; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

  /** Trace enabled. */
  public final boolean trace_enabled() {
    return trace_enabled;
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 168; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0:
                jj_3_1();
                break;
              case 1:
                jj_3_2();
                break;
              case 2:
                jj_3_3();
                break;
              case 3:
                jj_3_4();
                break;
              case 4:
                jj_3_5();
                break;
              case 5:
                jj_3_6();
                break;
              case 6:
                jj_3_7();
                break;
              case 7:
                jj_3_8();
                break;
              case 8:
                jj_3_9();
                break;
              case 9:
                jj_3_10();
                break;
              case 10:
                jj_3_11();
                break;
              case 11:
                jj_3_12();
                break;
              case 12:
                jj_3_13();
                break;
              case 13:
                jj_3_14();
                break;
              case 14:
                jj_3_15();
                break;
              case 15:
                jj_3_16();
                break;
              case 16:
                jj_3_17();
                break;
              case 17:
                jj_3_18();
                break;
              case 18:
                jj_3_19();
                break;
              case 19:
                jj_3_20();
                break;
              case 20:
                jj_3_21();
                break;
              case 21:
                jj_3_22();
                break;
              case 22:
                jj_3_23();
                break;
              case 23:
                jj_3_24();
                break;
              case 24:
                jj_3_25();
                break;
              case 25:
                jj_3_26();
                break;
              case 26:
                jj_3_27();
                break;
              case 27:
                jj_3_28();
                break;
              case 28:
                jj_3_29();
                break;
              case 29:
                jj_3_30();
                break;
              case 30:
                jj_3_31();
                break;
              case 31:
                jj_3_32();
                break;
              case 32:
                jj_3_33();
                break;
              case 33:
                jj_3_34();
                break;
              case 34:
                jj_3_35();
                break;
              case 35:
                jj_3_36();
                break;
              case 36:
                jj_3_37();
                break;
              case 37:
                jj_3_38();
                break;
              case 38:
                jj_3_39();
                break;
              case 39:
                jj_3_40();
                break;
              case 40:
                jj_3_41();
                break;
              case 41:
                jj_3_42();
                break;
              case 42:
                jj_3_43();
                break;
              case 43:
                jj_3_44();
                break;
              case 44:
                jj_3_45();
                break;
              case 45:
                jj_3_46();
                break;
              case 46:
                jj_3_47();
                break;
              case 47:
                jj_3_48();
                break;
              case 48:
                jj_3_49();
                break;
              case 49:
                jj_3_50();
                break;
              case 50:
                jj_3_51();
                break;
              case 51:
                jj_3_52();
                break;
              case 52:
                jj_3_53();
                break;
              case 53:
                jj_3_54();
                break;
              case 54:
                jj_3_55();
                break;
              case 55:
                jj_3_56();
                break;
              case 56:
                jj_3_57();
                break;
              case 57:
                jj_3_58();
                break;
              case 58:
                jj_3_59();
                break;
              case 59:
                jj_3_60();
                break;
              case 60:
                jj_3_61();
                break;
              case 61:
                jj_3_62();
                break;
              case 62:
                jj_3_63();
                break;
              case 63:
                jj_3_64();
                break;
              case 64:
                jj_3_65();
                break;
              case 65:
                jj_3_66();
                break;
              case 66:
                jj_3_67();
                break;
              case 67:
                jj_3_68();
                break;
              case 68:
                jj_3_69();
                break;
              case 69:
                jj_3_70();
                break;
              case 70:
                jj_3_71();
                break;
              case 71:
                jj_3_72();
                break;
              case 72:
                jj_3_73();
                break;
              case 73:
                jj_3_74();
                break;
              case 74:
                jj_3_75();
                break;
              case 75:
                jj_3_76();
                break;
              case 76:
                jj_3_77();
                break;
              case 77:
                jj_3_78();
                break;
              case 78:
                jj_3_79();
                break;
              case 79:
                jj_3_80();
                break;
              case 80:
                jj_3_81();
                break;
              case 81:
                jj_3_82();
                break;
              case 82:
                jj_3_83();
                break;
              case 83:
                jj_3_84();
                break;
              case 84:
                jj_3_85();
                break;
              case 85:
                jj_3_86();
                break;
              case 86:
                jj_3_87();
                break;
              case 87:
                jj_3_88();
                break;
              case 88:
                jj_3_89();
                break;
              case 89:
                jj_3_90();
                break;
              case 90:
                jj_3_91();
                break;
              case 91:
                jj_3_92();
                break;
              case 92:
                jj_3_93();
                break;
              case 93:
                jj_3_94();
                break;
              case 94:
                jj_3_95();
                break;
              case 95:
                jj_3_96();
                break;
              case 96:
                jj_3_97();
                break;
              case 97:
                jj_3_98();
                break;
              case 98:
                jj_3_99();
                break;
              case 99:
                jj_3_100();
                break;
              case 100:
                jj_3_101();
                break;
              case 101:
                jj_3_102();
                break;
              case 102:
                jj_3_103();
                break;
              case 103:
                jj_3_104();
                break;
              case 104:
                jj_3_105();
                break;
              case 105:
                jj_3_106();
                break;
              case 106:
                jj_3_107();
                break;
              case 107:
                jj_3_108();
                break;
              case 108:
                jj_3_109();
                break;
              case 109:
                jj_3_110();
                break;
              case 110:
                jj_3_111();
                break;
              case 111:
                jj_3_112();
                break;
              case 112:
                jj_3_113();
                break;
              case 113:
                jj_3_114();
                break;
              case 114:
                jj_3_115();
                break;
              case 115:
                jj_3_116();
                break;
              case 116:
                jj_3_117();
                break;
              case 117:
                jj_3_118();
                break;
              case 118:
                jj_3_119();
                break;
              case 119:
                jj_3_120();
                break;
              case 120:
                jj_3_121();
                break;
              case 121:
                jj_3_122();
                break;
              case 122:
                jj_3_123();
                break;
              case 123:
                jj_3_124();
                break;
              case 124:
                jj_3_125();
                break;
              case 125:
                jj_3_126();
                break;
              case 126:
                jj_3_127();
                break;
              case 127:
                jj_3_128();
                break;
              case 128:
                jj_3_129();
                break;
              case 129:
                jj_3_130();
                break;
              case 130:
                jj_3_131();
                break;
              case 131:
                jj_3_132();
                break;
              case 132:
                jj_3_133();
                break;
              case 133:
                jj_3_134();
                break;
              case 134:
                jj_3_135();
                break;
              case 135:
                jj_3_136();
                break;
              case 136:
                jj_3_137();
                break;
              case 137:
                jj_3_138();
                break;
              case 138:
                jj_3_139();
                break;
              case 139:
                jj_3_140();
                break;
              case 140:
                jj_3_141();
                break;
              case 141:
                jj_3_142();
                break;
              case 142:
                jj_3_143();
                break;
              case 143:
                jj_3_144();
                break;
              case 144:
                jj_3_145();
                break;
              case 145:
                jj_3_146();
                break;
              case 146:
                jj_3_147();
                break;
              case 147:
                jj_3_148();
                break;
              case 148:
                jj_3_149();
                break;
              case 149:
                jj_3_150();
                break;
              case 150:
                jj_3_151();
                break;
              case 151:
                jj_3_152();
                break;
              case 152:
                jj_3_153();
                break;
              case 153:
                jj_3_154();
                break;
              case 154:
                jj_3_155();
                break;
              case 155:
                jj_3_156();
                break;
              case 156:
                jj_3_157();
                break;
              case 157:
                jj_3_158();
                break;
              case 158:
                jj_3_159();
                break;
              case 159:
                jj_3_160();
                break;
              case 160:
                jj_3_161();
                break;
              case 161:
                jj_3_162();
                break;
              case 162:
                jj_3_163();
                break;
              case 163:
                jj_3_164();
                break;
              case 164:
                jj_3_165();
                break;
              case 165:
                jj_3_166();
                break;
              case 166:
                jj_3_167();
                break;
              case 167:
                jj_3_168();
                break;
            }
          }
          p = p.next;
        } while (p != null);

      } catch (LookaheadSuccess ls) {
      }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p = p.next = new JJCalls();
        break;
      }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la;
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }
}
